(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
Copyright (C) 2015 RequestTimeout <https://github.com/RequestTimeout408>

This file is part of the Tyria 3D Library.

Tyria 3D Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Tyria 3D Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.
*/
var Utils = T3D.ParserUtils;

/**
 * An auto-generated structure of arrays describing Chunk formats
 * in the GW2 dat. The main contents of this file is generated
 * using the IDA script file 'ParseAnetStructsJS.idc'
 * located in the IDA folder.
 * 
 * @for T3D
 * @property Formats
 * @type Array
 */
window.T3D.formats = [

	///==================================================
	/// Chunk: GRMT, versions: 7, strucTab: 0x13B54C0 
	///==================================================
	{
		name:'GRMT',
		versions:{


			// => Version: 6
			6:function(){
						this.__root=this.AmatGr =[
				'texArrayRange' , 'uint8',
				'texCount' , 'uint8',
				'sortOrder' , 'uint8',
				'sortTri' , 'uint8',
				'procAnim' , 'uint8',
				'debugFlags' , 'uint32',
				'flags' , 'uint32',
				'texTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},

			// => Version: 5
			5:function(){
						this.__root=this.AmatGr =[
				'texArrayRange' , 'uint8',
				'texCount' , 'uint8',
				'texTransformRange' , 'uint8',
				'sortOrder' , 'uint8',
				'sortTri' , 'uint8',
				'procAnim' , 'uint8',
				'debugFlags' , 'uint32',
				'flags' , 'uint32',
				'texType' , 'uint32',
				'textureMasks', ['[]', 'uint32', 4],
				'texTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},

			// => Version: 4
			4:function(){
						this.__root=this.AmatGr =[
				'texArrayRange' , 'uint8',
				'texCount' , 'uint8',
				'texTransformRange' , 'uint8',
				'sortOrder' , 'uint8',
				'sortTri' , 'uint8',
				'procAnim' , 'uint8',
				'debugFlags' , 'uint32',
				'flags' , 'uint32',
				'texType' , 'uint32',
				'textureMasks', ['[]', 'uint32', 4],
						];

			},

			// => Version: 3
			3:function(){
						this.__root=this.AmatGrV3 =[
				'texArrayRange' , 'uint8',
				'texCount' , 'uint8',
				'texTransformRange' , 'uint8',
				'sortOrder' , 'uint8',
				'sortTri' , 'uint8',
				'debugFlags' , 'uint32',
				'flags' , 'uint32',
				'texType' , 'uint32',
				'textureMasks', ['[]', 'uint32', 4],
						];

			},

			// => Version: 2
			2:function(){
						this.__root=this.AmatGrV2 =[
				'texArrayRange' , 'uint8',
				'texCount' , 'uint8',
				'texTransformRange' , 'uint8',
				'sortOrder' , 'uint8',
				'sortTri' , 'uint8',
				'flags' , 'uint32',
				'texType' , 'uint32',
				'textureMasks', ['[]', 'uint32', 4],
						];

			},

			// => Version: 1
			1:function(){
						this.__root=this.AmatGrV1 =[
				'texArrayRange' , 'uint8',
				'texCount' , 'uint8',
				'texTransformRange' , 'uint8',
				'sortOrder' , 'uint8',
				'flags' , 'uint32',
				'texType' , 'uint32',
				'textureMasks', ['[]', 'uint32', 4],
						];

			},

			// => Version: 0
			0:function(){
						this.__root=this.AmatGrV0 =[
				'texArrayRange' , 'uint8',
				'texCount' , 'uint8',
				'texTransformRange' , 'uint8',
				'sortOrder' , 'uint8',
				'flags' , 'uint32',
				'textureMasks', ['[]', 'uint32', 4],
						];

			},
		}
	},

	///==================================================
	/// Chunk: DX9S, versions: 12, strucTab: 0x13B5520 
	///==================================================
	{
		name:'DX9S',
		versions:{


			// => Version: 11, ReferencedFunction: 0x7B0830
			11:function(){
						this.AmatDx9SamplerV11 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
				'usesBindTexture' , 'uint32',
						];

						this.AmatDx9ShaderV11 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
				'instructionCount', 'uint16',
						];

						this.AmatDx9EffectV11 =[
				'token', Utils.getQWordReader(),
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV11 =[
				'effects', Utils.getRefArrayReader(this.AmatDx9EffectV11),
						];

						this.AmatDx9TechniqueV11 =[
				'name', Utils.getStringReader(),
				'passes', Utils.getArrayReader(this.AmatDx9PassV11),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV11 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV11),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV11),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV11),
				'useLegacyBindTextures' , 'uint32',
						];

			},

			// => Version: 10
			10:function(){
						this.AmatDx9SamplerV10 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV10 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
				'instructionCount', 'uint16',
						];

						this.AmatDx9EffectV10 =[
				'token', Utils.getQWordReader(),
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV10 =[
				'effects', Utils.getRefArrayReader(this.AmatDx9EffectV10),
						];

						this.AmatDx9TechniqueV10 =[
				'name', Utils.getStringReader(),
				'passes', Utils.getArrayReader(this.AmatDx9PassV10),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV10 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV10),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV10),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV10),
						];

			},

			// => Version: 9, ReferencedFunction: 0x7B0E70
			9:function(){
						this.AmatDx9SamplerV9 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV9 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9EffectV9 =[
				'token', Utils.getQWordReader(),
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV9 =[
				'effects', Utils.getRefArrayReader(this.AmatDx9EffectV9),
						];

						this.AmatDx9TechniqueV9 =[
				'name', Utils.getStringReader(),
				'passes', Utils.getArrayReader(this.AmatDx9PassV9),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV9 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV9),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV9),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV9),
						];

			},

			// => Version: 8, ReferencedFunction: 0x7B0C40
			8:function(){
						this.AmatDx9SamplerV8 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV8 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9EffectV8 =[
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV8 =[
				'effects', Utils.getRefArrayReader(this.AmatDx9EffectV8),
						];

						this.AmatDx9TechniqueV8 =[
				'name', Utils.getStringReader(),
				'passes', Utils.getArrayReader(this.AmatDx9PassV8),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV8 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV8),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV8),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV8),
						];

			},

			// => Version: 7, ReferencedFunction: 0x7B0BC0
			7:function(){
						this.AmatDx9SamplerV7 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV7 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9EffectV7 =[
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV7 =[
				'effects', ['[]', this.AmatDx9EffectV7, 8],
						];

						this.AmatDx9TechniqueV7 =[
				'name', Utils.getStringReader(),
				'passes', Utils.getArrayReader(this.AmatDx9PassV7),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV7 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV7),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV7),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV7),
						];

			},

			// => Version: 6, ReferencedFunction: 0x7B0B70
			6:function(){
						this.AmatDx9SamplerV6 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV6 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9EffectV6 =[
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV6 =[
				'effects', ['[]', this.AmatDx9EffectV6, 8],
						];

						this.AmatDx9TechniqueV6 =[
				'name', Utils.getStringReader(),
				'passes', Utils.getArrayReader(this.AmatDx9PassV6),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV6 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV6),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV6),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV6),
						];

			},

			// => Version: 5, ReferencedFunction: 0x7B0A80
			5:function(){
						this.AmatDx9SamplerV5 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV5 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9EffectV5 =[
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV5 =[
				'effects', ['[]', this.AmatDx9EffectV5, 7],
						];

						this.AmatDx9TechniqueV5 =[
				'name', Utils.getStringReader(),
				'sortTri' , 'uint32',
				'passes', Utils.getArrayReader(this.AmatDx9PassV5),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV5 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV5),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV5),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV5),
						];

			},

			// => Version: 4
			4:function(){
						this.AmatDx9SamplerV4 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV4 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9EffectV4 =[
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV4 =[
				'effects', ['[]', this.AmatDx9EffectV4, 7],
						];

						this.AmatDx9TechniqueV4 =[
				'name', Utils.getStringReader(),
				'sortTri' , 'uint32',
				'passes', Utils.getArrayReader(this.AmatDx9PassV4),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV4 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV4),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV4),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV4),
						];

			},

			// => Version: 3
			3:function(){
						this.AmatDx9SamplerV3 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV3 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9EffectV3 =[
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV3 =[
				'effects', ['[]', this.AmatDx9EffectV3, 7],
						];

						this.AmatDx9TechniqueV3 =[
				'name', Utils.getStringReader(),
				'sortTri' , 'uint32',
				'passes', Utils.getArrayReader(this.AmatDx9PassV3),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV3 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV3),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV3),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV3),
						];

			},

			// => Version: 2, ReferencedFunction: 0x7B0850
			2:function(){
						this.AmatDx9SamplerV2 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV2 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9EffectV2 =[
				'renderStates', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9PassV2 =[
				'effects', ['[]', this.AmatDx9EffectV2, 7],
						];

						this.AmatDx9TechniqueV2 =[
				'name', Utils.getStringReader(),
				'sortTri' , 'uint32',
				'passes', Utils.getArrayReader(this.AmatDx9PassV2),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV2 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV2),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV2),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV2),
						];

			},

			// => Version: 1, ReferencedFunction: 0x7B06A0
			1:function(){
						this.AmatDx9SamplerV1 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV1 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9RenderStatesV1 =[
				'renderStates', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9PassV1 =[
				'effectRenderStates', Utils.getRefArrayReader(this.AmatDx9RenderStatesV1),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader', ['[]', 'uint32', 5],
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags', ['[]', 'uint32', 5],
						];

						this.AmatDx9TechniqueV1 =[
				'name', Utils.getStringReader(),
				'sortTri' , 'uint32',
				'passes', Utils.getArrayReader(this.AmatDx9PassV1),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV1 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV1),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV1),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV1),
						];

			},

			// => Version: 0
			0:function(){
						this.AmatDx9SamplerV0 =[
				'textureIndex' , 'uint32',
				'state', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9ShaderV0 =[
				'shader', Utils.getArrayReader('uint32'),
				'constRegisters', Utils.getArrayReader('uint32'),
				'constTokens', Utils.getArrayReader('uint32'),
						];

						this.AmatDx9PassV0 =[
				'renderState', Utils.getArrayReader('uint32'),
				'samplerIndex', Utils.getArrayReader('uint32'),
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
				'vsGenFlags' , 'uint32',
				'passFlags' , 'uint32',
						];

						this.AmatDx9TechniqueV0 =[
				'name', Utils.getStringReader(),
				'sortTri' , 'uint32',
				'passes', Utils.getArrayReader(this.AmatDx9PassV0),
				'maxPsVersion', 'uint16',
				'maxVsVersion', 'uint16',
						];

						this.__root=this.AmatDx9MaterialV0 =[
				'samplers', Utils.getArrayReader(this.AmatDx9SamplerV0),
				'shaders', Utils.getArrayReader(this.AmatDx9ShaderV0),
				'techniques', Utils.getArrayReader(this.AmatDx9TechniqueV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: XBXS, versions: 1, strucTab: 0x13B55EC 
	///==================================================
	{
		name:'XBXS',
		versions:{


			// => Version: 0
			0:function(){
						this.AmatXbxShaderConstant =[
				'token' , 'uint32',
				'regIndex' , 'uint32',
				'regCount' , 'uint32',
						];

						this.AmatXbxSamplerConstant =[
				'regIndex' , 'uint32',
				'stateIndex' , 'uint32',
				'texIndex' , 'uint32',
						];

						this.AmatXbxShader =[
				'isPixelShader' , 'uint32',
				'cachedData', Utils.getArrayReader('uint8'),
				'physicalData', Utils.getArrayReader('uint8'),
				'constants', Utils.getArrayReader(this.AmatXbxShaderConstant),
				'samplers', Utils.getArrayReader(this.AmatXbxSamplerConstant),
						];

						this.AmatXbxRenderState =[
				'cullMode' , 'uint32',
				'blendControl' , 'uint32',
				'alphaTestAndMask' , 'uint32',
				'alphaTestRef' , 'uint32',
				'colorWrite_ARGB' , 'uint32',
				'depthWriteEnable' , 'uint32',
				'depthFunction' , 'uint32',
				'depthBias' , 'float32',
						];

						this.AmatXbxPass =[
				'renderState', this.AmatXbxRenderState,
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'psFileFame' , Utils.getFileNameReader(),
				'vsFileName' , Utils.getFileNameReader(),
						];

						this.AmatXbxEffect =[
				'token', Utils.getQWordReader(),
				'passes', Utils.getArrayReader(this.AmatXbxPass),
						];

						this.AmatXbxSamplerState =[
				'addressU' , 'uint32',
				'addressV' , 'uint32',
				'addressW' , 'uint32',
				'borderColor' , 'uint32',
				'magFilter' , 'uint32',
				'maxAnisotropy' , 'uint32',
				'maxMipLevel' , 'uint32',
				'minFilter' , 'uint32',
				'mipFilter' , 'uint32',
				'mipMapLodBias' , 'float32',
						];

						this.__root=this.AmatXbxMaterial =[
				'name', Utils.getStringReader(),
				'shaders', Utils.getArrayReader(this.AmatXbxShader),
				'effects', Utils.getArrayReader(this.AmatXbxEffect),
				'samplers', Utils.getArrayReader(this.AmatXbxSamplerState),
						];

			},
		}
	},

	///==================================================
	/// Chunk: PS3S, versions: 1, strucTab: 0x13B5514 
	///==================================================
	{
		name:'PS3S',
		versions:{


			// => Version: 0
			0:function(){
						this.AmatPs3ShaderConstant =[
				'token' , 'uint32',
				'regIndex' , 'uint32',
				'regCount' , 'uint32',
				'regValue' , ['[]','float32',4],
				'data' , 'uint32',
						];

						this.AmatPs3SamplerConstant =[
				'regIndex' , 'uint32',
				'stateIndex' , 'uint32',
				'texIndex' , 'uint32',
						];

						this.AmatPs3FragmentShaderConfig =[
				'offset' , 'uint32',
				'attributeInputMask' , 'uint32',
				'texCoordsInputMask' , 'uint32',
				'texCoords2D' , 'uint32',
				'texCoordsCentroid' , 'uint32',
				'fragmentControl' , 'uint32',
				'registerCount' , 'uint32',
				'constants', Utils.getArrayReader(this.AmatPs3ShaderConstant),
				'samplers', Utils.getArrayReader(this.AmatPs3SamplerConstant),
				'code', Utils.getArrayReader('uint8'),
						];

						this.AmatPs3VertexShaderConfig =[
				'instructionSlot' , 'uint32',
				'instructionCount' , 'uint32',
				'attributeInputMask' , 'uint32',
				'registerCount' , 'uint32',
				'constants', Utils.getArrayReader(this.AmatPs3ShaderConstant),
				'samplers', Utils.getArrayReader(this.AmatPs3SamplerConstant),
				'code', Utils.getArrayReader('uint8'),
						];

						this.AmatPs3RenderState =[
				'cullMode' , 'uint32',
				'alphaFunc' , 'uint32',
				'alphaRef' , 'uint32',
				'blendOp' , 'uint32',
				'blendSrc' , 'uint32',
				'blendDst' , 'uint32',
				'colorMask' , 'uint32',
				'depthWrite' , 'uint32',
				'depthFunc' , 'uint32',
				'depthBias' , 'float32',
						];

						this.AmatPs3Pass =[
				'renderState', this.AmatPs3RenderState,
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'psFileFame' , Utils.getFileNameReader(),
				'vsFileName' , Utils.getFileNameReader(),
						];

						this.AmatPs3Effect =[
				'token', Utils.getQWordReader(),
				'passes', Utils.getArrayReader(this.AmatPs3Pass),
						];

						this.AmatPs3Sampler =[
				'wraps' , 'uint32',
				'wrapt' , 'uint32',
				'maxAniso' , 'uint32',
				'filterMin' , 'uint32',
				'filterMag' , 'uint32',
				'filterBias' , 'uint32',
						];

						this.__root=this.AmatPs3Material =[
				'name', Utils.getStringReader(),
				'fragmentShaders', Utils.getArrayReader(this.AmatPs3FragmentShaderConfig),
				'vertexShaders', Utils.getArrayReader(this.AmatPs3VertexShaderConfig),
				'effects', Utils.getArrayReader(this.AmatPs3Effect),
				'samplers', Utils.getArrayReader(this.AmatPs3Sampler),
						];

			},
		}
	},

	///==================================================
	/// Chunk: MRAS, versions: 1, strucTab: 0x13B55E0 
	///==================================================
	{
		name:'MRAS',
		versions:{


			// => Version: 0
			0:function(){
						this.AmatAppleShaderConstant =[
				'token' , 'uint32',
				'regIndex' , 'uint32',
				'regCount' , 'uint32',
						];

						this.AmatAppleShader =[
				'isPixelShader' , 'uint32',
				'cachedData', Utils.getArrayReader('uint8'),
				'physicalData', Utils.getArrayReader('uint8'),
				'constants', Utils.getArrayReader(this.AmatAppleShaderConstant),
				'samplers', Utils.getArrayReader(this.AmatAppleShaderConstant),
						];

						this.AmatAppleRenderState =[
				'cullMode' , 'uint32',
				'blendControl' , 'uint32',
				'alphaTestAndMask' , 'uint32',
				'alphaTestRef' , 'uint32',
				'colorWrite_ARGB' , 'uint32',
				'depthWriteEnable' , 'uint32',
				'depthFunction' , 'uint32',
				'depthBias' , 'float32',
						];

						this.AmatApplePass =[
				'renderState', this.AmatAppleRenderState,
				'pixelShader' , 'uint32',
				'vertexShader' , 'uint32',
				'psFileFame' , Utils.getFileNameReader(),
				'vsFileName' , Utils.getFileNameReader(),
						];

						this.AmatAppleEffect =[
				'token', Utils.getQWordReader(),
				'passes', Utils.getArrayReader(this.AmatApplePass),
						];

						this.AmatAppleSamplerState =[
				'addressU' , 'uint32',
				'addressV' , 'uint32',
				'addressW' , 'uint32',
				'borderColor' , 'uint32',
				'magFilter' , 'uint32',
				'maxAnisotropy' , 'uint32',
				'maxMipLevel' , 'uint32',
				'minFilter' , 'uint32',
				'mipFilter' , 'uint32',
				'mipMapLodBias' , 'float32',
						];

						this.__root=this.AmatAppleMaterial =[
				'name', Utils.getStringReader(),
				'shaders', Utils.getArrayReader(this.AmatAppleShader),
				'effects', Utils.getArrayReader(this.AmatAppleEffect),
				'samplers', Utils.getArrayReader(this.AmatAppleSamplerState),
						];

			},
		}
	},

	///==================================================
	/// Chunk: XSHD, versions: 1, strucTab: 0x13B5628 
	///==================================================
	{
		name:'XSHD',
		versions:{


			// => Version: 0
			0:function(){
						this.AmatXbxShaderConstant =[
				'token' , 'uint32',
				'regIndex' , 'uint32',
				'regCount' , 'uint32',
						];

						this.AmatXbxSamplerConstant =[
				'regIndex' , 'uint32',
				'stateIndex' , 'uint32',
				'texIndex' , 'uint32',
						];

						this.__root=this.AmatXbxShader =[
				'isPixelShader' , 'uint32',
				'cachedData', Utils.getArrayReader('uint8'),
				'physicalData', Utils.getArrayReader('uint8'),
				'constants', Utils.getArrayReader(this.AmatXbxShaderConstant),
				'samplers', Utils.getArrayReader(this.AmatXbxSamplerConstant),
						];

			},
		}
	},

	///==================================================
	/// Chunk: PPSH, versions: 1, strucTab: 0x13B5610 
	///==================================================
	{
		name:'PPSH',
		versions:{


			// => Version: 0
			0:function(){
						this.AmatPs3ShaderConstant =[
				'token' , 'uint32',
				'regIndex' , 'uint32',
				'regCount' , 'uint32',
				'regValue' , ['[]','float32',4],
				'data' , 'uint32',
						];

						this.AmatPs3SamplerConstant =[
				'regIndex' , 'uint32',
				'stateIndex' , 'uint32',
				'texIndex' , 'uint32',
						];

						this.__root=this.AmatPs3FragmentShaderConfig =[
				'offset' , 'uint32',
				'attributeInputMask' , 'uint32',
				'texCoordsInputMask' , 'uint32',
				'texCoords2D' , 'uint32',
				'texCoordsCentroid' , 'uint32',
				'fragmentControl' , 'uint32',
				'registerCount' , 'uint32',
				'constants', Utils.getArrayReader(this.AmatPs3ShaderConstant),
				'samplers', Utils.getArrayReader(this.AmatPs3SamplerConstant),
				'code', Utils.getArrayReader('uint8'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: PVSH, versions: 1, strucTab: 0x13B561C 
	///==================================================
	{
		name:'PVSH',
		versions:{


			// => Version: 0
			0:function(){
						this.AmatPs3ShaderConstant =[
				'token' , 'uint32',
				'regIndex' , 'uint32',
				'regCount' , 'uint32',
				'regValue' , ['[]','float32',4],
				'data' , 'uint32',
						];

						this.AmatPs3SamplerConstant =[
				'regIndex' , 'uint32',
				'stateIndex' , 'uint32',
				'texIndex' , 'uint32',
						];

						this.__root=this.AmatPs3VertexShaderConfig =[
				'instructionSlot' , 'uint32',
				'instructionCount' , 'uint32',
				'attributeInputMask' , 'uint32',
				'registerCount' , 'uint32',
				'constants', Utils.getArrayReader(this.AmatPs3ShaderConstant),
				'samplers', Utils.getArrayReader(this.AmatPs3SamplerConstant),
				'code', Utils.getArrayReader('uint8'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: SPPA, versions: 1, strucTab: 0x13B5634 
	///==================================================
	{
		name:'SPPA',
		versions:{


			// => Version: 0
			0:function(){
						this.AmatAppleShaderConstant =[
				'token' , 'uint32',
				'regIndex' , 'uint32',
				'regCount' , 'uint32',
						];

						this.__root=this.AmatAppleShader =[
				'isPixelShader' , 'uint32',
				'cachedData', Utils.getArrayReader('uint8'),
				'physicalData', Utils.getArrayReader('uint8'),
				'constants', Utils.getArrayReader(this.AmatAppleShaderConstant),
				'samplers', Utils.getArrayReader(this.AmatAppleShaderConstant),
						];

			},
		}
	},

	///==================================================
	/// Chunk: TOOL, versions: 4, strucTab: 0x13B55B0 
	///==================================================
	{
		name:'TOOL',
		versions:{


			// => Version: 3, ReferencedFunction: 0x7B10F0
			3:function(){
						this.AmatToolConstant =[
				'token' , 'uint32',
				'displayName', Utils.getString16Reader(),
				'defaultValue' , ['[]','float32',4],
				'flags' , 'uint32',
				'minValue' , ['[]','float32',4],
				'maxValue' , ['[]','float32',4],
						];

						this.AmatToolTexture =[
				'texName', Utils.getString16Reader(),
				'texDefaultFile', Utils.getString16Reader(),
				'flags' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
						];

						this.__root=this.AmatToolParams =[
				'description', Utils.getString16Reader(),
				'flags' , 'uint32',
				'texCoordCount' , 'uint8',
				'texTransformCount' , 'uint8',
				'decompressedTextCount' , 'uint32',
				'compressedText', Utils.getArrayReader('uint8'),
				'constants', Utils.getArrayReader(this.AmatToolConstant),
				'textures', Utils.getArrayReader(this.AmatToolTexture),
						];

			},

			// => Version: 2, ReferencedFunction: 0x7B1050
			2:function(){
						this.AmatToolConstant =[
				'token' , 'uint32',
				'displayName', Utils.getString16Reader(),
				'defaultValue' , ['[]','float32',4],
				'flags' , 'uint32',
				'minValue' , ['[]','float32',4],
				'maxValue' , ['[]','float32',4],
						];

						this.AmatToolTexture =[
				'texName', Utils.getString16Reader(),
				'texDefaultFile', Utils.getString16Reader(),
				'flags' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
						];

						this.__root=this.AmatToolParams =[
				'description', Utils.getString16Reader(),
				'flags' , 'uint32',
				'text', Utils.getStringReader(),
				'texCoordCount' , 'uint8',
				'texTransformCount' , 'uint8',
				'constants', Utils.getArrayReader(this.AmatToolConstant),
				'textures', Utils.getArrayReader(this.AmatToolTexture),
						];

			},

			// => Version: 1, ReferencedFunction: 0x7B0FF0
			1:function(){
						this.AmatToolConstantV1 =[
				'token' , 'uint32',
				'displayName', Utils.getString16Reader(),
				'defaultValue' , ['[]','float32',4],
				'flags' , 'uint32',
				'minValue' , ['[]','float32',4],
				'maxValue' , ['[]','float32',4],
						];

						this.AmatToolTextureV1 =[
				'texName', Utils.getString16Reader(),
				'texDefaultFile', Utils.getString16Reader(),
				'flags' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
						];

						this.__root=this.AmatToolParamsV1 =[
				'description', Utils.getString16Reader(),
				'flags' , 'uint32',
				'text', Utils.getStringReader(),
				'texCoordCount' , 'uint8',
				'texTransformCount' , 'uint8',
				'constants', Utils.getArrayReader(this.AmatToolConstantV1),
				'textures', Utils.getArrayReader(this.AmatToolTextureV1),
						];

			},

			// => Version: 0
			0:function(){
						this.AmatToolConstantV0 =[
				'token' , 'uint32',
				'displayName', Utils.getString16Reader(),
				'defaultValue' , ['[]','float32',4],
				'flags' , 'uint32',
				'minValue' , ['[]','float32',4],
				'maxValue' , ['[]','float32',4],
						];

						this.AmatToolTextureV0 =[
				'texName', Utils.getString16Reader(),
				'texDefaultFile', Utils.getString16Reader(),
				'flags' , 'uint32',
				'texGen', Utils.getArrayReader('uint32'),
				'texTransform', Utils.getArrayReader('uint32'),
						];

						this.__root=this.AmatToolParamsV0 =[
				'description', Utils.getString16Reader(),
				'flags' , 'uint32',
				'text', Utils.getStringReader(),
				'texCoordCount' , 'uint8',
				'texTransformCount' , 'uint8',
				'constants', Utils.getArrayReader(this.AmatToolConstantV0),
				'textures', Utils.getArrayReader(this.AmatToolTextureV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: UPDB, versions: 1, strucTab: 0x13B5604 
	///==================================================
	{
		name:'UPDB',
		versions:{


			// => Version: 0
			0:function(){
						this.AmatXbxUPDBentry =[
				'originalSize' , 'uint32',
				'compressedData', Utils.getArrayReader('uint8'),
				'originalName', Utils.getStringReader(),
						];

						this.__root=this.AmatXbxUPDBinfo =[
				'uPDBarray', Utils.getArrayReader(this.AmatXbxUPDBentry),
						];

			},
		}
	},

	///==================================================
	/// Chunk: UPDA, versions: 1, strucTab: 0x13B55F8 
	///==================================================
	{
		name:'UPDA',
		versions:{


			// => Version: 0
			0:function(){
						this.AmatAppleUPDBentry =[
				'originalSize' , 'uint32',
				'compressedData', Utils.getArrayReader('uint8'),
				'originalName', Utils.getStringReader(),
						];

						this.__root=this.AmatAppleUPDBinfo =[
				'uPDBarray', Utils.getArrayReader(this.AmatAppleUPDBentry),
						];

			},
		}
	},

	///==================================================
	/// Chunk: CDHS, versions: 2, strucTab: 0x13BD204 
	///==================================================
	{
		name:'CDHS',
		versions:{


			// => Version: 1, ReferencedFunction: 0x7B3180
			1:function(){
						this.PackVsGenParams =[
				'pointWindCount' , 'uint8',
				'lightPointCount' , 'uint8',
				'lightSpotCount' , 'uint8',
				'texTransCount' , 'uint8',
				'hazeMode' , 'uint8',
				'flags', 'uint16',
						];

						this.PackVertexShaderKey =[
				'vsGenParams', this.PackVsGenParams,
				'vertexFormat' , 'uint32',
				'texGenCount' , 'uint32',
				'texGen', ['[]', 'uint32', 14],
				'vsVersion' , 'uint32',
						];

						this.__root=this.PackShaderCache =[
				'data', Utils.getArrayReader(this.PackVertexShaderKey),
						];

			},

			// => Version: 0
			0:function(){
						this.PackVertexShaderKeyV0 =[
				'params' , 'uint32',
				'vertexFormat' , 'uint32',
				'texGenCount' , 'uint32',
				'texGen', ['[]', 'uint32', 14],
				'vsVersion' , 'uint32',
						];

						this.__root=this.PackShaderCacheV0 =[
				'data', Utils.getArrayReader(this.PackVertexShaderKeyV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: PGTB, versions: 4, strucTab: 0x13C7628 
	///==================================================
	{
		name:'PGTB',
		versions:{


			// => Version: 3, ReferencedFunction: 0x816360
			3:function(){
						this.PagedImageLayerDataV3 =[
				'rawDims', ['[]', 'uint32', 2],
				'strippedDims', ['[]', 'uint32', 2],
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
				'diskFormat' , 'uint32',
						];

						this.PagedImagePageDataV3 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'solidColor' , ['[]','uint8',4],
						];

						this.__root=this.PagedImageTableDataV3 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV3),
				'rawPages', Utils.getArrayReader(this.PagedImagePageDataV3),
				'strippedPages', Utils.getArrayReader(this.PagedImagePageDataV3),
				'flags' , 'uint32',
						];

			},

			// => Version: 2
			2:function(){
						this.PagedImageLayerDataV2 =[
				'dims', ['[]', 'uint32', 2],
				'rawDims', ['[]', 'uint32', 2],
				'diskFormat' , 'uint32',
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
						];

						this.PagedImagePageDataV2 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'solidColor' , ['[]','uint8',4],
						];

						this.__root=this.PagedImageTableDataV2 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV2),
				'pages', Utils.getArrayReader(this.PagedImagePageDataV2),
				'flags' , 'uint32',
						];

			},

			// => Version: 1
			1:function(){
						this.PagedImageLayerDataV1 =[
				'dims', ['[]', 'uint32', 2],
				'rawDims', ['[]', 'uint32', 2],
				'diskFormat' , 'uint32',
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
						];

						this.PagedImagePageDataV1 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'solidColor' , ['[]','uint8',4],
						];

						this.__root=this.PagedImageTableDataV1 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV1),
				'pages', Utils.getArrayReader(this.PagedImagePageDataV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PagedImageLayerDataV0 =[
				'dims', ['[]', 'uint32', 2],
				'rawDims', ['[]', 'uint32', 2],
				'diskFormat' , 'uint32',
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
						];

						this.PagedImagePageDataV0 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
						];

						this.__root=this.PagedImageTableDataV0 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV0),
				'pages', Utils.getArrayReader(this.PagedImagePageDataV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: DATA, versions: 4, strucTab: 0x13C7658 
	///==================================================
	{
		name:'DATA',
		versions:{


			// => Version: 3, ReferencedFunction: 0x816500
			3:function(){
						this.PagedImageLayerDataV3 =[
				'rawDims', ['[]', 'uint32', 2],
				'strippedDims', ['[]', 'uint32', 2],
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
				'diskFormat' , 'uint32',
						];

						this.PagedImagePageDataV3 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'solidColor' , ['[]','uint8',4],
						];

						this.__root=this.PagedImageTableDataV3 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV3),
				'rawPages', Utils.getArrayReader(this.PagedImagePageDataV3),
				'strippedPages', Utils.getArrayReader(this.PagedImagePageDataV3),
				'flags' , 'uint32',
						];

			},

			// => Version: 2
			2:function(){
						this.PagedImageLayerDataV2 =[
				'dims', ['[]', 'uint32', 2],
				'rawDims', ['[]', 'uint32', 2],
				'diskFormat' , 'uint32',
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
						];

						this.PagedImagePageDataV2 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'solidColor' , ['[]','uint8',4],
						];

						this.__root=this.PagedImageTableDataV2 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV2),
				'pages', Utils.getArrayReader(this.PagedImagePageDataV2),
				'flags' , 'uint32',
						];

			},

			// => Version: 1
			1:function(){
						this.PagedImageLayerDataV1 =[
				'dims', ['[]', 'uint32', 2],
				'rawDims', ['[]', 'uint32', 2],
				'diskFormat' , 'uint32',
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
						];

						this.PagedImagePageDataV1 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'solidColor' , ['[]','uint8',4],
						];

						this.__root=this.PagedImageTableDataV1 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV1),
				'pages', Utils.getArrayReader(this.PagedImagePageDataV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PagedImageEmbeddedPageDataV0 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'rawData', Utils.getArrayReader('uint8'),
				'compressedData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PagedImageEmbeddedPagesDataV0 =[
				'pages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: txtm, versions: 1, strucTab: 0x13F0884 
	///==================================================
	{
		name:'txtm',
		versions:{


			// => Version: 0
			0:function(){
						this.TextPackLanguage =[
				'filenames', Utils.getArrayReader(Utils.getFileNameReader()),
						];

						this.__root=this.TextPackManifest =[
				'stringsPerFile' , 'uint32',
				'languages', Utils.getArrayReader(this.TextPackLanguage),
						];

			},
		}
	},

	///==================================================
	/// Chunk: txtp, versions: 1, strucTab: 0x13F089C 
	///==================================================
	{
		name:'txtp',
		versions:{


			// => Version: 0
			0:function(){
						this.TextPackPassword =[
				'textId' , 'uint32',
				'password', Utils.getQWordReader(),
						];

						this.__root=this.TextPackPasswords =[
				'stringCount' , 'uint32',
				'passwords', Utils.getArrayReader(this.TextPackPassword),
						];

			},
		}
	},

	///==================================================
	/// Chunk: txtv, versions: 1, strucTab: 0x13F08B4 
	///==================================================
	{
		name:'txtv',
		versions:{


			// => Version: 0
			0:function(){
						this.TextPackVoice =[
				'textId' , 'uint32',
				'voiceId' , 'uint32',
						];

						this.__root=this.TextPackVoices =[
				'voices', Utils.getArrayReader(this.TextPackVoice),
						];

			},
		}
	},

	///==================================================
	/// Chunk: vari, versions: 1, strucTab: 0x13F08CC 
	///==================================================
	{
		name:'vari',
		versions:{


			// => Version: 0
			0:function(){
						this.TextPackVariant =[
				'textId' , 'uint32',
				'variantTextIds', Utils.getArrayReader('uint32'),
						];

						this.__root=this.TextPackVariants =[
				'variants', Utils.getArrayReader(this.TextPackVariant),
						];

			},
		}
	},

	///==================================================
	/// Chunk: AMSP, versions: 30, strucTab: 0x1526520 
	///==================================================
	{
		name:'AMSP',
		versions:{


			// => Version: 29
			29:function(){
						this.DspDataV29 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV29 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV29),
						];

						this.BussDataV29 =[
				'name', Utils.getQWordReader(),
				'output', Utils.getQWordReader(),
				'flags' , 'uint32',
				'normalizeFadeTime' , 'float32',
				'normalizeThreshold' , 'float32',
				'normalizeMaxAmp' , 'float32',
				'compressorThreshold' , 'float32',
				'compressorAttack' , 'float32',
				'compressorRelease' , 'float32',
				'compressorGainMakeup' , 'float32',
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV29),
						];

						this.EnvelopePointDataV29 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV29 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV29),
				'offsetType' , 'uint8',
						];

						this.RangeDataV29 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV29 =[
				'time', this.RangeDataV29,
				'value', this.RangeDataV29,
						];

						this.DynamicParamDataV29 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV29),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV29),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV29 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV29,
				'highPass', this.DynamicParamDataV29,
				'pan3D', this.DynamicParamDataV29,
				'reverb', this.DynamicParamDataV29,
				'spread3D', this.DynamicParamDataV29,
				'volumeA', this.DynamicParamDataV29,
				'volumeB', this.DynamicParamDataV29,
				'lfe', this.DynamicParamDataV29,
						];

						this.CategoryDynamicDataV29 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'highPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
				'minAudible' , 'uint32',
				'maxAudibleLQ' , 'uint32',
				'maxAudibleHG' , 'uint32',
						];

						this.CategoryDataV29 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV29),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV29),
				'focusReserve' , 'float32',
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
				'priority' , 'uint8',
						];

						this.MaterialDataV29 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'absorptionLF' , 'float32',
				'absorptionMF' , 'float32',
				'absorptionHF' , 'float32',
				'occlusion' , 'float32',
						];

						this.MusicConditionDataV29 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV29 =[
				'condition', Utils.getQWordReader(),
				'language', Utils.getQWordReader(),
				'volume' , 'float32',
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
				'noteBase' , 'uint8',
				'noteMin' , 'uint8',
				'noteMax' , 'uint8',
						];

						this.MusicPlaylistDataV29 =[
				'category', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'primaryPlaylistId', Utils.getQWordReader(),
				'secondaryPlaylistId', Utils.getQWordReader(),
				'fileName', Utils.getArrayReader(this.FileNameDataV29),
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'flags' , 'uint32',
				'initialSilence', this.RangeDataV29,
				'intervalSilence', this.RangeDataV29,
				'maxPlayLength', this.RangeDataV29,
				'volume', this.DynamicParamDataV29,
				'fileIterateMode' , 'uint8',
						];

						this.PropertyDataV29 =[
				'name', Utils.getQWordReader(),
				'tokenValue', Utils.getQWordReader(),
				'floatValue' , 'float32',
						];

						this.ReverbDataV29 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.ScriptRefDataV29 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.SnapshotDataV29 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV29),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV29),
				'priority' , 'uint8',
						];

						this.MusicExternalDataV29 =[
				'name', Utils.getQWordReader(),
				'externalPlaylist', Utils.getString16Reader(),
						];

						this.AudioSettingsDataV29 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'echoLevel' , 'float32',
				'focusTransition' , 'float32',
				'memoryPool' , 'float32',
				'reverbLevel' , 'float32',
				'minChannelsLQ' , 'uint32',
				'maxChannelsLQ' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDataV29),
				'category', Utils.getArrayReader(this.CategoryDataV29),
				'material', Utils.getArrayReader(this.MaterialDataV29),
				'musicCondition', Utils.getArrayReader(this.MusicConditionDataV29),
				'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV29),
				'property', Utils.getArrayReader(this.PropertyDataV29),
				'reverb', Utils.getArrayReader(this.ReverbDataV29),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV29),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV29),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
				'musicExternal', Utils.getArrayReader(this.MusicExternalDataV29),
						];

						this.HandlerDataV29 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.MetaSoundDataV29 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV29),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV29),
				'fileName', Utils.getArrayReader(this.FileNameDataV29),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV29,
				'pan', this.DynamicParamDataV29,
				'pitch', this.DynamicParamDataV29,
				'pitchMS', this.DynamicParamDataV29,
				'volume', this.DynamicParamDataV29,
				'volumeMS', this.DynamicParamDataV29,
				'initialDelay', this.RangeDataV29,
				'playLength', this.RangeDataV29,
				'positionOffsetAngle', this.RangeDataV29,
				'positionRange', this.RangeDataV29,
				'repeatCount', this.RangeDataV29,
				'repeatTime', this.RangeDataV29,
				'replayDelay', this.RangeDataV29,
				'startTimeOffset', this.RangeDataV29,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.TriggerMarkerDataV29 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV29 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV29),
						];

						this.__root=this.ScriptFileDataV29 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV29),
				'handler', Utils.getArrayReader(this.HandlerDataV29),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV29),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV29),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV29),
				'property', Utils.getArrayReader(this.PropertyDataV29),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
				'musicMutePriority' , 'uint8',
				'soundPoolMode' , 'uint8',
						];

			},

			// => Version: 28
			28:function(){
						this.DspDataV28 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV28 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV28),
						];

						this.BussDataV28 =[
				'name', Utils.getQWordReader(),
				'output', Utils.getQWordReader(),
				'flags' , 'uint32',
				'normalizeFadeTime' , 'float32',
				'normalizeThreshold' , 'float32',
				'normalizeMaxAmp' , 'float32',
				'compressorThreshold' , 'float32',
				'compressorAttack' , 'float32',
				'compressorRelease' , 'float32',
				'compressorGainMakeup' , 'float32',
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV28),
						];

						this.EnvelopePointDataV28 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV28 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV28),
				'offsetType' , 'uint8',
						];

						this.RangeDataV28 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV28 =[
				'time', this.RangeDataV28,
				'value', this.RangeDataV28,
						];

						this.DynamicParamDataV28 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV28),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV28),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV28 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV28,
				'highPass', this.DynamicParamDataV28,
				'pan3D', this.DynamicParamDataV28,
				'reverb', this.DynamicParamDataV28,
				'spread3D', this.DynamicParamDataV28,
				'volumeA', this.DynamicParamDataV28,
				'volumeB', this.DynamicParamDataV28,
				'lfe', this.DynamicParamDataV28,
						];

						this.CategoryDynamicDataV28 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'highPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
				'minAudible' , 'uint32',
				'maxAudibleLQ' , 'uint32',
				'maxAudibleHG' , 'uint32',
						];

						this.CategoryDataV28 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV28),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV28),
				'focusReserve' , 'float32',
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
				'priority' , 'uint8',
						];

						this.MaterialDataV28 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'absorptionLF' , 'float32',
				'absorptionMF' , 'float32',
				'absorptionHF' , 'float32',
				'occlusion' , 'float32',
						];

						this.MusicConditionDataV28 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV28 =[
				'condition', Utils.getQWordReader(),
				'language', Utils.getQWordReader(),
				'volume' , 'float32',
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
				'noteBase' , 'uint8',
				'noteMin' , 'uint8',
				'noteMax' , 'uint8',
						];

						this.MusicPlaylistDataV28 =[
				'category', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'primaryPlaylistId', Utils.getQWordReader(),
				'secondaryPlaylistId', Utils.getQWordReader(),
				'fileName', Utils.getArrayReader(this.FileNameDataV28),
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'flags' , 'uint32',
				'initialSilence', this.RangeDataV28,
				'intervalSilence', this.RangeDataV28,
				'maxPlayLength', this.RangeDataV28,
				'volume', this.DynamicParamDataV28,
				'fileIterateMode' , 'uint8',
						];

						this.PropertyDataV28 =[
				'name', Utils.getQWordReader(),
				'tokenValue', Utils.getQWordReader(),
				'floatValue' , 'float32',
						];

						this.ReverbDataV28 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.ScriptRefDataV28 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.SnapshotDataV28 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV28),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV28),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV28 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'echoLevel' , 'float32',
				'focusTransition' , 'float32',
				'memoryPool' , 'float32',
				'reverbLevel' , 'float32',
				'minChannelsLQ' , 'uint32',
				'maxChannelsLQ' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDataV28),
				'category', Utils.getArrayReader(this.CategoryDataV28),
				'material', Utils.getArrayReader(this.MaterialDataV28),
				'musicCondition', Utils.getArrayReader(this.MusicConditionDataV28),
				'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV28),
				'property', Utils.getArrayReader(this.PropertyDataV28),
				'reverb', Utils.getArrayReader(this.ReverbDataV28),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV28),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV28),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV28 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.MetaSoundDataV28 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV28),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV28),
				'fileName', Utils.getArrayReader(this.FileNameDataV28),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV28,
				'pan', this.DynamicParamDataV28,
				'pitch', this.DynamicParamDataV28,
				'pitchMS', this.DynamicParamDataV28,
				'volume', this.DynamicParamDataV28,
				'volumeMS', this.DynamicParamDataV28,
				'initialDelay', this.RangeDataV28,
				'playLength', this.RangeDataV28,
				'positionOffsetAngle', this.RangeDataV28,
				'positionRange', this.RangeDataV28,
				'repeatCount', this.RangeDataV28,
				'repeatTime', this.RangeDataV28,
				'replayDelay', this.RangeDataV28,
				'startTimeOffset', this.RangeDataV28,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.TriggerMarkerDataV28 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV28 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV28),
						];

						this.__root=this.ScriptFileDataV28 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV28),
				'handler', Utils.getArrayReader(this.HandlerDataV28),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV28),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV28),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV28),
				'property', Utils.getArrayReader(this.PropertyDataV28),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
				'musicMutePriority' , 'uint8',
				'soundPoolMode' , 'uint8',
						];

			},

			// => Version: 27
			27:function(){
						this.DspDataV27 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV27 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV27),
						];

						this.BussDataV27 =[
				'name', Utils.getQWordReader(),
				'output', Utils.getQWordReader(),
				'flags' , 'uint32',
				'normalizeFadeTime' , 'float32',
				'normalizeThreshold' , 'float32',
				'normalizeMaxAmp' , 'float32',
				'compressorThreshold' , 'float32',
				'compressorAttack' , 'float32',
				'compressorRelease' , 'float32',
				'compressorGainMakeup' , 'float32',
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV27),
						];

						this.EnvelopePointDataV27 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV27 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV27),
				'offsetType' , 'uint8',
						];

						this.RangeDataV27 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV27 =[
				'time', this.RangeDataV27,
				'value', this.RangeDataV27,
						];

						this.DynamicParamDataV27 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV27),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV27),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV27 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV27,
				'highPass', this.DynamicParamDataV27,
				'pan3D', this.DynamicParamDataV27,
				'reverb', this.DynamicParamDataV27,
				'spread3D', this.DynamicParamDataV27,
				'volumeA', this.DynamicParamDataV27,
				'volumeB', this.DynamicParamDataV27,
				'lfe', this.DynamicParamDataV27,
						];

						this.CategoryDynamicDataV27 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'highPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
				'minAudible' , 'uint32',
				'maxAudibleLQ' , 'uint32',
				'maxAudibleHG' , 'uint32',
						];

						this.CategoryDataV27 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV27),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV27),
				'focusReserve' , 'float32',
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
				'priority' , 'uint8',
						];

						this.MaterialDataV27 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'absorptionLF' , 'float32',
				'absorptionMF' , 'float32',
				'absorptionHF' , 'float32',
				'occlusion' , 'float32',
						];

						this.MusicConditionDataV27 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV27 =[
				'condition', Utils.getQWordReader(),
				'language', Utils.getQWordReader(),
				'volume' , 'float32',
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
				'noteBase' , 'uint8',
				'noteMin' , 'uint8',
				'noteMax' , 'uint8',
						];

						this.MusicPlaylistDataV27 =[
				'category', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'primaryPlaylistId', Utils.getQWordReader(),
				'secondaryPlaylistId', Utils.getQWordReader(),
				'fileName', Utils.getArrayReader(this.FileNameDataV27),
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'flags' , 'uint32',
				'initialSilence', this.RangeDataV27,
				'intervalSilence', this.RangeDataV27,
				'maxPlayLength', this.RangeDataV27,
				'volume', this.DynamicParamDataV27,
				'fileIterateMode' , 'uint8',
						];

						this.PropertyDataV27 =[
				'name', Utils.getQWordReader(),
				'tokenValue', Utils.getQWordReader(),
				'floatValue' , 'float32',
						];

						this.ReverbDataV27 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.ScriptRefDataV27 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.SnapshotDataV27 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV27),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV27),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV27 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'echoLevel' , 'float32',
				'focusTransition' , 'float32',
				'memoryPool' , 'float32',
				'reverbLevel' , 'float32',
				'minChannelsLQ' , 'uint32',
				'maxChannelsLQ' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDataV27),
				'category', Utils.getArrayReader(this.CategoryDataV27),
				'material', Utils.getArrayReader(this.MaterialDataV27),
				'musicCondition', Utils.getArrayReader(this.MusicConditionDataV27),
				'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV27),
				'property', Utils.getArrayReader(this.PropertyDataV27),
				'reverb', Utils.getArrayReader(this.ReverbDataV27),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV27),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV27),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV27 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.MetaSoundDataV27 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV27),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV27),
				'fileName', Utils.getArrayReader(this.FileNameDataV27),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV27,
				'pan', this.DynamicParamDataV27,
				'pitch', this.DynamicParamDataV27,
				'pitchMS', this.DynamicParamDataV27,
				'volume', this.DynamicParamDataV27,
				'volumeMS', this.DynamicParamDataV27,
				'initialDelay', this.RangeDataV27,
				'playLength', this.RangeDataV27,
				'positionOffsetAngle', this.RangeDataV27,
				'positionRange', this.RangeDataV27,
				'repeatCount', this.RangeDataV27,
				'repeatTime', this.RangeDataV27,
				'startTimeOffset', this.RangeDataV27,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.TriggerMarkerDataV27 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV27 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV27),
						];

						this.__root=this.ScriptFileDataV27 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV27),
				'handler', Utils.getArrayReader(this.HandlerDataV27),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV27),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV27),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV27),
				'property', Utils.getArrayReader(this.PropertyDataV27),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
				'musicMutePriority' , 'uint8',
						];

			},

			// => Version: 26
			26:function(){
						this.DspDataV26 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV26 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV26),
						];

						this.BussDataV26 =[
				'name', Utils.getQWordReader(),
				'output', Utils.getQWordReader(),
				'flags' , 'uint32',
				'normalizeFadeTime' , 'float32',
				'normalizeThreshold' , 'float32',
				'normalizeMaxAmp' , 'float32',
				'compressorThreshold' , 'float32',
				'compressorAttack' , 'float32',
				'compressorRelease' , 'float32',
				'compressorGainMakeup' , 'float32',
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV26),
						];

						this.EnvelopePointDataV26 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV26 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV26),
				'offsetType' , 'uint8',
						];

						this.RangeDataV26 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV26 =[
				'time', this.RangeDataV26,
				'value', this.RangeDataV26,
						];

						this.DynamicParamDataV26 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV26),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV26),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV26 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV26,
				'highPass', this.DynamicParamDataV26,
				'pan3D', this.DynamicParamDataV26,
				'reverb', this.DynamicParamDataV26,
				'spread3D', this.DynamicParamDataV26,
				'volumeA', this.DynamicParamDataV26,
				'volumeB', this.DynamicParamDataV26,
				'lfe', this.DynamicParamDataV26,
						];

						this.CategoryDynamicDataV26 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'highPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
				'minAudible' , 'uint32',
				'maxAudibleLQ' , 'uint32',
				'maxAudibleHG' , 'uint32',
						];

						this.CategoryDataV26 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV26),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV26),
				'focusReserve' , 'float32',
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
				'priority' , 'uint8',
						];

						this.MaterialDataV26 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'absorptionLF' , 'float32',
				'absorptionMF' , 'float32',
				'absorptionHF' , 'float32',
				'occlusion' , 'float32',
						];

						this.MusicConditionDataV26 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV26 =[
				'condition', Utils.getQWordReader(),
				'language', Utils.getQWordReader(),
				'volume' , 'float32',
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
				'noteBase' , 'uint8',
				'noteMin' , 'uint8',
				'noteMax' , 'uint8',
						];

						this.MusicPlaylistDataV26 =[
				'category', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'primaryPlaylistId', Utils.getQWordReader(),
				'secondaryPlaylistId', Utils.getQWordReader(),
				'fileName', Utils.getArrayReader(this.FileNameDataV26),
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'flags' , 'uint32',
				'initialSilence', this.RangeDataV26,
				'intervalSilence', this.RangeDataV26,
				'maxPlayLength', this.RangeDataV26,
				'volume', this.DynamicParamDataV26,
				'fileIterateMode' , 'uint8',
						];

						this.ReverbDataV26 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV26 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV26),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV26),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV26 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'memoryPool' , 'float32',
				'reverbLevel' , 'float32',
				'minChannelsLQ' , 'uint32',
				'maxChannelsLQ' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDataV26),
				'category', Utils.getArrayReader(this.CategoryDataV26),
				'material', Utils.getArrayReader(this.MaterialDataV26),
				'musicCondition', Utils.getArrayReader(this.MusicConditionDataV26),
				'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV26),
				'reverb', Utils.getArrayReader(this.ReverbDataV26),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV26),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV26 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.MetaSoundDataV26 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV26),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV26),
				'fileName', Utils.getArrayReader(this.FileNameDataV26),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV26,
				'pan', this.DynamicParamDataV26,
				'pitch', this.DynamicParamDataV26,
				'pitchMS', this.DynamicParamDataV26,
				'volume', this.DynamicParamDataV26,
				'volumeMS', this.DynamicParamDataV26,
				'initialDelay', this.RangeDataV26,
				'playLength', this.RangeDataV26,
				'positionOffsetAngle', this.RangeDataV26,
				'positionRange', this.RangeDataV26,
				'repeatCount', this.RangeDataV26,
				'repeatTime', this.RangeDataV26,
				'startTimeOffset', this.RangeDataV26,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV26 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV26 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV26 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV26),
						];

						this.__root=this.ScriptFileDataV26 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV26),
				'handler', Utils.getArrayReader(this.HandlerDataV26),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV26),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV26),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV26),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
				'musicMutePriority' , 'uint8',
						];

			},

			// => Version: 25
			25:function(){
						this.DspDataV25 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV25 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV25),
						];

						this.BussDataV25 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV25),
						];

						this.EnvelopePointDataV25 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV25 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV25),
				'offsetType' , 'uint8',
						];

						this.RangeDataV25 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV25 =[
				'time', this.RangeDataV25,
				'value', this.RangeDataV25,
						];

						this.DynamicParamDataV25 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV25),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV25),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV25 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV25,
				'highPass', this.DynamicParamDataV25,
				'pan3D', this.DynamicParamDataV25,
				'reverb', this.DynamicParamDataV25,
				'spread3D', this.DynamicParamDataV25,
				'volumeA', this.DynamicParamDataV25,
				'volumeB', this.DynamicParamDataV25,
						];

						this.CategoryDynamicDataV25 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'highPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV25 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV25),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV25),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.MaterialDataV25 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'absorptionLF' , 'float32',
				'absorptionMF' , 'float32',
				'absorptionHF' , 'float32',
				'occlusion' , 'float32',
						];

						this.MusicConditionDataV25 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV25 =[
				'condition', Utils.getQWordReader(),
				'language', Utils.getQWordReader(),
				'volume' , 'float32',
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
				'noteBase' , 'uint8',
				'noteMin' , 'uint8',
				'noteMax' , 'uint8',
						];

						this.MusicPlaylistDataV25 =[
				'category', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'primaryPlaylistId', Utils.getQWordReader(),
				'secondaryPlaylistId', Utils.getQWordReader(),
				'fileName', Utils.getArrayReader(this.FileNameDataV25),
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'flags' , 'uint32',
				'initialSilence', this.RangeDataV25,
				'intervalSilence', this.RangeDataV25,
				'maxPlayLength', this.RangeDataV25,
				'volume', this.DynamicParamDataV25,
				'fileIterateMode' , 'uint8',
						];

						this.ReverbDataV25 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV25 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV25),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV25),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV25 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV25),
				'category', Utils.getArrayReader(this.CategoryDataV25),
				'material', Utils.getArrayReader(this.MaterialDataV25),
				'musicCondition', Utils.getArrayReader(this.MusicConditionDataV25),
				'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV25),
				'reverb', Utils.getArrayReader(this.ReverbDataV25),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV25),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV25 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.MetaSoundDataV25 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV25),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV25),
				'fileName', Utils.getArrayReader(this.FileNameDataV25),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV25,
				'pan', this.DynamicParamDataV25,
				'pitch', this.DynamicParamDataV25,
				'pitchMS', this.DynamicParamDataV25,
				'volume', this.DynamicParamDataV25,
				'volumeMS', this.DynamicParamDataV25,
				'initialDelay', this.RangeDataV25,
				'playLength', this.RangeDataV25,
				'positionOffsetAngle', this.RangeDataV25,
				'positionRange', this.RangeDataV25,
				'repeatCount', this.RangeDataV25,
				'repeatTime', this.RangeDataV25,
				'startTimeOffset', this.RangeDataV25,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV25 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV25 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV25 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV25),
						];

						this.__root=this.ScriptFileDataV25 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV25),
				'handler', Utils.getArrayReader(this.HandlerDataV25),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV25),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV25),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV25),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
				'musicMutePriority' , 'uint8',
						];

			},

			// => Version: 24
			24:function(){
						this.DspDataV24 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV24 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV24),
						];

						this.BussDataV24 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV24),
						];

						this.EnvelopePointDataV24 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV24 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV24),
				'offsetType' , 'uint8',
						];

						this.RangeDataV24 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV24 =[
				'time', this.RangeDataV24,
				'value', this.RangeDataV24,
						];

						this.DynamicParamDataV24 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV24),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV24),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV24 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV24,
				'highPass', this.DynamicParamDataV24,
				'pan3D', this.DynamicParamDataV24,
				'reverb', this.DynamicParamDataV24,
				'spread3D', this.DynamicParamDataV24,
				'volumeA', this.DynamicParamDataV24,
				'volumeB', this.DynamicParamDataV24,
						];

						this.CategoryDynamicDataV24 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'highPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV24 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV24),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV24),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.MusicConditionDataV24 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV24 =[
				'condition', Utils.getQWordReader(),
				'language', Utils.getQWordReader(),
				'volume' , 'float32',
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
				'noteBase' , 'uint8',
				'noteMin' , 'uint8',
				'noteMax' , 'uint8',
						];

						this.MusicPlaylistDataV24 =[
				'category', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'primaryPlaylistId', Utils.getQWordReader(),
				'secondaryPlaylistId', Utils.getQWordReader(),
				'fileName', Utils.getArrayReader(this.FileNameDataV24),
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'flags' , 'uint32',
				'initialSilence', this.RangeDataV24,
				'intervalSilence', this.RangeDataV24,
				'maxPlayLength', this.RangeDataV24,
				'volume', this.DynamicParamDataV24,
				'fileIterateMode' , 'uint8',
						];

						this.ReverbDataV24 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV24 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV24),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV24),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV24 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV24),
				'category', Utils.getArrayReader(this.CategoryDataV24),
				'musicCondition', Utils.getArrayReader(this.MusicConditionDataV24),
				'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV24),
				'reverb', Utils.getArrayReader(this.ReverbDataV24),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV24),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV24 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.MetaSoundDataV24 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV24),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV24),
				'fileName', Utils.getArrayReader(this.FileNameDataV24),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV24,
				'pan', this.DynamicParamDataV24,
				'pitch', this.DynamicParamDataV24,
				'pitchMS', this.DynamicParamDataV24,
				'volume', this.DynamicParamDataV24,
				'volumeMS', this.DynamicParamDataV24,
				'initialDelay', this.RangeDataV24,
				'playLength', this.RangeDataV24,
				'positionOffsetAngle', this.RangeDataV24,
				'positionRange', this.RangeDataV24,
				'repeatCount', this.RangeDataV24,
				'repeatTime', this.RangeDataV24,
				'startTimeOffset', this.RangeDataV24,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV24 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV24 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV24 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV24),
						];

						this.__root=this.ScriptFileDataV24 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV24),
				'handler', Utils.getArrayReader(this.HandlerDataV24),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV24),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV24),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV24),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
				'musicMutePriority' , 'uint8',
						];

			},

			// => Version: 23
			23:function(){
						this.DspDataV23 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV23 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV23),
						];

						this.BussDataV23 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV23),
						];

						this.EnvelopePointDataV23 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV23 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV23),
				'offsetType' , 'uint8',
						];

						this.RangeDataV23 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV23 =[
				'time', this.RangeDataV23,
				'value', this.RangeDataV23,
						];

						this.DynamicParamDataV23 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV23),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV23),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV23 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV23,
				'highPass', this.DynamicParamDataV23,
				'pan3D', this.DynamicParamDataV23,
				'reverb', this.DynamicParamDataV23,
				'spread3D', this.DynamicParamDataV23,
				'volumeA', this.DynamicParamDataV23,
				'volumeB', this.DynamicParamDataV23,
						];

						this.CategoryDynamicDataV23 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'highPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV23 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV23),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV23),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.MusicConditionDataV23 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV23 =[
				'condition', Utils.getQWordReader(),
				'language', Utils.getQWordReader(),
				'volume' , 'float32',
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MusicPlaylistDataV23 =[
				'category', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'primaryPlaylistId', Utils.getQWordReader(),
				'secondaryPlaylistId', Utils.getQWordReader(),
				'fileName', Utils.getArrayReader(this.FileNameDataV23),
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'flags' , 'uint32',
				'initialSilence', this.RangeDataV23,
				'intervalSilence', this.RangeDataV23,
				'maxPlayLength', this.RangeDataV23,
				'volume', this.DynamicParamDataV23,
				'fileIterateMode' , 'uint8',
						];

						this.ReverbDataV23 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV23 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV23),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV23),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV23 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV23),
				'category', Utils.getArrayReader(this.CategoryDataV23),
				'musicCondition', Utils.getArrayReader(this.MusicConditionDataV23),
				'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV23),
				'reverb', Utils.getArrayReader(this.ReverbDataV23),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV23),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV23 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.MetaSoundDataV23 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV23),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV23),
				'fileName', Utils.getArrayReader(this.FileNameDataV23),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV23,
				'pan', this.DynamicParamDataV23,
				'pitch', this.DynamicParamDataV23,
				'pitchMS', this.DynamicParamDataV23,
				'volume', this.DynamicParamDataV23,
				'volumeMS', this.DynamicParamDataV23,
				'initialDelay', this.RangeDataV23,
				'playLength', this.RangeDataV23,
				'positionOffsetAngle', this.RangeDataV23,
				'positionRange', this.RangeDataV23,
				'repeatCount', this.RangeDataV23,
				'repeatTime', this.RangeDataV23,
				'startTimeOffset', this.RangeDataV23,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV23 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV23 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV23 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV23),
						];

						this.__root=this.ScriptFileDataV23 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV23),
				'handler', Utils.getArrayReader(this.HandlerDataV23),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV23),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV23),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV23),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
				'musicMutePriority' , 'uint8',
						];

			},

			// => Version: 22
			22:function(){
						this.DspDataV22 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV22 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV22),
						];

						this.BussDataV22 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV22),
						];

						this.EnvelopePointDataV22 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV22 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV22),
				'offsetType' , 'uint8',
						];

						this.RangeDataV22 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV22 =[
				'time', this.RangeDataV22,
				'value', this.RangeDataV22,
						];

						this.DynamicParamDataV22 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV22),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV22),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV22 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV22,
				'highPass', this.DynamicParamDataV22,
				'pan3D', this.DynamicParamDataV22,
				'reverb', this.DynamicParamDataV22,
				'spread3D', this.DynamicParamDataV22,
				'volumeA', this.DynamicParamDataV22,
				'volumeB', this.DynamicParamDataV22,
						];

						this.CategoryDynamicDataV22 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'highPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV22 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV22),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV22),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.MusicConditionDataV22 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV22 =[
				'condition', Utils.getQWordReader(),
				'language', Utils.getQWordReader(),
				'volume' , 'float32',
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MusicPlaylistDataV22 =[
				'category', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'primaryPlaylistId', Utils.getQWordReader(),
				'secondaryPlaylistId', Utils.getQWordReader(),
				'fileName', Utils.getArrayReader(this.FileNameDataV22),
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'flags' , 'uint32',
				'initialSilence', this.RangeDataV22,
				'intervalSilence', this.RangeDataV22,
				'maxPlayLength', this.RangeDataV22,
				'volume', this.DynamicParamDataV22,
				'fileIterateMode' , 'uint8',
						];

						this.ReverbDataV22 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV22 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV22),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV22),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV22 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV22),
				'category', Utils.getArrayReader(this.CategoryDataV22),
				'musicCondition', Utils.getArrayReader(this.MusicConditionDataV22),
				'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV22),
				'reverb', Utils.getArrayReader(this.ReverbDataV22),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV22),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV22 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.MetaSoundDataV22 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV22),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV22),
				'fileName', Utils.getArrayReader(this.FileNameDataV22),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV22,
				'pan', this.DynamicParamDataV22,
				'pitch', this.DynamicParamDataV22,
				'pitchMS', this.DynamicParamDataV22,
				'volume', this.DynamicParamDataV22,
				'volumeMS', this.DynamicParamDataV22,
				'initialDelay', this.RangeDataV22,
				'playLength', this.RangeDataV22,
				'positionOffsetAngle', this.RangeDataV22,
				'positionRange', this.RangeDataV22,
				'repeatCount', this.RangeDataV22,
				'repeatTime', this.RangeDataV22,
				'startTimeOffset', this.RangeDataV22,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV22 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV22 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV22 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV22),
						];

						this.__root=this.ScriptFileDataV22 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV22),
				'handler', Utils.getArrayReader(this.HandlerDataV22),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV22),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV22),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV22),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 21
			21:function(){
						this.DspDataV21 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV21 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV21),
						];

						this.BussDataV21 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV21),
						];

						this.EnvelopePointDataV21 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV21 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV21),
				'offsetType' , 'uint8',
						];

						this.RangeDataV21 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV21 =[
				'time', this.RangeDataV21,
				'value', this.RangeDataV21,
						];

						this.DynamicParamDataV21 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV21),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV21),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV21 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV21,
				'pan3D', this.DynamicParamDataV21,
				'reverb', this.DynamicParamDataV21,
				'spread3D', this.DynamicParamDataV21,
				'volumeA', this.DynamicParamDataV21,
				'volumeB', this.DynamicParamDataV21,
						];

						this.CategoryDynamicDataV21 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV21 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV21),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV21),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.MusicConditionDataV21 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV21 =[
				'condition', Utils.getQWordReader(),
				'language', Utils.getQWordReader(),
				'volume' , 'float32',
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MusicPlaylistDataV21 =[
				'category', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'primaryPlaylistId', Utils.getQWordReader(),
				'secondaryPlaylistId', Utils.getQWordReader(),
				'fileName', Utils.getArrayReader(this.FileNameDataV21),
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'flags' , 'uint32',
				'initialSilence', this.RangeDataV21,
				'intervalSilence', this.RangeDataV21,
				'maxPlayLength', this.RangeDataV21,
				'volume', this.DynamicParamDataV21,
				'fileIterateMode' , 'uint8',
						];

						this.ReverbDataV21 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV21 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV21),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV21),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV21 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV21),
				'category', Utils.getArrayReader(this.CategoryDataV21),
				'musicCondition', Utils.getArrayReader(this.MusicConditionDataV21),
				'musicPlaylist', Utils.getArrayReader(this.MusicPlaylistDataV21),
				'reverb', Utils.getArrayReader(this.ReverbDataV21),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV21),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV21 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.MetaSoundDataV21 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV21),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV21),
				'fileName', Utils.getArrayReader(this.FileNameDataV21),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV21,
				'pan', this.DynamicParamDataV21,
				'pitch', this.DynamicParamDataV21,
				'pitchMS', this.DynamicParamDataV21,
				'volume', this.DynamicParamDataV21,
				'volumeMS', this.DynamicParamDataV21,
				'initialDelay', this.RangeDataV21,
				'playLength', this.RangeDataV21,
				'positionOffsetAngle', this.RangeDataV21,
				'positionRange', this.RangeDataV21,
				'repeatCount', this.RangeDataV21,
				'repeatTime', this.RangeDataV21,
				'startTimeOffset', this.RangeDataV21,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV21 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV21 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV21 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV21),
						];

						this.__root=this.ScriptFileDataV21 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV21),
				'handler', Utils.getArrayReader(this.HandlerDataV21),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV21),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV21),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV21),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 20
			20:function(){
						this.DspDataV20 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV20 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV20),
						];

						this.BussDataV20 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV20),
						];

						this.EnvelopePointDataV20 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV20 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV20),
				'offsetType' , 'uint8',
						];

						this.RangeDataV20 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV20 =[
				'time', this.RangeDataV20,
				'value', this.RangeDataV20,
						];

						this.DynamicParamDataV20 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV20),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV20),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV20 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV20,
				'pan3D', this.DynamicParamDataV20,
				'reverb', this.DynamicParamDataV20,
				'spread3D', this.DynamicParamDataV20,
				'volumeA', this.DynamicParamDataV20,
				'volumeB', this.DynamicParamDataV20,
						];

						this.CategoryDynamicDataV20 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV20 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV20),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV20),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV20 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV20 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV20),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV20),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV20 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV20),
				'category', Utils.getArrayReader(this.CategoryDataV20),
				'reverb', Utils.getArrayReader(this.ReverbDataV20),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV20),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV20 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV20 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV20 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV20),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV20),
				'fileName', Utils.getArrayReader(this.FileNameDataV20),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV20,
				'pan', this.DynamicParamDataV20,
				'pitch', this.DynamicParamDataV20,
				'pitchMS', this.DynamicParamDataV20,
				'volume', this.DynamicParamDataV20,
				'volumeMS', this.DynamicParamDataV20,
				'initialDelay', this.RangeDataV20,
				'playLength', this.RangeDataV20,
				'positionOffsetAngle', this.RangeDataV20,
				'positionRange', this.RangeDataV20,
				'repeatCount', this.RangeDataV20,
				'repeatTime', this.RangeDataV20,
				'startTimeOffset', this.RangeDataV20,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV20 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV20 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV20 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV20),
						];

						this.__root=this.ScriptFileDataV20 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'snapshot', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV20),
				'handler', Utils.getArrayReader(this.HandlerDataV20),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV20),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV20),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV20),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 19, ReferencedFunction: 0xF5DB40
			19:function(){
						this.DspDataV19 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV19 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV19),
						];

						this.BussDataV19 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV19),
						];

						this.EnvelopePointDataV19 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV19 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV19),
				'offsetType' , 'uint8',
						];

						this.RangeDataV19 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV19 =[
				'time', this.RangeDataV19,
				'value', this.RangeDataV19,
						];

						this.DynamicParamDataV19 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV19),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV19),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV19 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV19,
				'pan3D', this.DynamicParamDataV19,
				'reverb', this.DynamicParamDataV19,
				'spread3D', this.DynamicParamDataV19,
				'volumeA', this.DynamicParamDataV19,
				'volumeB', this.DynamicParamDataV19,
						];

						this.CategoryDynamicDataV19 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV19 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV19),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV19),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV19 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV19 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV19),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV19),
				'priority' , 'uint8',
						];

						this.AudioSettingsDataV19 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV19),
				'category', Utils.getArrayReader(this.CategoryDataV19),
				'reverb', Utils.getArrayReader(this.ReverbDataV19),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV19),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV19 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV19 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV19 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV19),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV19),
				'fileName', Utils.getArrayReader(this.FileNameDataV19),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV19,
				'pan', this.DynamicParamDataV19,
				'pitch', this.DynamicParamDataV19,
				'pitchMS', this.DynamicParamDataV19,
				'volume', this.DynamicParamDataV19,
				'volumeMS', this.DynamicParamDataV19,
				'initialDelay', this.RangeDataV19,
				'playLength', this.RangeDataV19,
				'positionOffsetAngle', this.RangeDataV19,
				'positionRange', this.RangeDataV19,
				'repeatCount', this.RangeDataV19,
				'repeatTime', this.RangeDataV19,
				'startTimeOffset', this.RangeDataV19,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV19 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV19 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV19 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV19),
						];

						this.__root=this.ScriptFileDataV19 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV19),
				'handler', Utils.getArrayReader(this.HandlerDataV19),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV19),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV19),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV19),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 18, ReferencedFunction: 0xF5DA00
			18:function(){
						this.DspDataV18 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV18 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV18),
						];

						this.BussDataV18 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV18),
						];

						this.EnvelopePointDataV18 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV18 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV18),
				'offsetType' , 'uint8',
						];

						this.RangeDataV18 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV18 =[
				'time', this.RangeDataV18,
				'value', this.RangeDataV18,
						];

						this.DynamicParamDataV18 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV18),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV18),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV18 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV18,
				'pan3D', this.DynamicParamDataV18,
				'reverb', this.DynamicParamDataV18,
				'spread3D', this.DynamicParamDataV18,
				'volumeA', this.DynamicParamDataV18,
				'volumeB', this.DynamicParamDataV18,
						];

						this.CategoryDynamicDataV18 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV18 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV18),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV18),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV18 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV18 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV18),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV18),
						];

						this.AudioSettingsDataV18 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV18),
				'category', Utils.getArrayReader(this.CategoryDataV18),
				'reverb', Utils.getArrayReader(this.ReverbDataV18),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV18),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV18 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV18 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV18 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV18),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV18),
				'fileName', Utils.getArrayReader(this.FileNameDataV18),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV18,
				'pan', this.DynamicParamDataV18,
				'pitch', this.DynamicParamDataV18,
				'pitchMS', this.DynamicParamDataV18,
				'volume', this.DynamicParamDataV18,
				'volumeMS', this.DynamicParamDataV18,
				'initialDelay', this.RangeDataV18,
				'playLength', this.RangeDataV18,
				'positionOffsetAngle', this.RangeDataV18,
				'positionRange', this.RangeDataV18,
				'repeatCount', this.RangeDataV18,
				'repeatTime', this.RangeDataV18,
				'startTimeOffset', this.RangeDataV18,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV18 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV18 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV18 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV18),
						];

						this.__root=this.ScriptFileDataV18 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV18),
				'handler', Utils.getArrayReader(this.HandlerDataV18),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV18),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV18),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV18),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 17
			17:function(){
						this.DspDataV17 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV17 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV17),
						];

						this.BussDataV17 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV17),
						];

						this.EnvelopePointDataV17 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV17 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV17),
				'offsetType' , 'uint8',
						];

						this.RangeDataV17 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV17 =[
				'time', this.RangeDataV17,
				'value', this.RangeDataV17,
						];

						this.DynamicParamDataV17 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV17),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV17),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV17 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV17,
				'pan3D', this.DynamicParamDataV17,
				'reverb', this.DynamicParamDataV17,
				'spread3D', this.DynamicParamDataV17,
				'volumeA', this.DynamicParamDataV17,
				'volumeB', this.DynamicParamDataV17,
						];

						this.CategoryDynamicDataV17 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV17 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV17),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV17),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV17 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV17 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV17),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV17),
						];

						this.AudioSettingsDataV17 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV17),
				'category', Utils.getArrayReader(this.CategoryDataV17),
				'reverb', Utils.getArrayReader(this.ReverbDataV17),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV17),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV17 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV17 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV17 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV17),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV17),
				'fileName', Utils.getArrayReader(this.FileNameDataV17),
				'channelFadeIn' , 'float32',
				'channelFadeOut' , 'float32',
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'channelMax' , 'uint32',
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV17,
				'pan', this.DynamicParamDataV17,
				'pitch', this.DynamicParamDataV17,
				'pitchMS', this.DynamicParamDataV17,
				'volume', this.DynamicParamDataV17,
				'volumeMS', this.DynamicParamDataV17,
				'initialDelay', this.RangeDataV17,
				'playLength', this.RangeDataV17,
				'positionOffsetAngle', this.RangeDataV17,
				'positionRange', this.RangeDataV17,
				'repeatCount', this.RangeDataV17,
				'repeatTime', this.RangeDataV17,
				'startTimeOffset', this.RangeDataV17,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV17 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV17 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV17 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV17),
						];

						this.__root=this.ScriptFileDataV17 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV17),
				'handler', Utils.getArrayReader(this.HandlerDataV17),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV17),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV17),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV17),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 16
			16:function(){
						this.DspDataV16 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV16 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV16),
						];

						this.BussDataV16 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV16),
						];

						this.EnvelopePointDataV16 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV16 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV16),
				'offsetType' , 'uint8',
						];

						this.RangeDataV16 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV16 =[
				'time', this.RangeDataV16,
				'value', this.RangeDataV16,
						];

						this.DynamicParamDataV16 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV16),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV16),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV16 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV16,
				'pan3D', this.DynamicParamDataV16,
				'reverb', this.DynamicParamDataV16,
				'spread3D', this.DynamicParamDataV16,
				'volumeA', this.DynamicParamDataV16,
				'volumeB', this.DynamicParamDataV16,
						];

						this.CategoryDynamicDataV16 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV16 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV16),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV16),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV16 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
				'echoDelay' , 'float32',
				'echoDecayRatio' , 'float32',
				'echoWetMix' , 'float32',
				'echoDryMix' , 'float32',
						];

						this.SnapshotDataV16 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV16),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV16),
						];

						this.AudioSettingsDataV16 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV16),
				'category', Utils.getArrayReader(this.CategoryDataV16),
				'reverb', Utils.getArrayReader(this.ReverbDataV16),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV16),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV16 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV16 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV16 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV16),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV16),
				'fileName', Utils.getArrayReader(this.FileNameDataV16),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV16,
				'pan', this.DynamicParamDataV16,
				'pitch', this.DynamicParamDataV16,
				'pitchMS', this.DynamicParamDataV16,
				'volume', this.DynamicParamDataV16,
				'volumeMS', this.DynamicParamDataV16,
				'initialDelay', this.RangeDataV16,
				'playLength', this.RangeDataV16,
				'positionOffsetAngle', this.RangeDataV16,
				'positionRange', this.RangeDataV16,
				'repeatCount', this.RangeDataV16,
				'repeatTime', this.RangeDataV16,
				'startTimeOffset', this.RangeDataV16,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV16 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV16 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV16 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV16),
						];

						this.__root=this.ScriptFileDataV16 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV16),
				'handler', Utils.getArrayReader(this.HandlerDataV16),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV16),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV16),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV16),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 15
			15:function(){
						this.DspDataV15 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV15 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV15),
						];

						this.BussDataV15 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV15),
						];

						this.EnvelopePointDataV15 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV15 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV15),
				'offsetType' , 'uint8',
						];

						this.RangeDataV15 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV15 =[
				'time', this.RangeDataV15,
				'value', this.RangeDataV15,
						];

						this.DynamicParamDataV15 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV15),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV15),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV15 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV15,
				'pan3D', this.DynamicParamDataV15,
				'reverb', this.DynamicParamDataV15,
				'spread3D', this.DynamicParamDataV15,
				'volumeA', this.DynamicParamDataV15,
				'volumeB', this.DynamicParamDataV15,
						];

						this.CategoryDynamicDataV15 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV15 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV15),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV15),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV15 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
						];

						this.SnapshotDataV15 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV15),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV15),
						];

						this.AudioSettingsDataV15 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV15),
				'category', Utils.getArrayReader(this.CategoryDataV15),
				'reverb', Utils.getArrayReader(this.ReverbDataV15),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV15),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV15 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV15 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV15 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV15),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV15),
				'fileName', Utils.getArrayReader(this.FileNameDataV15),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV15,
				'pan', this.DynamicParamDataV15,
				'pitch', this.DynamicParamDataV15,
				'pitchMS', this.DynamicParamDataV15,
				'volume', this.DynamicParamDataV15,
				'volumeMS', this.DynamicParamDataV15,
				'initialDelay', this.RangeDataV15,
				'playLength', this.RangeDataV15,
				'positionOffsetAngle', this.RangeDataV15,
				'positionRange', this.RangeDataV15,
				'repeatCount', this.RangeDataV15,
				'repeatTime', this.RangeDataV15,
				'startTimeOffset', this.RangeDataV15,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV15 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV15 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV15 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV15),
						];

						this.__root=this.ScriptFileDataV15 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV15),
				'handler', Utils.getArrayReader(this.HandlerDataV15),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV15),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV15),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV15),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 14
			14:function(){
						this.DspDataV14 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV14 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV14),
						];

						this.BussDataV14 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV14),
						];

						this.EnvelopePointDataV14 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV14 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV14),
				'offsetType' , 'uint8',
						];

						this.RangeDataV14 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV14 =[
				'time', this.RangeDataV14,
				'value', this.RangeDataV14,
						];

						this.DynamicParamDataV14 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV14),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV14),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV14 =[
				'doppler' , 'float32',
				'lowPass', this.DynamicParamDataV14,
				'pan3D', this.DynamicParamDataV14,
				'spread3D', this.DynamicParamDataV14,
				'volumeA', this.DynamicParamDataV14,
				'volumeB', this.DynamicParamDataV14,
						];

						this.CategoryDynamicDataV14 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV14 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV14),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV14),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV14 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
						];

						this.SnapshotDataV14 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV14),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV14),
						];

						this.AudioSettingsDataV14 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'dopplerScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV14),
				'category', Utils.getArrayReader(this.CategoryDataV14),
				'reverb', Utils.getArrayReader(this.ReverbDataV14),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV14),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV14 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV14 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV14 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV14),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV14),
				'fileName', Utils.getArrayReader(this.FileNameDataV14),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV14,
				'pan', this.DynamicParamDataV14,
				'pitch', this.DynamicParamDataV14,
				'pitchMS', this.DynamicParamDataV14,
				'volume', this.DynamicParamDataV14,
				'volumeMS', this.DynamicParamDataV14,
				'initialDelay', this.RangeDataV14,
				'playLength', this.RangeDataV14,
				'positionOffsetAngle', this.RangeDataV14,
				'positionRange', this.RangeDataV14,
				'repeatCount', this.RangeDataV14,
				'repeatTime', this.RangeDataV14,
				'startTimeOffset', this.RangeDataV14,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV14 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV14 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV14 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV14),
						];

						this.__root=this.ScriptFileDataV14 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV14),
				'handler', Utils.getArrayReader(this.HandlerDataV14),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV14),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV14),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV14),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 13
			13:function(){
						this.DspDataV13 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV13 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV13),
						];

						this.BussDataV13 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV13),
						];

						this.EnvelopePointDataV13 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV13 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV13),
				'offsetType' , 'uint8',
						];

						this.RangeDataV13 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV13 =[
				'time', this.RangeDataV13,
				'value', this.RangeDataV13,
						];

						this.DynamicParamDataV13 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV13),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV13),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV13 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV13,
				'pan3D', this.DynamicParamDataV13,
				'spread3D', this.DynamicParamDataV13,
				'volumeA', this.DynamicParamDataV13,
				'volumeB', this.DynamicParamDataV13,
						];

						this.CategoryDynamicDataV13 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV13 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV13),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV13),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV13 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
						];

						this.SnapshotDataV13 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV13),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV13),
						];

						this.AudioSettingsDataV13 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV13),
				'category', Utils.getArrayReader(this.CategoryDataV13),
				'reverb', Utils.getArrayReader(this.ReverbDataV13),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV13),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV13 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV13 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV13 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV13),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV13),
				'fileName', Utils.getArrayReader(this.FileNameDataV13),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV13,
				'pan', this.DynamicParamDataV13,
				'pitch', this.DynamicParamDataV13,
				'pitchMS', this.DynamicParamDataV13,
				'volume', this.DynamicParamDataV13,
				'volumeMS', this.DynamicParamDataV13,
				'initialDelay', this.RangeDataV13,
				'playLength', this.RangeDataV13,
				'positionOffsetAngle', this.RangeDataV13,
				'positionRange', this.RangeDataV13,
				'repeatCount', this.RangeDataV13,
				'repeatTime', this.RangeDataV13,
				'startTimeOffset', this.RangeDataV13,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV13 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV13 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV13 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV13),
						];

						this.__root=this.ScriptFileDataV13 =[
				'musicCue', Utils.getQWordReader(),
				'reverbOverride', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV13),
				'handler', Utils.getArrayReader(this.HandlerDataV13),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV13),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV13),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV13),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 12, ReferencedFunction: 0xF5D9E0
			12:function(){
						this.DspDataV12 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV12 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV12),
						];

						this.BussDataV12 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV12),
						];

						this.EnvelopePointDataV12 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV12 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV12),
				'offsetType' , 'uint8',
						];

						this.RangeDataV12 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV12 =[
				'time', this.RangeDataV12,
				'value', this.RangeDataV12,
						];

						this.DynamicParamDataV12 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV12),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV12),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV12 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV12,
				'pan3D', this.DynamicParamDataV12,
				'spread3D', this.DynamicParamDataV12,
				'volumeA', this.DynamicParamDataV12,
				'volumeB', this.DynamicParamDataV12,
						];

						this.CategoryDynamicDataV12 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV12 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV12),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV12),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV12 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
						];

						this.SnapshotDataV12 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV12),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV12),
						];

						this.AudioSettingsDataV12 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV12),
				'category', Utils.getArrayReader(this.CategoryDataV12),
				'reverb', Utils.getArrayReader(this.ReverbDataV12),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV12),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV12 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV12 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV12 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV12),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV12),
				'fileName', Utils.getArrayReader(this.FileNameDataV12),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV12,
				'pan', this.DynamicParamDataV12,
				'pitch', this.DynamicParamDataV12,
				'pitchMS', this.DynamicParamDataV12,
				'volume', this.DynamicParamDataV12,
				'volumeMS', this.DynamicParamDataV12,
				'initialDelay', this.RangeDataV12,
				'playLength', this.RangeDataV12,
				'positionOffsetAngle', this.RangeDataV12,
				'positionRange', this.RangeDataV12,
				'repeatCount', this.RangeDataV12,
				'repeatTime', this.RangeDataV12,
				'startTimeOffset', this.RangeDataV12,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV12 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV12 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV12 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV12),
						];

						this.__root=this.ScriptFileDataV12 =[
				'musicCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV12),
				'handler', Utils.getArrayReader(this.HandlerDataV12),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV12),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV12),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV12),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
				'musicCuePriority' , 'uint8',
						];

			},

			// => Version: 11
			11:function(){
						this.DspDataV11 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV11 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV11),
						];

						this.BussDataV11 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV11),
						];

						this.EnvelopePointDataV11 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV11 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV11),
				'offsetType' , 'uint8',
						];

						this.RangeDataV11 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV11 =[
				'time', this.RangeDataV11,
				'value', this.RangeDataV11,
						];

						this.DynamicParamDataV11 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV11),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV11),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV11 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV11,
				'pan3D', this.DynamicParamDataV11,
				'spread3D', this.DynamicParamDataV11,
				'volumeA', this.DynamicParamDataV11,
				'volumeB', this.DynamicParamDataV11,
						];

						this.CategoryDynamicDataV11 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV11 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV11),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV11),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV11 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
						];

						this.SnapshotDataV11 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV11),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV11),
						];

						this.AudioSettingsDataV11 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV11),
				'category', Utils.getArrayReader(this.CategoryDataV11),
				'reverb', Utils.getArrayReader(this.ReverbDataV11),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV11),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
				'musicScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV11 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV11 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV11 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV11),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV11),
				'fileName', Utils.getArrayReader(this.FileNameDataV11),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV11,
				'pan', this.DynamicParamDataV11,
				'pitch', this.DynamicParamDataV11,
				'pitchMS', this.DynamicParamDataV11,
				'volume', this.DynamicParamDataV11,
				'volumeMS', this.DynamicParamDataV11,
				'initialDelay', this.RangeDataV11,
				'playLength', this.RangeDataV11,
				'positionOffsetAngle', this.RangeDataV11,
				'positionRange', this.RangeDataV11,
				'repeatCount', this.RangeDataV11,
				'repeatTime', this.RangeDataV11,
				'startTimeOffset', this.RangeDataV11,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV11 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV11 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV11 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV11),
						];

						this.__root=this.ScriptFileDataV11 =[
				'musicCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV11),
				'handler', Utils.getArrayReader(this.HandlerDataV11),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV11),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV11),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV11),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 10
			10:function(){
						this.DspDataV10 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV10 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV10),
						];

						this.BussDataV10 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV10),
						];

						this.EnvelopePointDataV10 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV10 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV10),
				'offsetType' , 'uint8',
						];

						this.RangeDataV10 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV10 =[
				'time', this.RangeDataV10,
				'value', this.RangeDataV10,
						];

						this.DynamicParamDataV10 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV10),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV10),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV10 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV10,
				'pan3D', this.DynamicParamDataV10,
				'spread3D', this.DynamicParamDataV10,
				'volumeA', this.DynamicParamDataV10,
				'volumeB', this.DynamicParamDataV10,
						];

						this.CategoryDynamicDataV10 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV10 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV10),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV10),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV10 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
						];

						this.SnapshotDataV10 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV10),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV10),
						];

						this.AudioSettingsDataV10 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV10),
				'category', Utils.getArrayReader(this.CategoryDataV10),
				'reverb', Utils.getArrayReader(this.ReverbDataV10),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV10),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV10 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV10 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV10 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV10),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV10),
				'fileName', Utils.getArrayReader(this.FileNameDataV10),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV10,
				'pan', this.DynamicParamDataV10,
				'pitch', this.DynamicParamDataV10,
				'pitchMS', this.DynamicParamDataV10,
				'volume', this.DynamicParamDataV10,
				'volumeMS', this.DynamicParamDataV10,
				'initialDelay', this.RangeDataV10,
				'playLength', this.RangeDataV10,
				'positionOffsetAngle', this.RangeDataV10,
				'positionRange', this.RangeDataV10,
				'repeatCount', this.RangeDataV10,
				'repeatTime', this.RangeDataV10,
				'startTimeOffset', this.RangeDataV10,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV10 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV10 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV10 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV10),
						];

						this.__root=this.ScriptFileDataV10 =[
				'musicCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV10),
				'handler', Utils.getArrayReader(this.HandlerDataV10),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV10),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV10),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV10),
				'flags' , 'uint32',
				'soundPoolCount' , 'uint32',
				'fadeInTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 9
			9:function(){
						this.DspDataV9 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV9 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV9),
						];

						this.BussDataV9 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV9),
						];

						this.EnvelopePointDataV9 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV9 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV9),
				'offsetType' , 'uint8',
						];

						this.RangeDataV9 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV9 =[
				'time', this.RangeDataV9,
				'value', this.RangeDataV9,
						];

						this.DynamicParamDataV9 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV9),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV9),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV9 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV9,
				'pan3D', this.DynamicParamDataV9,
				'spread3D', this.DynamicParamDataV9,
				'volumeA', this.DynamicParamDataV9,
				'volumeB', this.DynamicParamDataV9,
						];

						this.CategoryDynamicDataV9 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV9 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'soundPoolCategory', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV9),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV9),
				'muteFadeTime' , 'float32',
				'soundPoolDelay' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'soundPoolCount' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
				'soundPoolCountBehavior' , 'uint8',
				'soundPoolMode' , 'uint8',
						];

						this.ReverbDataV9 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
						];

						this.SnapshotDataV9 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV9),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV9),
						];

						this.AudioSettingsDataV9 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV9),
				'category', Utils.getArrayReader(this.CategoryDataV9),
				'reverb', Utils.getArrayReader(this.ReverbDataV9),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV9),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV9 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV9 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV9 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV9),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV9),
				'fileName', Utils.getArrayReader(this.FileNameDataV9),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV9,
				'pan', this.DynamicParamDataV9,
				'pitch', this.DynamicParamDataV9,
				'pitchMS', this.DynamicParamDataV9,
				'volume', this.DynamicParamDataV9,
				'volumeMS', this.DynamicParamDataV9,
				'initialDelay', this.RangeDataV9,
				'playLength', this.RangeDataV9,
				'positionOffsetAngle', this.RangeDataV9,
				'positionRange', this.RangeDataV9,
				'repeatCount', this.RangeDataV9,
				'repeatTime', this.RangeDataV9,
				'startTimeOffset', this.RangeDataV9,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV9 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV9 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV9 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV9),
						];

						this.__root=this.ScriptFileDataV9 =[
				'musicCue', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV9),
				'handler', Utils.getArrayReader(this.HandlerDataV9),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV9),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV9),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV9),
				'flags' , 'uint32',
				'fadeInTime' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 8
			8:function(){
						this.DspDataV8 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV8 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV8),
						];

						this.BussDataV8 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV8),
						];

						this.EnvelopePointDataV8 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV8 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV8),
				'offsetType' , 'uint8',
						];

						this.RangeDataV8 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV8 =[
				'time', this.RangeDataV8,
				'value', this.RangeDataV8,
						];

						this.DynamicParamDataV8 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV8),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV8),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV8 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV8,
				'pan3D', this.DynamicParamDataV8,
				'spread3D', this.DynamicParamDataV8,
				'volumeA', this.DynamicParamDataV8,
				'volumeB', this.DynamicParamDataV8,
						];

						this.CategoryDynamicDataV8 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'reverbDirect' , 'float32',
				'reverbRoom' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV8 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV8),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV8),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.ReverbDataV8 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'room' , 'float32',
				'roomHF' , 'float32',
				'roomLF' , 'float32',
				'decayTime' , 'float32',
				'decayHFRatio' , 'float32',
				'reflections' , 'float32',
				'reflectionsDelay' , 'float32',
				'reverb' , 'float32',
				'reverbDelay' , 'float32',
				'referenceHF' , 'float32',
				'referenceLF' , 'float32',
				'diffusion' , 'float32',
				'density' , 'float32',
						];

						this.SnapshotDataV8 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV8),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV8),
						];

						this.AudioSettingsDataV8 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV8),
				'category', Utils.getArrayReader(this.CategoryDataV8),
				'reverb', Utils.getArrayReader(this.ReverbDataV8),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV8),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV8 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV8 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV8 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV8),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV8),
				'fileName', Utils.getArrayReader(this.FileNameDataV8),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV8,
				'pan', this.DynamicParamDataV8,
				'pitch', this.DynamicParamDataV8,
				'pitchMS', this.DynamicParamDataV8,
				'volume', this.DynamicParamDataV8,
				'volumeMS', this.DynamicParamDataV8,
				'initialDelay', this.RangeDataV8,
				'playLength', this.RangeDataV8,
				'positionOffsetAngle', this.RangeDataV8,
				'positionRange', this.RangeDataV8,
				'repeatCount', this.RangeDataV8,
				'repeatTime', this.RangeDataV8,
				'startTimeOffset', this.RangeDataV8,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'musicPriority' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV8 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV8 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV8 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV8),
						];

						this.__root=this.ScriptFileDataV8 =[
				'musicCue', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV8),
				'handler', Utils.getArrayReader(this.HandlerDataV8),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV8),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV8),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV8),
				'flags' , 'uint32',
				'fadeInTime' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 7, ReferencedFunction: 0xF5D970
			7:function(){
						this.DspDataV7 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV7 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV7),
						];

						this.BussDataV7 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV7),
						];

						this.EnvelopePointDataV7 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV7 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV7),
				'offsetType' , 'uint8',
						];

						this.RangeDataV7 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV7 =[
				'time', this.RangeDataV7,
				'value', this.RangeDataV7,
						];

						this.DynamicParamDataV7 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV7),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV7),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV7 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV7,
				'pan3D', this.DynamicParamDataV7,
				'spread3D', this.DynamicParamDataV7,
				'volumeA', this.DynamicParamDataV7,
				'volumeB', this.DynamicParamDataV7,
						];

						this.CategoryDynamicDataV7 =[
				'name', Utils.getQWordReader(),
				'volume' , 'float32',
				'nonFocusGain' , 'float32',
				'lowPass' , 'float32',
				'flags' , 'uint32',
						];

						this.CategoryDataV7 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV7),
				'dynamicData', Utils.getPointerReader(this.CategoryDynamicDataV7),
				'muteFadeTime' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.SnapshotDataV7 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV7),
				'category', Utils.getArrayReader(this.CategoryDynamicDataV7),
						];

						this.AudioSettingsDataV7 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'focusTransition' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV7),
				'category', Utils.getArrayReader(this.CategoryDataV7),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV7),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV7 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV7 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV7 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'offsetBone', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV7),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV7),
				'fileName', Utils.getArrayReader(this.FileNameDataV7),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV7,
				'pan', this.DynamicParamDataV7,
				'pitch', this.DynamicParamDataV7,
				'pitchMS', this.DynamicParamDataV7,
				'volume', this.DynamicParamDataV7,
				'volumeMS', this.DynamicParamDataV7,
				'initialDelay', this.RangeDataV7,
				'playLength', this.RangeDataV7,
				'positionOffsetAngle', this.RangeDataV7,
				'positionRange', this.RangeDataV7,
				'repeatCount', this.RangeDataV7,
				'repeatTime', this.RangeDataV7,
				'startTimeOffset', this.RangeDataV7,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV7 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV7 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV7 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV7),
						];

						this.__root=this.ScriptFileDataV7 =[
				'musicCue', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV7),
				'handler', Utils.getArrayReader(this.HandlerDataV7),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV7),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV7),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV7),
				'flags' , 'uint32',
				'fadeInTime' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 6
			6:function(){
						this.DspDataV6 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDynamicDataV6 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
				'dsp', Utils.getArrayReader(this.DspDataV6),
						];

						this.BussDataV6 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'output', Utils.getQWordReader(),
				'dynamicData', Utils.getPointerReader(this.BussDynamicDataV6),
						];

						this.EnvelopePointDataV6 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV6 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV6),
				'offsetType' , 'uint8',
						];

						this.RangeDataV6 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV6 =[
				'time', this.RangeDataV6,
				'value', this.RangeDataV6,
						];

						this.DynamicParamDataV6 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV6),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV6),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV6 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV6,
				'pan3D', this.DynamicParamDataV6,
				'spread3D', this.DynamicParamDataV6,
				'volumeA', this.DynamicParamDataV6,
						];

						this.CategoryDataV6 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'outputBussName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV6),
				'muteFadeTime' , 'float32',
				'volumeA' , 'float32',
				'volumeAThreshold' , 'float32',
				'volumeB' , 'float32',
				'volumeBThreshold' , 'float32',
				'volumeChangeRate' , 'float32',
				'volumeDucking' , 'float32',
				'volumeDuckingTimeAttack' , 'float32',
				'volumeDuckingTimeRelease' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.SnapshotDataV6 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDynamicDataV6),
						];

						this.AudioSettingsDataV6 =[
				'defaultSnapshot', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'buss', Utils.getArrayReader(this.BussDataV6),
				'category', Utils.getArrayReader(this.CategoryDataV6),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV6),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV6 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV6 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV6 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV6),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV6),
				'fileName', Utils.getArrayReader(this.FileNameDataV6),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV6,
				'pan', this.DynamicParamDataV6,
				'pitch', this.DynamicParamDataV6,
				'pitchMS', this.DynamicParamDataV6,
				'volume', this.DynamicParamDataV6,
				'volumeMS', this.DynamicParamDataV6,
				'initialDelay', this.RangeDataV6,
				'playLength', this.RangeDataV6,
				'positionOffsetAngle', this.RangeDataV6,
				'positionRange', this.RangeDataV6,
				'repeatCount', this.RangeDataV6,
				'repeatTime', this.RangeDataV6,
				'startTimeOffset', this.RangeDataV6,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV6 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV6 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV6 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV6),
						];

						this.__root=this.ScriptFileDataV6 =[
				'musicCue', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV6),
				'handler', Utils.getArrayReader(this.HandlerDataV6),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV6),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV6),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV6),
				'flags' , 'uint32',
				'fadeInTime' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 5
			5:function(){
						this.EnvelopePointDataV5 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV5 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV5),
				'offsetType' , 'uint8',
						];

						this.RangeDataV5 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV5 =[
				'time', this.RangeDataV5,
				'value', this.RangeDataV5,
						];

						this.DynamicParamDataV5 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV5),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV5),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV5 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV5,
				'pan3D', this.DynamicParamDataV5,
				'spread3D', this.DynamicParamDataV5,
				'volumeA', this.DynamicParamDataV5,
						];

						this.CategoryDataV5 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV5),
				'muteFadeTime' , 'float32',
				'volumeA' , 'float32',
				'volumeAThreshold' , 'float32',
				'volumeB' , 'float32',
				'volumeBThreshold' , 'float32',
				'volumeChangeRate' , 'float32',
				'volumeDucking' , 'float32',
				'volumeDuckingTimeAttack' , 'float32',
				'volumeDuckingTimeRelease' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.DspDataV5 =[
				'type' , 'uint32',
				'flags' , 'uint32',
				'property', Utils.getArrayReader('float32'),
						];

						this.BussDataV5 =[
				'name', Utils.getQWordReader(),
				'output', Utils.getQWordReader(),
				'flags' , 'uint32',
				'dsp', Utils.getArrayReader(this.DspDataV5),
				'volume' , 'float32',
						];

						this.SnapshotDataV5 =[
				'name', Utils.getQWordReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'flags' , 'uint32',
				'buss', Utils.getArrayReader(this.BussDataV5),
						];

						this.AudioSettingsDataV5 =[
				'defaultBuss', Utils.getQWordReader(),
				'effectsBuss', Utils.getQWordReader(),
				'distanceScale' , 'float32',
				'category', Utils.getArrayReader(this.CategoryDataV5),
				'snapshot', Utils.getArrayReader(this.SnapshotDataV5),
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV5 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.FileNameDataV5 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV5 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV5),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV5),
				'fileName', Utils.getArrayReader(this.FileNameDataV5),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV5,
				'pan', this.DynamicParamDataV5,
				'pitch', this.DynamicParamDataV5,
				'pitchMS', this.DynamicParamDataV5,
				'volume', this.DynamicParamDataV5,
				'volumeMS', this.DynamicParamDataV5,
				'initialDelay', this.RangeDataV5,
				'playLength', this.RangeDataV5,
				'positionOffsetAngle', this.RangeDataV5,
				'positionRange', this.RangeDataV5,
				'repeatCount', this.RangeDataV5,
				'repeatTime', this.RangeDataV5,
				'startTimeOffset', this.RangeDataV5,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV5 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV5 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV5 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV5),
						];

						this.__root=this.ScriptFileDataV5 =[
				'musicCue', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV5),
				'handler', Utils.getArrayReader(this.HandlerDataV5),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV5),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV5),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV5),
				'flags' , 'uint32',
				'fadeInTime' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 4
			4:function(){
						this.VolumeGroupDataV4 =[
				'name', Utils.getQWordReader(),
				'parentName', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
						];

						this.EnvelopePointDataV4 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV4 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV4),
				'offsetType' , 'uint8',
						];

						this.RangeDataV4 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV4 =[
				'time', this.RangeDataV4,
				'value', this.RangeDataV4,
						];

						this.DynamicParamDataV4 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV4),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV4),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV4 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV4,
				'pan3D', this.DynamicParamDataV4,
				'spread3D', this.DynamicParamDataV4,
				'volumeA', this.DynamicParamDataV4,
						];

						this.CategoryDataV4 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV4),
				'muteFadeTime' , 'float32',
				'volumeA' , 'float32',
				'volumeAThreshold' , 'float32',
				'volumeB' , 'float32',
				'volumeBThreshold' , 'float32',
				'volumeChangeRate' , 'float32',
				'volumeDucking' , 'float32',
				'volumeDuckingTimeAttack' , 'float32',
				'volumeDuckingTimeRelease' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.AudioSettingsDataV4 =[
				'volumeGroup', Utils.getArrayReader(this.VolumeGroupDataV4),
				'category', Utils.getArrayReader(this.CategoryDataV4),
				'distanceScale' , 'float32',
				'bankIndexFileName' , Utils.getFileNameReader(),
				'bankScriptFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV4 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.DspDataV4 =[
				'param', Utils.getArrayReader(this.DynamicParamDataV4),
				'type' , 'uint8',
						];

						this.FileNameDataV4 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV4 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV4),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV4),
				'fileName', Utils.getArrayReader(this.FileNameDataV4),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV4,
				'pan', this.DynamicParamDataV4,
				'pitch', this.DynamicParamDataV4,
				'pitchMS', this.DynamicParamDataV4,
				'volume', this.DynamicParamDataV4,
				'volumeMS', this.DynamicParamDataV4,
				'initialDelay', this.RangeDataV4,
				'playLength', this.RangeDataV4,
				'positionOffsetAngle', this.RangeDataV4,
				'positionRange', this.RangeDataV4,
				'repeatCount', this.RangeDataV4,
				'repeatTime', this.RangeDataV4,
				'startTimeOffset', this.RangeDataV4,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV4 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV4 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV4 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV4),
						];

						this.__root=this.ScriptFileDataV4 =[
				'musicCue', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV4),
				'handler', Utils.getArrayReader(this.HandlerDataV4),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV4),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV4),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV4),
				'flags' , 'uint32',
				'fadeInTime' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 3
			3:function(){
						this.VolumeGroupDataV3 =[
				'name', Utils.getQWordReader(),
				'parentName', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
						];

						this.EnvelopePointDataV3 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV3 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV3),
				'offsetType' , 'uint8',
						];

						this.RangeDataV3 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV3 =[
				'time', this.RangeDataV3,
				'value', this.RangeDataV3,
						];

						this.DynamicParamDataV3 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV3),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV3),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV3 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV3,
				'pan3D', this.DynamicParamDataV3,
				'spread3D', this.DynamicParamDataV3,
				'volumeA', this.DynamicParamDataV3,
						];

						this.CategoryDataV3 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV3),
				'muteFadeTime' , 'float32',
				'volumeA' , 'float32',
				'volumeAThreshold' , 'float32',
				'volumeB' , 'float32',
				'volumeBThreshold' , 'float32',
				'volumeChangeRate' , 'float32',
				'volumeDucking' , 'float32',
				'volumeDuckingTimeAttack' , 'float32',
				'volumeDuckingTimeRelease' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.AudioSettingsDataV3 =[
				'volumeGroup', Utils.getArrayReader(this.VolumeGroupDataV3),
				'category', Utils.getArrayReader(this.CategoryDataV3),
				'distanceScale' , 'float32',
				'voiceBankFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV3 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.DspDataV3 =[
				'param', Utils.getArrayReader(this.DynamicParamDataV3),
				'type' , 'uint8',
						];

						this.FileNameDataV3 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV3 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV3),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV3),
				'fileName', Utils.getArrayReader(this.FileNameDataV3),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV3,
				'pan', this.DynamicParamDataV3,
				'pitch', this.DynamicParamDataV3,
				'pitchMS', this.DynamicParamDataV3,
				'volume', this.DynamicParamDataV3,
				'volumeMS', this.DynamicParamDataV3,
				'initialDelay', this.RangeDataV3,
				'playLength', this.RangeDataV3,
				'positionOffsetAngle', this.RangeDataV3,
				'positionRange', this.RangeDataV3,
				'repeatCount', this.RangeDataV3,
				'repeatTime', this.RangeDataV3,
				'startTimeOffset', this.RangeDataV3,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV3 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV3 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV3 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV3),
						];

						this.__root=this.ScriptFileDataV3 =[
				'musicCue', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV3),
				'handler', Utils.getArrayReader(this.HandlerDataV3),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV3),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV3),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV3),
				'flags' , 'uint32',
				'fadeInTime' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 2
			2:function(){
						this.VolumeGroupDataV2 =[
				'name', Utils.getQWordReader(),
				'parentName', Utils.getQWordReader(),
				'flags' , 'uint32',
				'volume' , 'float32',
						];

						this.EnvelopePointDataV2 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV2 =[
				'offsetParameter', Utils.getQWordReader(),
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV2),
				'offsetType' , 'uint8',
						];

						this.RangeDataV2 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV2 =[
				'time', this.RangeDataV2,
				'value', this.RangeDataV2,
						];

						this.DynamicParamDataV2 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV2),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV2),
				'value' , 'float32',
				'type' , 'uint8',
						];

						this.AttenuationDataV2 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV2,
				'pan3D', this.DynamicParamDataV2,
				'spread3D', this.DynamicParamDataV2,
				'volumeA', this.DynamicParamDataV2,
						];

						this.CategoryDataV2 =[
				'name', Utils.getQWordReader(),
				'volumeGroupName', Utils.getQWordReader(),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV2),
				'muteFadeTime' , 'float32',
				'volumeA' , 'float32',
				'volumeAThreshold' , 'float32',
				'volumeB' , 'float32',
				'volumeBThreshold' , 'float32',
				'volumeChangeRate' , 'float32',
				'volumeDucking' , 'float32',
				'volumeDuckingTimeAttack' , 'float32',
				'volumeDuckingTimeRelease' , 'float32',
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
						];

						this.AudioSettingsDataV2 =[
				'volumeGroup', Utils.getArrayReader(this.VolumeGroupDataV2),
				'category', Utils.getArrayReader(this.CategoryDataV2),
				'distanceScale' , 'float32',
				'voiceBankFileName' , Utils.getFileNameReader(),
						];

						this.HandlerDataV2 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.DspDataV2 =[
				'param', Utils.getArrayReader(this.DynamicParamDataV2),
				'type' , 'uint8',
						];

						this.FileNameDataV2 =[
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
				'fileName' , Utils.getFileNameReader(),
				'audioType' , 'uint8',
						];

						this.MetaSoundDataV2 =[
				'category', Utils.getQWordReader(),
				'endCue', Utils.getQWordReader(),
				'name', Utils.getQWordReader(),
				'playlistId', Utils.getQWordReader(),
				'dsp', Utils.getArrayReader(this.DspDataV2),
				'attenuation', Utils.getPointerReader(this.AttenuationDataV2),
				'fileName', Utils.getArrayReader(this.FileNameDataV2),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'positionOffset' , ['[]','float32',3],
				'flags' , 'uint32',
				'loopCount' , 'uint32',
				'depth', this.DynamicParamDataV2,
				'pan', this.DynamicParamDataV2,
				'pitch', this.DynamicParamDataV2,
				'pitchMS', this.DynamicParamDataV2,
				'volume', this.DynamicParamDataV2,
				'volumeMS', this.DynamicParamDataV2,
				'initialDelay', this.RangeDataV2,
				'playLength', this.RangeDataV2,
				'positionOffsetAngle', this.RangeDataV2,
				'positionRange', this.RangeDataV2,
				'repeatCount', this.RangeDataV2,
				'repeatTime', this.RangeDataV2,
				'startTimeOffset', this.RangeDataV2,
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'fileIterateMode' , 'uint8',
				'loopMode' , 'uint8',
				'playbackMode' , 'uint8',
				'positionMode' , 'uint8',
				'repeatTimeFrom' , 'uint8',
						];

						this.ScriptRefDataV2 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.TriggerMarkerDataV2 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV2 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV2),
						];

						this.__root=this.ScriptFileDataV2 =[
				'musicCue', Utils.getQWordReader(),
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV2),
				'handler', Utils.getArrayReader(this.HandlerDataV2),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV2),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV2),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV2),
				'flags' , 'uint32',
				'fadeInTime' , 'float32',
				'volume' , 'float32',
						];

			},

			// => Version: 1
			1:function(){
						this.EnvelopePointDataV1 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV1 =[
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV1),
				'offsetType' , 'uint8',
				'offsetParameter', Utils.getQWordReader(),
						];

						this.RangeDataV1 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV1 =[
				'time', this.RangeDataV1,
				'value', this.RangeDataV1,
						];

						this.DynamicParamDataV1 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV1),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV1),
				'type' , 'uint8',
				'value' , 'float32',
						];

						this.AttenuationDataV1 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV1,
				'pan3D', this.DynamicParamDataV1,
				'spread3D', this.DynamicParamDataV1,
				'volumeA', this.DynamicParamDataV1,
						];

						this.CategoryDataV1 =[
				'attenuation', Utils.getPointerReader(this.AttenuationDataV1),
				'flags' , 'uint32',
				'maxAudible' , 'uint32',
				'maxAudibleBehavior' , 'uint8',
				'muteFadeTime' , 'float32',
				'name', Utils.getQWordReader(),
				'volumeA' , 'float32',
				'volumeAThreshold' , 'float32',
				'volumeB' , 'float32',
				'volumeBThreshold' , 'float32',
				'volumeChangeRate' , 'float32',
				'volumeDucking' , 'float32',
				'volumeDuckingTimeAttack' , 'float32',
				'volumeDuckingTimeRelease' , 'float32',
				'volumeGroupName', Utils.getQWordReader(),
						];

						this.VolumeGroupDataV1 =[
				'flags' , 'uint32',
				'name', Utils.getQWordReader(),
				'parentName', Utils.getQWordReader(),
				'volume' , 'float32',
						];

						this.AudioSettingsDataV1 =[
				'category', Utils.getArrayReader(this.CategoryDataV1),
				'distanceScale' , 'float32',
				'voiceBankFileName' , Utils.getFileNameReader(),
				'volumeGroup', Utils.getArrayReader(this.VolumeGroupDataV1),
						];

						this.HandlerDataV1 =[
				'byteCode', Utils.getArrayReader('uint8'),
				'flags' , 'uint32',
				'name', Utils.getQWordReader(),
						];

						this.DspDataV1 =[
				'param', Utils.getArrayReader(this.DynamicParamDataV1),
				'type' , 'uint8',
						];

						this.FileNameDataV1 =[
				'audioType' , 'uint8',
				'fileName' , Utils.getFileNameReader(),
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
						];

						this.MetaSoundDataV1 =[
				'attenuation', Utils.getPointerReader(this.AttenuationDataV1),
				'category', Utils.getQWordReader(),
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'depth', this.DynamicParamDataV1,
				'dsp', Utils.getArrayReader(this.DspDataV1),
				'endCue', Utils.getQWordReader(),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'fileIterateMode' , 'uint8',
				'fileName', Utils.getArrayReader(this.FileNameDataV1),
				'flags' , 'uint32',
				'initialDelay', this.RangeDataV1,
				'loopCount' , 'uint32',
				'loopMode' , 'uint8',
				'name', Utils.getQWordReader(),
				'pan', this.DynamicParamDataV1,
				'pitch', this.DynamicParamDataV1,
				'playbackMode' , 'uint8',
				'playLength', this.RangeDataV1,
				'playlistId', Utils.getQWordReader(),
				'positionMode' , 'uint8',
				'positionOffset' , ['[]','float32',3],
				'positionOffsetAngle', this.RangeDataV1,
				'positionRange', this.RangeDataV1,
				'repeatCount', this.RangeDataV1,
				'repeatTime', this.RangeDataV1,
				'startTimeOffset', this.RangeDataV1,
				'repeatTimeFrom' , 'uint8',
				'volume', this.DynamicParamDataV1,
						];

						this.ScriptRefDataV1 =[
				'fileName' , Utils.getFileNameReader(),
				'name', Utils.getQWordReader(),
						];

						this.TriggerMarkerDataV1 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV1 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV1),
						];

						this.__root=this.ScriptFileDataV1 =[
				'audioSettings', Utils.getPointerReader(this.AudioSettingsDataV1),
				'fadeInTime' , 'float32',
				'flags' , 'uint32',
				'handler', Utils.getArrayReader(this.HandlerDataV1),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV1),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV1),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV1),
				'volume' , 'float32',
						];

			},

			// => Version: 0
			0:function(){
						this.HandlerDataV0 =[
				'byteCode', Utils.getArrayReader('uint8'),
				'flags' , 'uint32',
				'name', Utils.getQWordReader(),
						];

						this.EnvelopePointDataV0 =[
				'offset' , 'float32',
				'value' , 'float32',
						];

						this.EnvelopeDataV0 =[
				'envelopePoint', Utils.getArrayReader(this.EnvelopePointDataV0),
				'offsetType' , 'uint8',
				'offsetParameter', Utils.getQWordReader(),
						];

						this.RangeDataV0 =[
				'max' , 'float32',
				'min' , 'float32',
				'min' , 'uint8',
						];

						this.RandomParamDataV0 =[
				'time', this.RangeDataV0,
				'value', this.RangeDataV0,
						];

						this.DynamicParamDataV0 =[
				'envelopeData', Utils.getPointerReader(this.EnvelopeDataV0),
				'randomParamData', Utils.getPointerReader(this.RandomParamDataV0),
				'type' , 'uint8',
				'value' , 'float32',
						];

						this.AttenuationDataV0 =[
				'coneInsideAngle' , 'float32',
				'coneOutsideAngle' , 'float32',
				'coneOutsideVolume' , 'float32',
				'lowPass', this.DynamicParamDataV0,
				'pan3D', this.DynamicParamDataV0,
				'spread3D', this.DynamicParamDataV0,
				'volumeA', this.DynamicParamDataV0,
						];

						this.DspDataV0 =[
				'param', Utils.getArrayReader(this.DynamicParamDataV0),
				'type' , 'uint8',
						];

						this.FileNameDataV0 =[
				'audioType' , 'uint8',
				'fileName' , Utils.getFileNameReader(),
				'language', Utils.getQWordReader(),
				'weight' , 'float32',
						];

						this.MetaSoundDataV0 =[
				'attenuation', Utils.getPointerReader(this.AttenuationDataV0),
				'category', Utils.getQWordReader(),
				'channelMode' , 'uint8',
				'channelPriority' , 'uint8',
				'depth', this.DynamicParamDataV0,
				'dsp', Utils.getArrayReader(this.DspDataV0),
				'endCue', Utils.getQWordReader(),
				'endCueOffset' , 'float32',
				'fadeInTime' , 'float32',
				'fadeOutTime' , 'float32',
				'fileIterateMode' , 'uint8',
				'fileName', Utils.getArrayReader(this.FileNameDataV0),
				'flags' , 'uint32',
				'initialDelay', this.RangeDataV0,
				'loopCount' , 'uint32',
				'loopMode' , 'uint8',
				'name', Utils.getQWordReader(),
				'pan', this.DynamicParamDataV0,
				'pitch', this.DynamicParamDataV0,
				'playbackMode' , 'uint8',
				'playLength', this.RangeDataV0,
				'playlistId', Utils.getQWordReader(),
				'positionMode' , 'uint8',
				'positionOffset' , ['[]','float32',3],
				'positionOffsetAngle', this.RangeDataV0,
				'positionRange', this.RangeDataV0,
				'repeatCount', this.RangeDataV0,
				'repeatTime', this.RangeDataV0,
				'startTimeOffset', this.RangeDataV0,
				'repeatTimeFrom' , 'uint8',
				'volume', this.DynamicParamDataV0,
						];

						this.ScriptRefDataV0 =[
				'fileName' , Utils.getFileNameReader(),
				'name', Utils.getQWordReader(),
						];

						this.TriggerMarkerDataV0 =[
				'cue', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
				'time' , 'float32',
				'type' , 'uint8',
						];

						this.TriggerKeyDataV0 =[
				'name', Utils.getQWordReader(),
				'triggerMarker', Utils.getArrayReader(this.TriggerMarkerDataV0),
						];

						this.__root=this.ScriptFileDataV0 =[
				'fadeInTime' , 'float32',
				'flags' , 'uint32',
				'handler', Utils.getArrayReader(this.HandlerDataV0),
				'metaSound', Utils.getArrayReader(this.MetaSoundDataV0),
				'scriptRef', Utils.getArrayReader(this.ScriptRefDataV0),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV0),
				'volume' , 'float32',
						];

			},
		}
	},

	///==================================================
	/// Chunk: BKCK, versions: 3, strucTab: 0x1526B90 
	///==================================================
	{
		name:'BKCK',
		versions:{


			// => Version: 2
			2:function(){
						this.AsndFileDataV2 =[
				'voiceId' , 'uint32',
				'flags' , 'uint32',
				'reserved1' , 'uint32',
				'reserved2' , 'uint32',
				'reserved3' , 'uint32',
				'reserved4' , 'uint32',
				'length' , 'float32',
				'offset' , 'float32',
				'reserved5' , 'uint8',
				'reserved6' , 'uint8',
				'reserved7' , 'uint8',
				'reserved8' , 'uint8',
				'audioData', Utils.getArrayReader('uint8'),
						];

						this.ReservedBankDataV2 =[
				'reserved1' , 'uint32',
				'reserved2' , 'uint32',
				'reserved3' , 'uint32',
				'reserved4' , 'uint32',
						];

						this.__root=this.BankFileDataV2 =[
				'reserved1' , 'uint32',
				'reserved2' , 'uint32',
				'reserved3' , 'uint32',
				'reserved4' , 'uint32',
				'asndFile', Utils.getArrayReader(this.AsndFileDataV2),
				'reservedData', Utils.getPointerReader(this.ReservedBankDataV2),
						];

			},

			// => Version: 1
			1:function(){
						this.AsndFileDataV1 =[
				'voiceId' , 'uint32',
				'flags' , 'uint32',
				'reserved1' , 'uint32',
				'reserved2' , 'uint32',
				'length' , 'float32',
				'offset' , 'float32',
				'audioData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.BankFileDataV1 =[
				'reserved1' , 'uint32',
				'reserved2' , 'uint32',
				'asndFile', Utils.getArrayReader(this.AsndFileDataV1),
						];

			},

			// => Version: 0
			0:function(){
						this.AsndFileDataV0 =[
				'voiceId' , 'uint32',
				'flags' , 'uint32',
				'reserved1' , 'uint32',
				'reserved2' , 'uint32',
				'length' , 'float32',
				'offset' , 'float32',
				'audioData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.BankFileDataV0 =[
				'reserved1' , 'uint32',
				'reserved2' , 'uint32',
				'asndFile', Utils.getArrayReader(this.AsndFileDataV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: BIDX, versions: 1, strucTab: 0x1526E2C 
	///==================================================
	{
		name:'BIDX',
		versions:{


			// => Version: 0
			0:function(){
						this.BankFileNameDataV0 =[
				'fileName' , Utils.getFileNameReader(),
						];

						this.BankLanguageDataV0 =[
				'bankFileName', Utils.getArrayReader(this.BankFileNameDataV0),
						];

						this.__root=this.BankIndexDataV0 =[
				'bankLanguage', Utils.getArrayReader(this.BankLanguageDataV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: ASND, versions: 3, strucTab: 0x1526FF0 
	///==================================================
	{
		name:'ASND',
		versions:{


			// => Version: 2
			2:function(){
						this.ReservedWaveformDataV2 =[
				'reserved1' , 'uint32',
				'reserved2' , 'uint32',
				'reserved3' , 'uint32',
				'reserved4' , 'uint32',
						];

						this.__root=this.WaveformDataV2 =[
				'length' , 'float32',
				'offset' , 'float32',
				'reservedData', Utils.getPointerReader(this.ReservedWaveformDataV2),
				'reserved1' , 'uint32',
				'reserved2' , 'uint32',
				'crc' , 'uint32',
				'numSamples' , 'uint32',
				'loopStart' , 'uint32',
				'loopEnd' , 'uint32',
				'flags' , 'uint32',
				'format' , 'uint8',
				'reserved3' , 'uint8',
				'reserved4' , 'uint8',
				'reserved5' , 'uint8',
				'numChannels' , 'uint8',
				'reserved6' , 'uint8',
				'reserved7' , 'uint8',
				'reserved8' , 'uint8',
				'audioData', Utils.getArrayReader('uint8'),
				'otherData', Utils.getArrayReader('uint8'),
						];

			},

			// => Version: 1, ReferencedFunction: 0xF5DC10
			1:function(){
						this.__root=this.WaveformDataV1 =[
				'length' , 'float32',
				'offset' , 'float32',
				'crc' , 'uint32',
				'numSamples' , 'uint32',
				'loopStart' , 'uint32',
				'loopEnd' , 'uint32',
				'flags' , 'uint32',
				'format' , 'uint8',
				'noteBase' , 'uint8',
				'noteHigh' , 'uint8',
				'noteLow' , 'uint8',
				'numChannels' , 'uint8',
				'reserved1' , 'uint8',
				'reserved2' , 'uint8',
				'reserved3' , 'uint8',
				'audioData', Utils.getArrayReader('uint8'),
				'otherData', Utils.getArrayReader('uint8'),
						];

			},

			// => Version: 0
			0:function(){
						this.__root=this.WaveformDataV0 =[
				'data', Utils.getArrayReader('uint8'),
				'flags' , 'uint32',
				'length' , 'float32',
				'noteBase' , 'uint8',
				'noteHigh' , 'uint8',
				'noteLow' , 'uint8',
				'numChannels' , 'uint8',
				'numSamples' , 'uint32',
				'waveformDataType' , 'uint8',
						];

			},
		}
	},

	///==================================================
	/// Chunk: CSCN, versions: 37, strucTab: 0x1540030 
	///==================================================
	{
		name:'CSCN',
		versions:{


			// => Version: 36, ReferencedFunction: 0xF73C40
			36:function(){
						this.PropertyDataV36 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV36 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV36 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV36 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV36 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV36),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV36),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV36),
				'type' , 'uint8',
						];

						this.TrackGroupDataV36 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV36),
				'track', Utils.getArrayReader(this.TrackDataV36),
				'type' , 'uint8',
						];

						this.SequenceDataV36 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV36),
						];

						this.ColorDefDataV36 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV36 =[
				'ambientGroundColor', this.ColorDefDataV36,
				'ambientSkyColor', this.ColorDefDataV36,
				'fillColor', this.ColorDefDataV36,
				'hemisphericalColor', this.ColorDefDataV36,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV36 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV36 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV36 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV36 =[
				'name', Utils.getQWordReader(),
				'index' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV36),
						];

						this.SpeciesResourceDataV36 =[
				'speciesId', ['[]', 'uint8', 16],
				'name', Utils.getQWordReader(),
				'modelId', Utils.getQWordReader(),
				'modelVariant', Utils.getQWordReader(),
						];

						this.ResourceDataV36 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV36),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV36),
				'script', Utils.getArrayReader(this.ScriptDataV36),
				'textResource', Utils.getArrayReader(this.TextResourceDataV36),
				'speciesResource', Utils.getArrayReader(this.SpeciesResourceDataV36),
						];

						this.__root=this.SceneDataV36 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV36),
				'resources', this.ResourceDataV36,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV36),
						];

			},

			// => Version: 35
			35:function(){
						this.PropertyDataV35 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV35 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV35 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV35 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV35 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV35),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV35),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV35),
				'type' , 'uint8',
						];

						this.TrackGroupDataV35 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV35),
				'track', Utils.getArrayReader(this.TrackDataV35),
				'type' , 'uint8',
						];

						this.SequenceDataV35 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV35),
						];

						this.ColorDefDataV35 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV35 =[
				'ambientGroundColor', this.ColorDefDataV35,
				'ambientSkyColor', this.ColorDefDataV35,
				'fillColor', this.ColorDefDataV35,
				'hemisphericalColor', this.ColorDefDataV35,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV35 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV35 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV35 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV35 =[
				'name', Utils.getQWordReader(),
				'index' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV35),
						];

						this.SpeciesResourceDataV35 =[
				'speciesId', ['[]', 'uint8', 16],
				'name', Utils.getQWordReader(),
				'modelId', Utils.getQWordReader(),
				'modelVariant', Utils.getQWordReader(),
						];

						this.ResourceDataV35 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV35),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV35),
				'script', Utils.getArrayReader(this.ScriptDataV35),
				'textResource', Utils.getArrayReader(this.TextResourceDataV35),
				'speciesResource', Utils.getArrayReader(this.SpeciesResourceDataV35),
						];

						this.__root=this.SceneDataV35 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV35),
				'resources', this.ResourceDataV35,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV35),
						];

			},

			// => Version: 34, ReferencedFunction: 0xF73BA0
			34:function(){
						this.PropertyDataV34 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV34 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV34 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV34 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV34 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV34),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV34),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV34),
				'type' , 'uint8',
						];

						this.TrackGroupDataV34 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV34),
				'track', Utils.getArrayReader(this.TrackDataV34),
				'type' , 'uint8',
						];

						this.SequenceDataV34 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV34),
						];

						this.ColorDefDataV34 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV34 =[
				'ambientGroundColor', this.ColorDefDataV34,
				'ambientSkyColor', this.ColorDefDataV34,
				'fillColor', this.ColorDefDataV34,
				'hemisphericalColor', this.ColorDefDataV34,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV34 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV34 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV34 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV34 =[
				'name', Utils.getQWordReader(),
				'index' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV34),
						];

						this.SpeciesResourceDataV34 =[
				'speciesId', ['[]', 'uint8', 16],
				'modelId', Utils.getQWordReader(),
				'modelVariant', Utils.getQWordReader(),
						];

						this.ResourceDataV34 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV34),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV34),
				'script', Utils.getArrayReader(this.ScriptDataV34),
				'textResource', Utils.getArrayReader(this.TextResourceDataV34),
				'speciesResource', Utils.getArrayReader(this.SpeciesResourceDataV34),
						];

						this.__root=this.SceneDataV34 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV34),
				'resources', this.ResourceDataV34,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV34),
						];

			},

			// => Version: 33, ReferencedFunction: 0xF73B00
			33:function(){
						this.PropertyDataV33 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV33 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV33 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV33 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV33 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV33),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV33),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV33),
				'type' , 'uint8',
						];

						this.TrackGroupDataV33 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV33),
				'track', Utils.getArrayReader(this.TrackDataV33),
				'type' , 'uint8',
						];

						this.SequenceDataV33 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV33),
						];

						this.ColorDefDataV33 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV33 =[
				'ambientGroundColor', this.ColorDefDataV33,
				'ambientSkyColor', this.ColorDefDataV33,
				'fillColor', this.ColorDefDataV33,
				'hemisphericalColor', this.ColorDefDataV33,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV33 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV33 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV33 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV33 =[
				'name', Utils.getQWordReader(),
				'index' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV33),
						];

						this.ResourceDataV33 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV33),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV33),
				'script', Utils.getArrayReader(this.ScriptDataV33),
				'textResource', Utils.getArrayReader(this.TextResourceDataV33),
						];

						this.__root=this.SceneDataV33 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV33),
				'resources', this.ResourceDataV33,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV33),
						];

			},

			// => Version: 32, ReferencedFunction: 0xF73A60
			32:function(){
						this.PropertyDataV32 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV32 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV32 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV32 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV32 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV32),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV32),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV32),
				'type' , 'uint8',
						];

						this.TrackGroupDataV32 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV32),
				'track', Utils.getArrayReader(this.TrackDataV32),
				'type' , 'uint8',
						];

						this.SequenceDataV32 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV32),
						];

						this.ColorDefDataV32 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV32 =[
				'ambientGroundColor', this.ColorDefDataV32,
				'ambientSkyColor', this.ColorDefDataV32,
				'fillColor', this.ColorDefDataV32,
				'hemisphericalColor', this.ColorDefDataV32,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV32 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV32 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV32 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV32 =[
				'name', Utils.getQWordReader(),
				'index' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV32),
						];

						this.ResourceDataV32 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV32),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV32),
				'script', Utils.getArrayReader(this.ScriptDataV32),
				'textResource', Utils.getArrayReader(this.TextResourceDataV32),
						];

						this.__root=this.SceneDataV32 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV32),
				'resources', this.ResourceDataV32,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV32),
						];

			},

			// => Version: 31, ReferencedFunction: 0xF739C0
			31:function(){
						this.PropertyDataV31 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV31 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV31 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV31 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV31 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV31),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV31),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV31),
				'type' , 'uint8',
						];

						this.TrackGroupDataV31 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV31),
				'track', Utils.getArrayReader(this.TrackDataV31),
				'type' , 'uint8',
						];

						this.SequenceDataV31 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV31),
						];

						this.ColorDefDataV31 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV31 =[
				'ambientGroundColor', this.ColorDefDataV31,
				'ambientSkyColor', this.ColorDefDataV31,
				'fillColor', this.ColorDefDataV31,
				'hemisphericalColor', this.ColorDefDataV31,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV31 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV31 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV31 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV31 =[
				'name', Utils.getQWordReader(),
				'index' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV31),
						];

						this.ResourceDataV31 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV31),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV31),
				'script', Utils.getArrayReader(this.ScriptDataV31),
				'textResource', Utils.getArrayReader(this.TextResourceDataV31),
						];

						this.__root=this.SceneDataV31 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV31),
				'resources', this.ResourceDataV31,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV31),
						];

			},

			// => Version: 30, ReferencedFunction: 0xF73970
			30:function(){
						this.PropertyDataV30 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV30 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV30 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV30 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV30 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV30),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV30),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV30),
				'type' , 'uint8',
						];

						this.TrackGroupDataV30 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV30),
				'track', Utils.getArrayReader(this.TrackDataV30),
				'type' , 'uint8',
						];

						this.SequenceDataV30 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV30),
						];

						this.ColorDefDataV30 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV30 =[
				'ambientGroundColor', this.ColorDefDataV30,
				'ambientSkyColor', this.ColorDefDataV30,
				'fillColor', this.ColorDefDataV30,
				'hemisphericalColor', this.ColorDefDataV30,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV30 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV30 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV30 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV30 =[
				'name', Utils.getQWordReader(),
				'index' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV30),
						];

						this.ResourceDataV30 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV30),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV30),
				'script', Utils.getArrayReader(this.ScriptDataV30),
				'textResource', Utils.getArrayReader(this.TextResourceDataV30),
						];

						this.__root=this.SceneDataV30 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV30),
				'resources', this.ResourceDataV30,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV30),
						];

			},

			// => Version: 29
			29:function(){
						this.PropertyDataV29 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV29 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV29 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV29 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV29 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV29),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV29),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV29),
				'type' , 'uint8',
						];

						this.TrackGroupDataV29 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV29),
				'track', Utils.getArrayReader(this.TrackDataV29),
				'type' , 'uint8',
						];

						this.SequenceDataV29 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV29),
						];

						this.ColorDefDataV29 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV29 =[
				'ambientGroundColor', this.ColorDefDataV29,
				'ambientSkyColor', this.ColorDefDataV29,
				'fillColor', this.ColorDefDataV29,
				'hemisphericalColor', this.ColorDefDataV29,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV29 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV29 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV29 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV29 =[
				'guid', ['[]', 'uint8', 16],
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV29),
						];

						this.ResourceDataV29 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV29),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV29),
				'script', Utils.getArrayReader(this.ScriptDataV29),
				'textResource', Utils.getArrayReader(this.TextResourceDataV29),
						];

						this.__root=this.SceneDataV29 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV29),
				'resources', this.ResourceDataV29,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV29),
						];

			},

			// => Version: 28, ReferencedFunction: 0xF738D0
			28:function(){
						this.PropertyDataV28 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV28 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV28 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV28 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV28 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV28),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV28),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV28),
				'type' , 'uint8',
						];

						this.TrackGroupDataV28 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV28),
				'track', Utils.getArrayReader(this.TrackDataV28),
				'type' , 'uint8',
						];

						this.SequenceDataV28 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV28),
						];

						this.ColorDefDataV28 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV28 =[
				'ambientGroundColor', this.ColorDefDataV28,
				'ambientSkyColor', this.ColorDefDataV28,
				'fillColor', this.ColorDefDataV28,
				'hemisphericalColor', this.ColorDefDataV28,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV28 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV28 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV28 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV28 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV28),
						];

						this.ResourceDataV28 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV28),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV28),
				'script', Utils.getArrayReader(this.ScriptDataV28),
				'textResource', Utils.getArrayReader(this.TextResourceDataV28),
						];

						this.__root=this.SceneDataV28 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV28),
				'resources', this.ResourceDataV28,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV28),
						];

			},

			// => Version: 27, ReferencedFunction: 0xF73830
			27:function(){
						this.PropertyDataV27 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV27 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV27 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV27 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV27 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV27),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV27),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV27),
				'type' , 'uint8',
						];

						this.TrackGroupDataV27 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV27),
				'track', Utils.getArrayReader(this.TrackDataV27),
				'type' , 'uint8',
						];

						this.SequenceDataV27 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV27),
						];

						this.ColorDefDataV27 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV27 =[
				'ambientGroundColor', this.ColorDefDataV27,
				'ambientSkyColor', this.ColorDefDataV27,
				'fillColor', this.ColorDefDataV27,
				'hemisphericalColor', this.ColorDefDataV27,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV27 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV27 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV27 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV27 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV27),
						];

						this.ResourceDataV27 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV27),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV27),
				'script', Utils.getArrayReader(this.ScriptDataV27),
				'textResource', Utils.getArrayReader(this.TextResourceDataV27),
						];

						this.__root=this.SceneDataV27 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV27),
				'resources', this.ResourceDataV27,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV27),
						];

			},

			// => Version: 26, ReferencedFunction: 0xF73790
			26:function(){
						this.PropertyDataV26 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV26 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV26 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV26 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV26 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV26),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV26),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV26),
				'type' , 'uint8',
						];

						this.TrackGroupDataV26 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV26),
				'track', Utils.getArrayReader(this.TrackDataV26),
				'type' , 'uint8',
						];

						this.SequenceDataV26 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV26),
						];

						this.ColorDefDataV26 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV26 =[
				'ambientGroundColor', this.ColorDefDataV26,
				'ambientSkyColor', this.ColorDefDataV26,
				'fillColor', this.ColorDefDataV26,
				'hemisphericalColor', this.ColorDefDataV26,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV26 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV26 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV26 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV26 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV26),
						];

						this.ResourceDataV26 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV26),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV26),
				'script', Utils.getArrayReader(this.ScriptDataV26),
				'textResource', Utils.getArrayReader(this.TextResourceDataV26),
						];

						this.__root=this.SceneDataV26 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV26),
				'resources', this.ResourceDataV26,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV26),
						];

			},

			// => Version: 25, ReferencedFunction: 0xF736F0
			25:function(){
						this.PropertyDataV25 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV25 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV25 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV25 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV25 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV25),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV25),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV25),
				'type' , 'uint8',
						];

						this.TrackGroupDataV25 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV25),
				'track', Utils.getArrayReader(this.TrackDataV25),
				'type' , 'uint8',
						];

						this.SequenceDataV25 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV25),
						];

						this.ColorDefDataV25 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV25 =[
				'ambientGroundColor', this.ColorDefDataV25,
				'ambientSkyColor', this.ColorDefDataV25,
				'fillColor', this.ColorDefDataV25,
				'hemisphericalColor', this.ColorDefDataV25,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV25 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV25 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV25 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV25 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV25),
						];

						this.ResourceDataV25 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV25),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV25),
				'script', Utils.getArrayReader(this.ScriptDataV25),
				'textResource', Utils.getArrayReader(this.TextResourceDataV25),
						];

						this.__root=this.SceneDataV25 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV25),
				'resources', this.ResourceDataV25,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV25),
						];

			},

			// => Version: 24, ReferencedFunction: 0xF73650
			24:function(){
						this.PropertyDataV24 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV24 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV24 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV24 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV24 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV24),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV24),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV24),
				'type' , 'uint8',
						];

						this.TrackGroupDataV24 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV24),
				'track', Utils.getArrayReader(this.TrackDataV24),
				'type' , 'uint8',
						];

						this.SequenceDataV24 =[
				'name', Utils.getQWordReader(),
				'playScript', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV24),
						];

						this.ColorDefDataV24 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV24 =[
				'ambientGroundColor', this.ColorDefDataV24,
				'ambientSkyColor', this.ColorDefDataV24,
				'fillColor', this.ColorDefDataV24,
				'hemisphericalColor', this.ColorDefDataV24,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV24 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV24 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV24 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV24 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV24),
						];

						this.ResourceDataV24 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV24),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV24),
				'script', Utils.getArrayReader(this.ScriptDataV24),
				'textResource', Utils.getArrayReader(this.TextResourceDataV24),
						];

						this.__root=this.SceneDataV24 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV24),
				'resources', this.ResourceDataV24,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV24),
						];

			},

			// => Version: 23
			23:function(){
						this.PropertyDataV23 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV23 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV23 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV23 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV23 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV23),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV23),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV23),
				'type' , 'uint8',
						];

						this.TrackGroupDataV23 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV23),
				'track', Utils.getArrayReader(this.TrackDataV23),
				'type' , 'uint8',
						];

						this.SequenceDataV23 =[
				'name', Utils.getQWordReader(),
				'updateScript', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'flags' , 'uint32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV23),
						];

						this.ColorDefDataV23 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV23 =[
				'ambientGroundColor', this.ColorDefDataV23,
				'ambientSkyColor', this.ColorDefDataV23,
				'fillColor', this.ColorDefDataV23,
				'hemisphericalColor', this.ColorDefDataV23,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV23 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV23 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV23 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV23 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV23),
						];

						this.ResourceDataV23 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV23),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV23),
				'script', Utils.getArrayReader(this.ScriptDataV23),
				'textResource', Utils.getArrayReader(this.TextResourceDataV23),
						];

						this.__root=this.SceneDataV23 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV23),
				'resources', this.ResourceDataV23,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV23),
						];

			},

			// => Version: 22, ReferencedFunction: 0xF735B0
			22:function(){
						this.PropertyDataV22 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV22 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV22 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV22 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV22 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV22),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV22),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV22),
				'type' , 'uint8',
						];

						this.TrackGroupDataV22 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV22),
				'track', Utils.getArrayReader(this.TrackDataV22),
				'type' , 'uint8',
						];

						this.SequenceDataV22 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'updateScript', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV22),
						];

						this.ColorDefDataV22 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV22 =[
				'ambientGroundColor', this.ColorDefDataV22,
				'ambientSkyColor', this.ColorDefDataV22,
				'fillColor', this.ColorDefDataV22,
				'hemisphericalColor', this.ColorDefDataV22,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV22 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV22 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV22 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV22 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV22),
						];

						this.ResourceDataV22 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV22),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV22),
				'script', Utils.getArrayReader(this.ScriptDataV22),
				'textResource', Utils.getArrayReader(this.TextResourceDataV22),
						];

						this.__root=this.SceneDataV22 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV22),
				'resources', this.ResourceDataV22,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV22),
						];

			},

			// => Version: 21
			21:function(){
						this.PropertyDataV21 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV21 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV21 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV21 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV21 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV21),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV21),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV21),
				'type' , 'uint8',
						];

						this.TrackGroupDataV21 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV21),
				'track', Utils.getArrayReader(this.TrackDataV21),
				'type' , 'uint8',
						];

						this.SequenceDataV21 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'updateScript', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV21),
						];

						this.ColorDefDataV21 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV21 =[
				'ambientGroundColor', this.ColorDefDataV21,
				'ambientSkyColor', this.ColorDefDataV21,
				'fillColor', this.ColorDefDataV21,
				'hemisphericalColor', this.ColorDefDataV21,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV21 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV21 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV21 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV21 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV21),
						];

						this.ResourceDataV21 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV21),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV21),
				'script', Utils.getArrayReader(this.ScriptDataV21),
				'textResource', Utils.getArrayReader(this.TextResourceDataV21),
						];

						this.__root=this.SceneDataV21 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV21),
				'resources', this.ResourceDataV21,
				'trackGroup', Utils.getPointerReader(this.TrackGroupDataV21),
						];

			},

			// => Version: 20, ReferencedFunction: 0xF73510
			20:function(){
						this.PropertyDataV20 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV20 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV20 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV20 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV20 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV20),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV20),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV20),
				'type' , 'uint8',
						];

						this.TrackGroupDataV20 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV20),
				'track', Utils.getArrayReader(this.TrackDataV20),
				'type' , 'uint8',
						];

						this.SequenceDataV20 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'updateScript', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV20),
						];

						this.ColorDefDataV20 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV20 =[
				'ambientGroundColor', this.ColorDefDataV20,
				'ambientSkyColor', this.ColorDefDataV20,
				'fillColor', this.ColorDefDataV20,
				'hemisphericalColor', this.ColorDefDataV20,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV20 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV20 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV20 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV20 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV20),
						];

						this.ResourceDataV20 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV20),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV20),
				'script', Utils.getArrayReader(this.ScriptDataV20),
				'textResource', Utils.getArrayReader(this.TextResourceDataV20),
						];

						this.__root=this.SceneDataV20 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV20),
				'resources', this.ResourceDataV20,
						];

			},

			// => Version: 19, ReferencedFunction: 0xF73470
			19:function(){
						this.PropertyDataV19 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV19 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV19 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV19 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV19 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV19),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV19),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV19),
				'type' , 'uint8',
						];

						this.TrackGroupDataV19 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV19),
				'track', Utils.getArrayReader(this.TrackDataV19),
				'type' , 'uint8',
						];

						this.SequenceDataV19 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'updateScript', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV19),
						];

						this.ColorDefDataV19 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV19 =[
				'ambientGroundColor', this.ColorDefDataV19,
				'ambientSkyColor', this.ColorDefDataV19,
				'fillColor', this.ColorDefDataV19,
				'hemisphericalColor', this.ColorDefDataV19,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV19 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV19 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV19 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV19 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV19),
						];

						this.ResourceDataV19 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV19),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV19),
				'script', Utils.getArrayReader(this.ScriptDataV19),
				'textResource', Utils.getArrayReader(this.TextResourceDataV19),
						];

						this.__root=this.SceneDataV19 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV19),
				'resources', this.ResourceDataV19,
						];

			},

			// => Version: 18, ReferencedFunction: 0xF73470
			18:function(){
						this.PropertyDataV18 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV18 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV18 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV18 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV18 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV18),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV18),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV18),
				'type' , 'uint8',
						];

						this.TrackGroupDataV18 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV18),
				'track', Utils.getArrayReader(this.TrackDataV18),
				'type' , 'uint8',
						];

						this.SequenceDataV18 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'updateScript', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV18),
						];

						this.ColorDefDataV18 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV18 =[
				'ambientGroundColor', this.ColorDefDataV18,
				'ambientSkyColor', this.ColorDefDataV18,
				'fillColor', this.ColorDefDataV18,
				'hemisphericalColor', this.ColorDefDataV18,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV18 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV18 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV18 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV18 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV18),
						];

						this.ResourceDataV18 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV18),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV18),
				'script', Utils.getArrayReader(this.ScriptDataV18),
				'textResource', Utils.getArrayReader(this.TextResourceDataV18),
						];

						this.__root=this.SceneDataV18 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV18),
				'resources', this.ResourceDataV18,
						];

			},

			// => Version: 17, ReferencedFunction: 0xF733D0
			17:function(){
						this.PropertyDataV17 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV17 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV17 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV17 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV17 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV17),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV17),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV17),
				'type' , 'uint8',
						];

						this.TrackGroupDataV17 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV17),
				'track', Utils.getArrayReader(this.TrackDataV17),
				'type' , 'uint8',
						];

						this.SequenceDataV17 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'updateScript', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV17),
						];

						this.ColorDefDataV17 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV17 =[
				'ambientGroundColor', this.ColorDefDataV17,
				'ambientSkyColor', this.ColorDefDataV17,
				'fillColor', this.ColorDefDataV17,
				'hemisphericalColor', this.ColorDefDataV17,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV17 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV17 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV17 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV17 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV17),
						];

						this.ResourceDataV17 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV17),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV17),
				'script', Utils.getArrayReader(this.ScriptDataV17),
				'textResource', Utils.getArrayReader(this.TextResourceDataV17),
						];

						this.__root=this.SceneDataV17 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV17),
				'resources', this.ResourceDataV17,
						];

			},

			// => Version: 16, ReferencedFunction: 0xF73330
			16:function(){
						this.PropertyDataV16 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV16 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV16 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV16 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV16 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV16),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV16),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV16),
				'type' , 'uint8',
						];

						this.TrackGroupDataV16 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV16),
				'track', Utils.getArrayReader(this.TrackDataV16),
				'type' , 'uint8',
						];

						this.SequenceDataV16 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'updateScript', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV16),
						];

						this.ColorDefDataV16 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV16 =[
				'ambientGroundColor', this.ColorDefDataV16,
				'ambientSkyColor', this.ColorDefDataV16,
				'fillColor', this.ColorDefDataV16,
				'hemisphericalColor', this.ColorDefDataV16,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV16 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV16 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV16 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV16 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV16),
						];

						this.ResourceDataV16 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV16),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV16),
				'script', Utils.getArrayReader(this.ScriptDataV16),
				'textResource', Utils.getArrayReader(this.TextResourceDataV16),
						];

						this.__root=this.SceneDataV16 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV16),
				'resources', this.ResourceDataV16,
						];

			},

			// => Version: 15
			15:function(){
						this.PropertyDataV15 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV15 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV15 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV15 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV15 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV15),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV15),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV15),
				'type' , 'uint8',
						];

						this.TrackGroupDataV15 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV15),
				'track', Utils.getArrayReader(this.TrackDataV15),
				'type' , 'uint8',
						];

						this.SequenceDataV15 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'updateScript', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV15),
						];

						this.ColorDefDataV15 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV15 =[
				'ambientGroundColor', this.ColorDefDataV15,
				'ambientSkyColor', this.ColorDefDataV15,
				'fillColor', this.ColorDefDataV15,
				'hemisphericalColor', this.ColorDefDataV15,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV15 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV15 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV15 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV15 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV15),
						];

						this.ResourceDataV15 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV15),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV15),
				'script', Utils.getArrayReader(this.ScriptDataV15),
				'textResource', Utils.getArrayReader(this.TextResourceDataV15),
						];

						this.__root=this.SceneDataV15 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV15),
				'resources', this.ResourceDataV15,
						];

			},

			// => Version: 14
			14:function(){
						this.PropertyDataV14 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV14 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV14 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV14 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV14 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV14),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV14),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV14),
				'type' , 'uint8',
						];

						this.TrackGroupDataV14 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV14),
				'track', Utils.getArrayReader(this.TrackDataV14),
				'type' , 'uint8',
						];

						this.SequenceDataV14 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV14),
						];

						this.ColorDefDataV14 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV14 =[
				'ambientGroundColor', this.ColorDefDataV14,
				'ambientSkyColor', this.ColorDefDataV14,
				'fillColor', this.ColorDefDataV14,
				'hemisphericalColor', this.ColorDefDataV14,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV14 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV14 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV14 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV14 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'voiceId' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV14),
						];

						this.ResourceDataV14 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV14),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV14),
				'script', Utils.getArrayReader(this.ScriptDataV14),
				'textResource', Utils.getArrayReader(this.TextResourceDataV14),
						];

						this.__root=this.SceneDataV14 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV14),
				'resources', this.ResourceDataV14,
						];

			},

			// => Version: 13, ReferencedFunction: 0xF732B0
			13:function(){
						this.PropertyDataV13 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV13 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV13 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV13 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV13 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV13),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV13),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV13),
				'type' , 'uint8',
						];

						this.TrackGroupDataV13 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV13),
				'track', Utils.getArrayReader(this.TrackDataV13),
				'type' , 'uint8',
						];

						this.SequenceDataV13 =[
				'name', Utils.getQWordReader(),
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV13),
						];

						this.ColorDefDataV13 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV13 =[
				'ambientGroundColor', this.ColorDefDataV13,
				'ambientSkyColor', this.ColorDefDataV13,
				'fillColor', this.ColorDefDataV13,
				'hemisphericalColor', this.ColorDefDataV13,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV13 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV13 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV13 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV13 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV13),
						];

						this.ResourceDataV13 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV13),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV13),
				'script', Utils.getArrayReader(this.ScriptDataV13),
				'textResource', Utils.getArrayReader(this.TextResourceDataV13),
						];

						this.__root=this.SceneDataV13 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV13),
				'resources', this.ResourceDataV13,
						];

			},

			// => Version: 12, ReferencedFunction: 0xF731C0
			12:function(){
						this.PropertyDataV12 =[
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
				'type' , 'uint8',
						];

						this.CurveKeyDataV12 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV12 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV12 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV12 =[
				'name', Utils.getQWordReader(),
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV12),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV12),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV12),
				'type' , 'uint8',
						];

						this.TrackGroupDataV12 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV12),
				'track', Utils.getArrayReader(this.TrackDataV12),
				'type' , 'uint8',
						];

						this.SequenceDataV12 =[
				'name', Utils.getQWordReader(),
				'environmentMap', Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV12),
						];

						this.ColorDefDataV12 =[
				'intensity' , 'float32',
				'color', ['[]', 'uint8', 3],
						];

						this.AmbientLightDataV12 =[
				'ambientGroundColor', this.ColorDefDataV12,
				'ambientSkyColor', this.ColorDefDataV12,
				'fillColor', this.ColorDefDataV12,
				'hemisphericalColor', this.ColorDefDataV12,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV12 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV12 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV12 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV12 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV12),
						];

						this.ResourceDataV12 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV12),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV12),
				'script', Utils.getArrayReader(this.ScriptDataV12),
				'textResource', Utils.getArrayReader(this.TextResourceDataV12),
						];

						this.__root=this.SceneDataV12 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV12),
				'resources', this.ResourceDataV12,
						];

			},

			// => Version: 11, ReferencedFunction: 0xF73120
			11:function(){
						this.PropertyDataV11 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV11 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV11 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV11 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV11 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV11),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV11),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV11),
						];

						this.TrackGroupDataV11 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV11),
				'track', Utils.getArrayReader(this.TrackDataV11),
						];

						this.SequenceDataV11 =[
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV11),
						];

						this.ColorDefDataV11 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV11 =[
				'ambientGroundColor', this.ColorDefDataV11,
				'ambientSkyColor', this.ColorDefDataV11,
				'fillColor', this.ColorDefDataV11,
				'hemisphericalColor', this.ColorDefDataV11,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV11 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV11 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV11 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV11 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV11),
						];

						this.ResourceDataV11 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV11),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV11),
				'script', Utils.getArrayReader(this.ScriptDataV11),
				'textResource', Utils.getArrayReader(this.TextResourceDataV11),
						];

						this.__root=this.SceneDataV11 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV11),
				'resources', this.ResourceDataV11,
						];

			},

			// => Version: 10, ReferencedFunction: 0xF730C0
			10:function(){
						this.PropertyDataV10 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV10 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV10 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV10 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV10 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV10),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV10),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV10),
						];

						this.TrackGroupDataV10 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV10),
				'track', Utils.getArrayReader(this.TrackDataV10),
						];

						this.SequenceDataV10 =[
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV10),
						];

						this.ColorDefDataV10 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV10 =[
				'ambientGroundColor', this.ColorDefDataV10,
				'ambientSkyColor', this.ColorDefDataV10,
				'fillColor', this.ColorDefDataV10,
				'hemisphericalColor', this.ColorDefDataV10,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV10 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV10 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV10 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV10 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV10),
						];

						this.ResourceDataV10 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV10),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV10),
				'script', Utils.getArrayReader(this.ScriptDataV10),
				'textResource', Utils.getArrayReader(this.TextResourceDataV10),
						];

						this.__root=this.SceneDataV10 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV10),
				'resources', this.ResourceDataV10,
						];

			},

			// => Version: 9, ReferencedFunction: 0xF73010
			9:function(){
						this.PropertyDataV9 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV9 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV9 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV9 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV9 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV9),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV9),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV9),
						];

						this.TrackGroupDataV9 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV9),
				'track', Utils.getArrayReader(this.TrackDataV9),
						];

						this.SequenceDataV9 =[
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV9),
						];

						this.ColorDefDataV9 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV9 =[
				'ambientGroundColor', this.ColorDefDataV9,
				'ambientSkyColor', this.ColorDefDataV9,
				'fillColor', this.ColorDefDataV9,
				'hemisphericalColor', this.ColorDefDataV9,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV9 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV9 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV9 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV9 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV9),
						];

						this.ResourceDataV9 =[
				'crc' , 'uint32',
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV9),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV9),
				'script', Utils.getArrayReader(this.ScriptDataV9),
				'textResource', Utils.getArrayReader(this.TextResourceDataV9),
						];

						this.__root=this.SceneDataV9 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV9),
				'resources', this.ResourceDataV9,
						];

			},

			// => Version: 8
			8:function(){
						this.PropertyDataV8 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV8 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV8 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV8 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV8 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV8),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV8),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV8),
						];

						this.TrackGroupDataV8 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV8),
				'track', Utils.getArrayReader(this.TrackDataV8),
						];

						this.SequenceDataV8 =[
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV8),
						];

						this.ColorDefDataV8 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV8 =[
				'ambientGroundColor', this.ColorDefDataV8,
				'ambientSkyColor', this.ColorDefDataV8,
				'fillColor', this.ColorDefDataV8,
				'hemisphericalColor', this.ColorDefDataV8,
				'name', Utils.getQWordReader(),
						];

						this.FileNameRefDataV8 =[
				'name', Utils.getQWordReader(),
				'fileName' , Utils.getFileNameReader(),
						];

						this.ScriptDataV8 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV8 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV8 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV8),
						];

						this.ResourceDataV8 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV8),
				'fileNameRef', Utils.getArrayReader(this.FileNameRefDataV8),
				'script', Utils.getArrayReader(this.ScriptDataV8),
				'textResource', Utils.getArrayReader(this.TextResourceDataV8),
						];

						this.__root=this.SceneDataV8 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV8),
				'resources', this.ResourceDataV8,
						];

			},

			// => Version: 7, ReferencedFunction: 0xF72F30
			7:function(){
						this.PropertyDataV7 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV7 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV7 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV7 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV7 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV7),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV7),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV7),
						];

						this.TrackGroupDataV7 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV7),
				'track', Utils.getArrayReader(this.TrackDataV7),
						];

						this.SequenceDataV7 =[
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV7),
						];

						this.ColorDefDataV7 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV7 =[
				'ambientGroundColor', this.ColorDefDataV7,
				'ambientSkyColor', this.ColorDefDataV7,
				'fillColor', this.ColorDefDataV7,
				'hemisphericalColor', this.ColorDefDataV7,
				'name', Utils.getQWordReader(),
						];

						this.ScriptDataV7 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV7 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV7 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV7),
						];

						this.ResourceDataV7 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV7),
				'script', Utils.getArrayReader(this.ScriptDataV7),
				'textResource', Utils.getArrayReader(this.TextResourceDataV7),
						];

						this.__root=this.SceneDataV7 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV7),
				'resources', this.ResourceDataV7,
						];

			},

			// => Version: 6, ReferencedFunction: 0xF72E60
			6:function(){
						this.PropertyDataV6 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV6 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV6 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV6 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV6 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV6),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV6),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV6),
						];

						this.TrackGroupDataV6 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV6),
				'track', Utils.getArrayReader(this.TrackDataV6),
						];

						this.SequenceDataV6 =[
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV6),
						];

						this.ColorDefDataV6 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV6 =[
				'ambientGroundColor', this.ColorDefDataV6,
				'ambientSkyColor', this.ColorDefDataV6,
				'fillColor', this.ColorDefDataV6,
				'hemisphericalColor', this.ColorDefDataV6,
				'name', Utils.getQWordReader(),
						];

						this.ScriptDataV6 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV6 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV6 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV6),
						];

						this.ResourceDataV6 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV6),
				'script', Utils.getArrayReader(this.ScriptDataV6),
				'textResource', Utils.getArrayReader(this.TextResourceDataV6),
						];

						this.__root=this.SceneDataV6 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV6),
				'resources', this.ResourceDataV6,
						];

			},

			// => Version: 5, ReferencedFunction: 0xF72DC0
			5:function(){
						this.PropertyDataV5 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV5 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV5 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV5 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV5 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV5),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV5),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV5),
						];

						this.TrackGroupDataV5 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV5),
				'track', Utils.getArrayReader(this.TrackDataV5),
						];

						this.SequenceDataV5 =[
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV5),
						];

						this.ColorDefDataV5 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV5 =[
				'ambientGroundColor', this.ColorDefDataV5,
				'ambientSkyColor', this.ColorDefDataV5,
				'fillColor', this.ColorDefDataV5,
				'hemisphericalColor', this.ColorDefDataV5,
				'name', Utils.getQWordReader(),
						];

						this.ScriptDataV5 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV5 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV5 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV5),
						];

						this.ResourceDataV5 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV5),
				'script', Utils.getArrayReader(this.ScriptDataV5),
				'textResource', Utils.getArrayReader(this.TextResourceDataV5),
						];

						this.__root=this.SceneDataV5 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV5),
				'resources', this.ResourceDataV5,
						];

			},

			// => Version: 4, ReferencedFunction: 0xF72D20
			4:function(){
						this.PropertyDataV4 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV4 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV4 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV4 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV4 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV4),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV4),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV4),
						];

						this.TrackGroupDataV4 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV4),
				'track', Utils.getArrayReader(this.TrackDataV4),
						];

						this.SequenceDataV4 =[
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV4),
						];

						this.ColorDefDataV4 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV4 =[
				'ambientGroundColor', this.ColorDefDataV4,
				'ambientSkyColor', this.ColorDefDataV4,
				'fillColor', this.ColorDefDataV4,
				'hemisphericalColor', this.ColorDefDataV4,
				'name', Utils.getQWordReader(),
						];

						this.ScriptDataV4 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV4 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV4 =[
				'name', Utils.getQWordReader(),
				'id' , 'uint32',
				'textEntry', Utils.getArrayReader(this.TextEntryDataV4),
						];

						this.ResourceDataV4 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV4),
				'script', Utils.getArrayReader(this.ScriptDataV4),
				'textResource', Utils.getArrayReader(this.TextResourceDataV4),
						];

						this.__root=this.SceneDataV4 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV4),
				'resources', this.ResourceDataV4,
						];

			},

			// => Version: 3, ReferencedFunction: 0xF72C80
			3:function(){
						this.PropertyDataV3 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV3 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV3 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV3 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV3 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV3),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV3),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV3),
						];

						this.TrackGroupDataV3 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV3),
				'track', Utils.getArrayReader(this.TrackDataV3),
						];

						this.SequenceDataV3 =[
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV3),
						];

						this.ColorDefDataV3 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV3 =[
				'ambientGroundColor', this.ColorDefDataV3,
				'ambientSkyColor', this.ColorDefDataV3,
				'fillColor', this.ColorDefDataV3,
				'hemisphericalColor', this.ColorDefDataV3,
				'name', Utils.getQWordReader(),
						];

						this.ScriptDataV3 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV3 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV3 =[
				'name', Utils.getQWordReader(),
				'textEntry', Utils.getArrayReader(this.TextEntryDataV3),
						];

						this.ResourceDataV3 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV3),
				'script', Utils.getArrayReader(this.ScriptDataV3),
				'textResource', Utils.getArrayReader(this.TextResourceDataV3),
						];

						this.__root=this.SceneDataV3 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV3),
				'resources', this.ResourceDataV3,
						];

			},

			// => Version: 2
			2:function(){
						this.PropertyDataV2 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV2 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV2 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV2 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV2 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV2),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV2),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV2),
						];

						this.TrackGroupDataV2 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV2),
				'track', Utils.getArrayReader(this.TrackDataV2),
						];

						this.SequenceDataV2 =[
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV2),
						];

						this.ColorDefDataV2 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV2 =[
				'ambientGroundColor', this.ColorDefDataV2,
				'ambientSkyColor', this.ColorDefDataV2,
				'fillColor', this.ColorDefDataV2,
				'hemisphericalColor', this.ColorDefDataV2,
				'name', Utils.getQWordReader(),
						];

						this.ScriptDataV2 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV2 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV2 =[
				'name', Utils.getQWordReader(),
				'textEntry', Utils.getArrayReader(this.TextEntryDataV2),
						];

						this.ResourceDataV2 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV2),
				'script', Utils.getArrayReader(this.ScriptDataV2),
				'textResource', Utils.getArrayReader(this.TextResourceDataV2),
						];

						this.__root=this.SceneDataV2 =[
				'startingSequence', Utils.getQWordReader(),
				'sequence', Utils.getArrayReader(this.SequenceDataV2),
				'resources', this.ResourceDataV2,
						];

			},

			// => Version: 1, ReferencedFunction: 0xF72B70
			1:function(){
						this.PropertyDataV1 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV1 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV1 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV1 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV1 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV1),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV1),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV1),
						];

						this.TrackGroupDataV1 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV1),
				'track', Utils.getArrayReader(this.TrackDataV1),
						];

						this.SequenceDataV1 =[
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV1),
						];

						this.ColorDefDataV1 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV1 =[
				'ambientGroundColor', this.ColorDefDataV1,
				'ambientSkyColor', this.ColorDefDataV1,
				'fillColor', this.ColorDefDataV1,
				'hemisphericalColor', this.ColorDefDataV1,
				'name', Utils.getQWordReader(),
						];

						this.ScriptDataV1 =[
				'name', Utils.getQWordReader(),
				'byteCode', Utils.getArrayReader('uint8'),
						];

						this.TextEntryDataV1 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV1 =[
				'name', Utils.getQWordReader(),
				'textEntry', Utils.getArrayReader(this.TextEntryDataV1),
						];

						this.ResourceDataV1 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV1),
				'script', Utils.getArrayReader(this.ScriptDataV1),
				'textResource', Utils.getArrayReader(this.TextResourceDataV1),
						];

						this.__root=this.SceneDataV1 =[
				'sequence', Utils.getArrayReader(this.SequenceDataV1),
				'resources', this.ResourceDataV1,
						];

			},

			// => Version: 0
			0:function(){
						this.PropertyDataV0 =[
				'type' , 'uint8',
				'value', Utils.getQWordReader(),
				'pathVal' , Utils.getFileNameReader(),
						];

						this.CurveKeyDataV0 =[
				'time' , 'float32',
				'value' , 'float32',
				'inTangent' , 'float32',
				'outTangent' , 'float32',
						];

						this.FlagKeyDataV0 =[
				'time' , 'float32',
				'value' , 'float32',
						];

						this.TriggerKeyDataV0 =[
				'time' , 'float32',
				'flags1' , 'uint8',
				'flags2' , 'uint8',
				'flags3' , 'uint8',
				'flags4' , 'uint8',
				'token1', Utils.getQWordReader(),
				'token2', Utils.getQWordReader(),
				'value1' , 'float32',
				'value2' , 'float32',
				'value3' , 'float32',
				'value4' , 'float32',
						];

						this.TrackDataV0 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'curveKey', Utils.getArrayReader(this.CurveKeyDataV0),
				'flagKey', Utils.getArrayReader(this.FlagKeyDataV0),
				'triggerKey', Utils.getArrayReader(this.TriggerKeyDataV0),
						];

						this.TrackGroupDataV0 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint32',
				'prop', Utils.getArrayReader(this.PropertyDataV0),
				'track', Utils.getArrayReader(this.TrackDataV0),
						];

						this.SequenceDataV0 =[
				'environmentMap' , Utils.getFileNameReader(),
				'map', Utils.getString16Reader(),
				'clientMap', Utils.getString16Reader(),
				'name', Utils.getQWordReader(),
				'length' , 'float32',
				'trackGroup', Utils.getArrayReader(this.TrackGroupDataV0),
						];

						this.ColorDefDataV0 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
						];

						this.AmbientLightDataV0 =[
				'ambientGroundColor', this.ColorDefDataV0,
				'ambientSkyColor', this.ColorDefDataV0,
				'fillColor', this.ColorDefDataV0,
				'hemisphericalColor', this.ColorDefDataV0,
				'name', Utils.getQWordReader(),
						];

						this.TextEntryDataV0 =[
				'text', Utils.getString16Reader(),
				'language' , 'uint8',
						];

						this.TextResourceDataV0 =[
				'name', Utils.getQWordReader(),
				'textEntry', Utils.getArrayReader(this.TextEntryDataV0),
						];

						this.ResourceDataV0 =[
				'ambientLightResource', Utils.getArrayReader(this.AmbientLightDataV0),
				'textResource', Utils.getArrayReader(this.TextResourceDataV0),
						];

						this.__root=this.SceneDataV0 =[
				'sequence', Utils.getArrayReader(this.SequenceDataV0),
				'resources', this.ResourceDataV0,
						];

			},
		}
	},

	///==================================================
	/// Chunk: shad, versions: 2, strucTab: 0x157F250 
	///==================================================
	{
		name:'shad',
		versions:{


			// => Version: 1, ReferencedFunction: 0xFFD130
			1:function(){
						this.PackMapShadowTileV1 =[
				'compressionMode' , 'uint32',
				'bytes', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapShadowV1 =[
				'shadowDims', ['[]', 'uint32', 2],
				'tileDims', ['[]', 'uint32', 2],
				'tiles', Utils.getArrayReader(this.PackMapShadowTileV1),
				'worldToShadow', ['[]', 'float32', 16],
				's' , ['[]','float32',2],
				't' , ['[]','float32',2],
				'u' , ['[]','float32',2],
				'shadowEye' , ['[]','float32',3],
				'shadowDir' , ['[]','float32',3],
				'shadowUp' , ['[]','float32',3],
						];

			},

			// => Version: 0
			0:function(){
						this.PackMapShadowTileV0 =[
				'compressionMode' , 'uint32',
				'bytes', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapShadowV0 =[
				'shadowDims', ['[]', 'uint32', 2],
				'tileDims', ['[]', 'uint32', 2],
				'tiles', Utils.getArrayReader(this.PackMapShadowTileV0),
				'worldToShadow', ['[]', 'float32', 16],
				's' , ['[]','float32',2],
				't' , ['[]','float32',2],
				'u' , ['[]','float32',2],
						];

			},
		}
	},

	///==================================================
	/// Chunk: pack, versions: 1, strucTab: 0x157DABC 
	///==================================================
	{
		name:'pack',
		versions:{


			// => Version: 0
			0:function(){
						this.MapVariant =[
				'file', Utils.getString16Reader(),
				'name', Utils.getString16Reader(),
				'token', Utils.getQWordReader(),
				'flags' , 'uint32',
						];

						this.__root=this.MapPackage =[
				'baseFile' , Utils.getFileNameReader(),
				'variants', Utils.getArrayReader(this.MapVariant),
				'flags' , 'uint32',
						];

			},
		}
	},

	///==================================================
	/// Chunk: area, versions: 5, strucTab: 0x157FEB0 
	///==================================================
	{
		name:'area',
		versions:{


			// => Version: 4, ReferencedFunction: 0xFFCBA0
			4:function(){
						this.PackMapAreaPolygonV4 =[
				'points', Utils.getArrayReader(['[]','float32',3]),
				'height' , 'float32',
						];

						this.PackMapAreaPortalV4 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
						];

						this.PackMapAreaVolumeV4 =[
				'portals', Utils.getArrayReader(this.PackMapAreaPortalV4),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'pointInterior' , ['[]','float32',3],
				'pointExterior' , ['[]','float32',3],
						];

						this.PackMapAreaV4 =[
				'token', Utils.getQWordReader(),
				'type' , 'uint8',
				'floor' , 'uint8',
				'flags' , 'uint32',
				'polygon', this.PackMapAreaPolygonV4,
				'volume', this.PackMapAreaVolumeV4,
						];

						this.PackMapAreaToolV4 =[
				'annotation', Utils.getString16Reader(),
				'renderOffset' , 'float32',
						];

						this.__root=this.PackMapAreasV4 =[
				'areas', Utils.getArrayReader(this.PackMapAreaV4),
				'areaTools', Utils.getArrayReader(this.PackMapAreaToolV4),
						];

			},

			// => Version: 3
			3:function(){
						this.PackMapAreaPolygonV3 =[
				'points', Utils.getArrayReader(['[]','float32',3]),
				'height' , 'float32',
						];

						this.PackMapAreaPortalV3 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
						];

						this.PackMapAreaVolumeV3 =[
				'portals', Utils.getArrayReader(this.PackMapAreaPortalV3),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'pointInterior' , ['[]','float32',3],
				'pointExterior' , ['[]','float32',3],
						];

						this.PackMapAreaV3 =[
				'token', Utils.getQWordReader(),
				'type' , 'uint8',
				'floor' , 'uint8',
				'flags' , 'uint32',
				'polygon', this.PackMapAreaPolygonV3,
				'volume', this.PackMapAreaVolumeV3,
						];

						this.PackMapAreaToolV3 =[
				'annotation', Utils.getString16Reader(),
				'renderOffset' , 'float32',
						];

						this.__root=this.PackMapAreasV3 =[
				'areas', Utils.getArrayReader(this.PackMapAreaV3),
				'areaTools', Utils.getArrayReader(this.PackMapAreaToolV3),
						];

			},

			// => Version: 2
			2:function(){
						this.PackMapAreaPolygonV2 =[
				'points', Utils.getArrayReader(['[]','float32',3]),
				'height' , 'float32',
						];

						this.PackMapAreaPortalV2 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
						];

						this.PackMapAreaVolumeV2 =[
				'portals', Utils.getArrayReader(this.PackMapAreaPortalV2),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'pointInterior' , ['[]','float32',3],
				'pointExterior' , ['[]','float32',3],
						];

						this.PackMapAreaV2 =[
				'token', Utils.getQWordReader(),
				'type' , 'uint8',
				'floor' , 'uint8',
				'flags' , 'uint32',
				'polygon', this.PackMapAreaPolygonV2,
				'volume', this.PackMapAreaVolumeV2,
						];

						this.PackMapAreaToolV2 =[
				'annotation', Utils.getString16Reader(),
						];

						this.__root=this.PackMapAreasV2 =[
				'areas', Utils.getArrayReader(this.PackMapAreaV2),
				'areaTools', Utils.getArrayReader(this.PackMapAreaToolV2),
						];

			},

			// => Version: 1, ReferencedFunction: 0xF6B280
			1:function(){
						this.PackMapAreaPolygonV1 =[
				'points', Utils.getArrayReader(['[]','float32',3]),
				'height' , 'float32',
						];

						this.PackMapAreaPortalV1 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
						];

						this.PackMapAreaVolumeV1 =[
				'portals', Utils.getArrayReader(this.PackMapAreaPortalV1),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'pointInterior' , ['[]','float32',3],
				'pointExterior' , ['[]','float32',3],
						];

						this.PackMapAreaV1 =[
				'token', Utils.getQWordReader(),
				'type' , 'uint8',
				'floor' , 'uint8',
				'polygon', this.PackMapAreaPolygonV1,
				'volume', this.PackMapAreaVolumeV1,
						];

						this.__root=this.PackMapAreasV1 =[
				'areas', Utils.getArrayReader(this.PackMapAreaV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PackMapAreaV0 =[
				'min' , ['[]','float32',3],
				'max' , ['[]','float32',3],
				'internal' , ['[]','float32',3],
				'external' , ['[]','float32',3],
				'token' , 'uint32',
				'flags' , 'uint32',
						];

						this.PackMapPortalV0 =[
				'portalVerts', Utils.getArrayReader(['[]','float32',3]),
						];

						this.__root=this.PackMapAreasV0 =[
				'areas', Utils.getArrayReader(this.PackMapAreaV0),
				'portals', Utils.getArrayReader(this.PackMapPortalV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: audi, versions: 9, strucTab: 0x1580178 
	///==================================================
	{
		name:'audi',
		versions:{


			// => Version: 8
			8:function(){
						this.PackMapAudioRegion =[
				'regionType' , 'uint32',
				'overrideMode' , 'uint32',
				'filenameSourceDay' , Utils.getFileNameReader(),
				'filenameAmbientDay' , Utils.getFileNameReader(),
				'filenameSourceNight' , Utils.getFileNameReader(),
				'filenameAmbientNight' , Utils.getFileNameReader(),
				'filenameInterior' , Utils.getFileNameReader(),
				'exteriorVolume' , 'float32',
				'priority' , 'uint32',
				'points', Utils.getArrayReader(['[]','float32',3]),
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',3],
				'fadeBand' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'guid', Utils.getQWordReader(),
				'flags' , 'uint32',
						];

						this.PackMapAudioRegionTool =[
				'annotation', Utils.getString16Reader(),
						];

						this.PackMapAudioDep =[
				'dependency' , Utils.getFileNameReader(),
				'flags' , 'uint32',
						];

						this.__root=this.MapAudio =[
				'filenameAmbientDaySurface' , Utils.getFileNameReader(),
				'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),
				'filenameAmbientNightSurface' , Utils.getFileNameReader(),
				'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),
				'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),
				'audioRegionTools', Utils.getArrayReader(this.PackMapAudioRegionTool),
				'audioDepArray', Utils.getArrayReader(this.PackMapAudioDep),
						];

			},

			// => Version: 7
			7:function(){
						this.PackMapAudioRegion =[
				'regionType' , 'uint32',
				'overrideMode' , 'uint32',
				'filenameSourceDay' , Utils.getFileNameReader(),
				'filenameAmbientDay' , Utils.getFileNameReader(),
				'filenameSourceNight' , Utils.getFileNameReader(),
				'filenameAmbientNight' , Utils.getFileNameReader(),
				'filenameInterior' , Utils.getFileNameReader(),
				'exteriorVolume' , 'float32',
				'priority' , 'uint32',
				'points', Utils.getArrayReader(['[]','float32',3]),
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',3],
				'fadeBand' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'guid', Utils.getQWordReader(),
				'flags' , 'uint32',
						];

						this.PackMapAudioRegionTool =[
				'annotation', Utils.getString16Reader(),
						];

						this.__root=this.MapAudio =[
				'filenameAmbientDaySurface' , Utils.getFileNameReader(),
				'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),
				'filenameAmbientNightSurface' , Utils.getFileNameReader(),
				'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),
				'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),
				'audioRegionTools', Utils.getArrayReader(this.PackMapAudioRegionTool),
						];

			},

			// => Version: 6
			6:function(){
						this.PackMapAudioRegion =[
				'regionType' , 'uint32',
				'overrideMode' , 'uint32',
				'filenameSourceDay' , Utils.getFileNameReader(),
				'filenameAmbientDay' , Utils.getFileNameReader(),
				'filenameSourceNight' , Utils.getFileNameReader(),
				'filenameAmbientNight' , Utils.getFileNameReader(),
				'filenameInterior' , Utils.getFileNameReader(),
				'exteriorVolume' , 'float32',
				'priority' , 'uint32',
				'points', Utils.getArrayReader(['[]','float32',3]),
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',3],
				'fadeBand' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'guid', Utils.getQWordReader(),
				'flags' , 'uint32',
						];

						this.__root=this.MapAudio =[
				'filenameAmbientDaySurface' , Utils.getFileNameReader(),
				'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),
				'filenameAmbientNightSurface' , Utils.getFileNameReader(),
				'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),
				'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),
						];

			},

			// => Version: 5
			5:function(){
						this.PackMapAudioRegion =[
				'regionType' , 'uint32',
				'overrideMode' , 'uint32',
				'filenameSourceDay' , Utils.getFileNameReader(),
				'filenameAmbientDay' , Utils.getFileNameReader(),
				'filenameSourceNight' , Utils.getFileNameReader(),
				'filenameAmbientNight' , Utils.getFileNameReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',3],
				'fadeBand' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'guid', Utils.getQWordReader(),
				'flags' , 'uint32',
						];

						this.__root=this.MapAudio =[
				'filenameAmbientDaySurface' , Utils.getFileNameReader(),
				'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),
				'filenameAmbientNightSurface' , Utils.getFileNameReader(),
				'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),
				'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),
						];

			},

			// => Version: 4, ReferencedFunction: 0xFFB450
			4:function(){
						this.PackMapAudioRegion =[
				'regionType' , 'uint32',
				'overrideMode' , 'uint32',
				'filenameSourceDay' , Utils.getFileNameReader(),
				'filenameAmbientDay' , Utils.getFileNameReader(),
				'filenameMusicDay' , Utils.getFileNameReader(),
				'filenameSourceNight' , Utils.getFileNameReader(),
				'filenameAmbientNight' , Utils.getFileNameReader(),
				'filenameMusicNight' , Utils.getFileNameReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',3],
				'fadeBand' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'guid', Utils.getQWordReader(),
						];

						this.__root=this.MapAudio =[
				'filenameAmbientDaySurface' , Utils.getFileNameReader(),
				'filenameMusicDaySurface' , Utils.getFileNameReader(),
				'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),
				'filenameMusicDayUnderwater' , Utils.getFileNameReader(),
				'filenameAmbientNightSurface' , Utils.getFileNameReader(),
				'filenameMusicNightSurface' , Utils.getFileNameReader(),
				'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),
				'filenameMusicNightUnderwater' , Utils.getFileNameReader(),
				'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),
						];

			},

			// => Version: 3, ReferencedFunction: 0xFFB340
			3:function(){
						this.PackMapAudioRegion =[
				'regionType' , 'uint32',
				'overrideMode' , 'uint32',
				'filenameSourceDay' , Utils.getFileNameReader(),
				'filenameAmbientDay' , Utils.getFileNameReader(),
				'filenameMusicDay' , Utils.getFileNameReader(),
				'filenameSourceNight' , Utils.getFileNameReader(),
				'filenameAmbientNight' , Utils.getFileNameReader(),
				'filenameMusicNight' , Utils.getFileNameReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',3],
				'fadeBand' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
						];

						this.__root=this.MapAudio =[
				'filenameAmbientDaySurface' , Utils.getFileNameReader(),
				'filenameMusicDaySurface' , Utils.getFileNameReader(),
				'filenameAmbientDayUnderwater' , Utils.getFileNameReader(),
				'filenameMusicDayUnderwater' , Utils.getFileNameReader(),
				'filenameAmbientNightSurface' , Utils.getFileNameReader(),
				'filenameMusicNightSurface' , Utils.getFileNameReader(),
				'filenameAmbientNightUnderwater' , Utils.getFileNameReader(),
				'filenameMusicNightUnderwater' , Utils.getFileNameReader(),
				'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),
						];

			},

			// => Version: 2
			2:function(){
						this.PackMapAudioRegion =[
				'regionType' , 'uint32',
				'overrideMode' , 'uint32',
				'filenameSource' , Utils.getFileNameReader(),
				'filenameAmbient' , Utils.getFileNameReader(),
				'filenameMusic' , Utils.getFileNameReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',3],
				'fadeBand' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
						];

						this.__root=this.MapAudio =[
				'globalAmbientScriptFilename' , Utils.getFileNameReader(),
				'globalMusicScriptFilename' , Utils.getFileNameReader(),
				'globalAmbientUnderwaterScriptFilename' , Utils.getFileNameReader(),
				'globalMusicUnderwaterScriptFilename' , Utils.getFileNameReader(),
				'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),
						];

			},

			// => Version: 1
			1:function(){
						this.PackMapAudioRegion =[
				'regionType' , 'uint32',
				'overrideMode' , 'uint32',
				'filenameSource' , Utils.getFileNameReader(),
				'filenameAmbient' , Utils.getFileNameReader(),
				'filenameMusic' , Utils.getFileNameReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',3],
				'fadeBand' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
						];

						this.__root=this.MapAudio =[
				'globalAmbientScriptFilename' , Utils.getFileNameReader(),
				'globalMusicScriptFilename' , Utils.getFileNameReader(),
				'audioRegions', Utils.getArrayReader(this.PackMapAudioRegion),
						];

			},

			// => Version: 0
			0:function(){
						this.__root=this.MapAudio =[
				'globalAmbientScriptFilename' , Utils.getFileNameReader(),
				'globalMusicScriptFilename' , Utils.getFileNameReader(),
						];

			},
		}
	},

	///==================================================
	/// Chunk: bloc, versions: 1, strucTab: 0x1581298 
	///==================================================
	{
		name:'bloc',
		versions:{


			// => Version: 0
			0:function(){
						this.PackMapBlockRecord =[
				'filename' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapBlock =[
				'blockDims', ['[]', 'uint32', 2],
				'blockRecordArray', Utils.getArrayReader(this.PackMapBlockRecord),
						];

			},
		}
	},

	///==================================================
	/// Chunk: cng, versions: 1, strucTab: 0x1580D9C 
	///==================================================
	{
		name:'cng',
		versions:{


			// => Version: 0
			0:function(){
						this.PackMapCoarseNavGraphNodeV0 =[
				'materialId' , 'uint32',
				'bottomLeftBound' , ['[]','float32',3],
				'topRightBound' , ['[]','float32',3],
				'centroid' , ['[]','float32',3],
				'faces', Utils.getArrayReader('uint32'),
						];

						this.PackMapCoarseNavGraphConnectionEdgeV0 =[
				'edgeStart' , ['[]','float32',3],
				'edgeEnd' , ['[]','float32',3],
						];

						this.PackMapCoarseNavGraphConnectionV0 =[
				'targetSectionUid' , 'uint32',
				'targetNodeIndex' , 'uint32',
				'edges', Utils.getArrayReader(this.PackMapCoarseNavGraphConnectionEdgeV0),
						];

						this.PackMapCoarseNavGraphNodeConnectionsV0 =[
				'nodeIndex' , 'uint32',
				'connections', Utils.getArrayReader(this.PackMapCoarseNavGraphConnectionV0),
						];

						this.PackMapCoarseNavGraphSectionV0 =[
				'sectionUid' , 'uint32',
				'nodes', Utils.getArrayReader(this.PackMapCoarseNavGraphNodeV0),
				'nodeConnections', Utils.getArrayReader(this.PackMapCoarseNavGraphNodeConnectionsV0),
						];

						this.__root=this.PackMapCoarseNavGraphV0 =[
				'sections', Utils.getArrayReader(this.PackMapCoarseNavGraphSectionV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: cube, versions: 4, strucTab: 0x15813D8 
	///==================================================
	{
		name:'cube',
		versions:{


			// => Version: 3
			3:function(){
						this.PackMapCubeMapSampleV3 =[
				'position' , ['[]','float32',3],
				'filenameDayDefault' , Utils.getFileNameReader(),
				'filenameNightDefault' , Utils.getFileNameReader(),
				'filenameDayScript' , Utils.getFileNameReader(),
				'filenameNightScript' , Utils.getFileNameReader(),
				'envID', Utils.getQWordReader(),
						];

						this.PackMapCubeMapParamsV3 =[
				'modulateColor' , 'uint32',
				'brightness' , 'float32',
				'contrast' , 'float32',
				'blurPasses' , 'uint32',
				'envVolume', Utils.getString16Reader(),
						];

						this.__root=this.PackMapCubeMapV3 =[
				'sampleArray', Utils.getArrayReader(this.PackMapCubeMapSampleV3),
				'paramsArray', Utils.getArrayReader(this.PackMapCubeMapParamsV3),
						];

			},

			// => Version: 2, ReferencedFunction: 0x5EABE0
			2:function(){
						this.PackMapCubeMapSampleV2 =[
				'position' , ['[]','float32',3],
				'filenameDayDefault' , Utils.getFileNameReader(),
				'filenameNightDefault' , Utils.getFileNameReader(),
				'filenameDayScript' , Utils.getFileNameReader(),
				'filenameNightScript' , Utils.getFileNameReader(),
						];

						this.PackMapCubeMapParamsV2 =[
				'modulateColor' , 'uint32',
				'brightness' , 'float32',
				'contrast' , 'float32',
				'blurPasses' , 'uint32',
						];

						this.__root=this.PackMapCubeMapV2 =[
				'sampleArray', Utils.getArrayReader(this.PackMapCubeMapSampleV2),
				'paramsArray', Utils.getArrayReader(this.PackMapCubeMapParamsV2),
						];

			},

			// => Version: 1, ReferencedFunction: 0xFFCB60
			1:function(){
						this.PackMapCubeMapSampleV1 =[
				'position' , ['[]','float32',3],
				'flags' , 'uint32',
				'dayPtr', Utils.getArrayReader('uint8'),
				'nightPtr', Utils.getArrayReader('uint8'),
						];

						this.PackMapCubeMapParamsV1 =[
				'modulateColor' , 'uint32',
				'brightness' , 'float32',
				'contrast' , 'float32',
				'blurPasses' , 'uint32',
						];

						this.__root=this.PackMapCubeMapV1 =[
				'sampleArray', Utils.getArrayReader(this.PackMapCubeMapSampleV1),
				'paramsArray', Utils.getArrayReader(this.PackMapCubeMapParamsV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PackMapCubeMapSampleV0 =[
				'position' , ['[]','float32',3],
				'flags' , 'uint32',
				'dataPtr', Utils.getArrayReader('uint8'),
						];

						this.PackMapCubeMapParamsV0 =[
				'modulateColor' , 'uint32',
				'brightness' , 'float32',
				'contrast' , 'float32',
				'blurPasses' , 'uint32',
						];

						this.__root=this.PackMapCubeMapV0 =[
				'sampleArray', Utils.getArrayReader(this.PackMapCubeMapSampleV0),
				'paramsArray', Utils.getArrayReader(this.PackMapCubeMapParamsV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: havk, versions: 15, strucTab: 0x1580940 
	///==================================================
	{
		name:'havk',
		versions:{


			// => Version: 14, ReferencedFunction: 0xFF70D0
			14:function(){
						this.PackMoppType =[
				'moppData', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideCollisionV14 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'surfaces', Utils.getArrayReader('uint16'),
				'moppCodeData', this.PackMoppType,
						];

						this.PackMapCollideBlockerV14 =[
				'vertices', Utils.getArrayReader(['[]','float32',3]),
						];

						this.PackMapCollideNavMeshV14 =[
				'navMesh', Utils.getArrayReader('uint8'),
				'graph', Utils.getArrayReader('uint8'),
				'mediator', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideAnimationV14 =[
				'sequence', Utils.getQWordReader(),
				'collisionIndices', Utils.getArrayReader('uint32'),
				'blockerIndices', Utils.getArrayReader('uint32'),
						];

						this.PackMapCollideGeometryV14 =[
				'quantizedExtents' , 'uint8',
				'animations', Utils.getArrayReader('uint32'),
				'navMeshIndex', 'uint16',
						];

						this.PackMapCollideModelObsV14 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelPropV14 =[
				'token', Utils.getQWordReader(),
				'sequence', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelZoneV14 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.__root=this.PackMapCollideV14 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'collisions', Utils.getArrayReader(this.PackMapCollideCollisionV14),
				'blockers', Utils.getArrayReader(this.PackMapCollideBlockerV14),
				'navMeshes', Utils.getArrayReader(this.PackMapCollideNavMeshV14),
				'animations', Utils.getArrayReader(this.PackMapCollideAnimationV14),
				'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV14),
				'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV14),
				'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV14),
				'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV14),
						];

			},

			// => Version: 13, ReferencedFunction: 0xFF6E30
			13:function(){
						this.PackMapCollideCollisionV13 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'surfaces', Utils.getArrayReader('uint16'),
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideBlockerV13 =[
				'vertices', Utils.getArrayReader(['[]','float32',3]),
						];

						this.PackMapCollideAnimationV13 =[
				'sequence', Utils.getQWordReader(),
				'collisionIndices', Utils.getArrayReader('uint32'),
				'blockerIndices', Utils.getArrayReader('uint32'),
						];

						this.PackMapCollideGeometryV13 =[
				'quantizedExtents' , 'uint8',
				'animations', Utils.getArrayReader('uint32'),
						];

						this.PackMapCollideModelObsV13 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelPropV13 =[
				'token', Utils.getQWordReader(),
				'sequence', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelZoneV13 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.__root=this.PackMapCollideV13 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'collisions', Utils.getArrayReader(this.PackMapCollideCollisionV13),
				'blockers', Utils.getArrayReader(this.PackMapCollideBlockerV13),
				'animations', Utils.getArrayReader(this.PackMapCollideAnimationV13),
				'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV13),
				'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV13),
				'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV13),
				'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV13),
						];

			},

			// => Version: 12
			12:function(){
						this.PackMapCollideMeshV12 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'surfaces', Utils.getArrayReader('uint16'),
				'moppCodeScale' , 'float32',
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideMeshRefV12 =[
				'sequence', Utils.getQWordReader(),
				'meshIndex' , 'uint32',
						];

						this.PackMapCollideGeometryV12 =[
				'quantizedExtents' , 'uint8',
				'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV12),
						];

						this.PackMapCollideModelObsV12 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelPropV12 =[
				'token', Utils.getQWordReader(),
				'sequence', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelZoneV12 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideAiChunkV12 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapCollideV12 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'meshes', Utils.getArrayReader(this.PackMapCollideMeshV12),
				'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV12),
				'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV12),
				'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV12),
				'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV12),
				'aiChunkDims', ['[]', 'uint32', 2],
				'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV12),
						];

			},

			// => Version: 11
			11:function(){
						this.PackMapCollideMeshV11 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeScale' , 'float32',
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideMeshRefV11 =[
				'sequence', Utils.getQWordReader(),
				'meshIndex' , 'uint32',
						];

						this.PackMapCollideGeometryV11 =[
				'quantizedExtents' , 'uint8',
				'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV11),
						];

						this.PackMapCollideModelObsV11 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelPropV11 =[
				'token', Utils.getQWordReader(),
				'sequence', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelZoneV11 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideAiChunkV11 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapCollideV11 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'meshes', Utils.getArrayReader(this.PackMapCollideMeshV11),
				'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV11),
				'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV11),
				'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV11),
				'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV11),
				'aiChunkDims', ['[]', 'uint32', 2],
				'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV11),
						];

			},

			// => Version: 10
			10:function(){
						this.PackMapCollideMeshV10 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeScale' , 'float32',
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideMeshRefV10 =[
				'sequence', Utils.getQWordReader(),
				'meshIndex' , 'uint32',
						];

						this.PackMapCollideGeometryV10 =[
				'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV10),
						];

						this.PackMapCollideModelObsV10 =[
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelPropV10 =[
				'token', Utils.getQWordReader(),
				'sequence', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelZoneV10 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideAiChunkV10 =[
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapCollideV10 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'meshes', Utils.getArrayReader(this.PackMapCollideMeshV10),
				'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV10),
				'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV10),
				'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV10),
				'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV10),
				'aiBoundaryMin' , ['[]','float32',3],
				'aiBoundaryMax' , ['[]','float32',3],
				'aiChunkDims', ['[]', 'uint32', 2],
				'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV10),
						];

			},

			// => Version: 9
			9:function(){
						this.PackMapCollideMeshV9 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeScale' , 'float32',
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideMeshRefV9 =[
				'sequence', Utils.getQWordReader(),
				'meshIndex' , 'uint32',
						];

						this.PackMapCollideGeometryV9 =[
				'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV9),
						];

						this.PackMapCollideModelObsV9 =[
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelPropV9 =[
				'token', Utils.getQWordReader(),
				'sequence', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelZoneV9 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideAiChunkV9 =[
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapCollideV9 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'meshes', Utils.getArrayReader(this.PackMapCollideMeshV9),
				'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV9),
				'obsModels', Utils.getArrayReader(this.PackMapCollideModelObsV9),
				'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV9),
				'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV9),
				'aiBoundaryMin' , ['[]','float32',3],
				'aiBoundaryMax' , ['[]','float32',3],
				'aiChunkDims', ['[]', 'uint32', 2],
				'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV9),
						];

			},

			// => Version: 8, ReferencedFunction: 0xFF7140
			8:function(){
						this.PackMapCollideMeshV8 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeScale' , 'float32',
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideMeshRefV8 =[
				'sequence', Utils.getQWordReader(),
				'meshIndex' , 'uint32',
						];

						this.PackMapCollideGeometryV8 =[
				'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV8),
						];

						this.PackMapCollideModelPropV8 =[
				'token', Utils.getQWordReader(),
				'sequence', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelZoneV8 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideAiChunkV8 =[
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapCollideV8 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'meshes', Utils.getArrayReader(this.PackMapCollideMeshV8),
				'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV8),
				'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV8),
				'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV8),
				'aiBoundaryMin' , ['[]','float32',3],
				'aiBoundaryMax' , ['[]','float32',3],
				'aiChunkDims', ['[]', 'uint32', 2],
				'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV8),
						];

			},

			// => Version: 7
			7:function(){
						this.PackMapCollideMoppCodeV7 =[
				'cookedData', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideMeshSizeV7 =[
				'scale' , 'float32',
				'moppCodeIndex' , 'uint32',
						];

						this.PackMapCollideMeshV7 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'sizes', Utils.getArrayReader(this.PackMapCollideMeshSizeV7),
						];

						this.PackMapCollideMeshRefV7 =[
				'sequence', Utils.getQWordReader(),
				'meshIndex' , 'uint32',
						];

						this.PackMapCollideGeometryV7 =[
				'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV7),
						];

						this.PackMapCollideModelPropV7 =[
				'token', Utils.getQWordReader(),
				'sequence', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelZoneV7 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideAiChunkV7 =[
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapCollideV7 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'moppCodes', Utils.getArrayReader(this.PackMapCollideMoppCodeV7),
				'meshes', Utils.getArrayReader(this.PackMapCollideMeshV7),
				'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV7),
				'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV7),
				'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV7),
				'aiBoundaryMin' , ['[]','float32',3],
				'aiBoundaryMax' , ['[]','float32',3],
				'aiChunkDims', ['[]', 'uint32', 2],
				'aiChunks', Utils.getArrayReader(this.PackMapCollideAiChunkV7),
						];

			},

			// => Version: 6
			6:function(){
						this.PackMapCollideMoppCodeV6 =[
				'cookedData', Utils.getArrayReader('uint8'),
						];

						this.PackMapCollideMeshSizeV6 =[
				'scale' , 'float32',
				'moppCodeIndex' , 'uint32',
						];

						this.PackMapCollideMeshV6 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'sizes', Utils.getArrayReader(this.PackMapCollideMeshSizeV6),
						];

						this.PackMapCollideMeshRefV6 =[
				'sequence', Utils.getQWordReader(),
				'meshIndex' , 'uint32',
						];

						this.PackMapCollideGeometryV6 =[
				'meshRefs', Utils.getArrayReader(this.PackMapCollideMeshRefV6),
						];

						this.PackMapCollideModelPropV6 =[
				'token', Utils.getQWordReader(),
				'sequence', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapCollideModelZoneV6 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.__root=this.PackMapCollideV6 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'moppCodes', Utils.getArrayReader(this.PackMapCollideMoppCodeV6),
				'meshes', Utils.getArrayReader(this.PackMapCollideMeshV6),
				'geometries', Utils.getArrayReader(this.PackMapCollideGeometryV6),
				'propModels', Utils.getArrayReader(this.PackMapCollideModelPropV6),
				'zoneModels', Utils.getArrayReader(this.PackMapCollideModelZoneV6),
						];

			},
		}
	},

	///==================================================
	/// Chunk: env, versions: 76, strucTab: 0x157D2C0 
	///==================================================
	{
		name:'env',
		versions:{


			// => Version: 75, ReferencedFunction: 0xFF8EA0
			75:function(){
						this.PackMapEnvDataLightV75 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV75 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV75),
				'shadowInfluence' , 'float32',
				'backlightColor', ['[]', 'uint8', 3],
				'backlightIntensity' , 'float32',
						];

						this.PackMapEnvDataLightingCharV46 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV46 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV46),
						];

						this.PackMapEnvDataLayerAttributesV75 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
				'reserved' , 'uint32',
						];

						this.PackMapEnvDataLayerV75 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV75),
				'name', Utils.getString16Reader(),
				'reserved' , 'uint32',
						];

						this.PackMapEnvDataCloudsV75 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV75),
						];

						this.PackMapEnvDataColoredLightRingsV46 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectExV46 =[
				'dummy' , 'uint32',
						];

						this.PackMapEnvDataEffectV75 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'ssaoAmount' , 'float32',
				'ssaoBrighten' , 'float32',
				'ssaoContrast' , 'float32',
				'ssaoSunScale' , 'float32',
				'flags' , 'uint32',
				'clutTexturePath' , Utils.getFileNameReader(),
				'ext', Utils.getPointerReader(this.PackMapEnvDataEffectExV46),
						];

						this.PackMapEnvDataHazeV75 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV75 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS' , 'float32',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
				'reserved' , 'uint32',
						];

						this.PackMapEnvDataPFieldCutoutV46 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV75 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvLensFlareAtomV46 =[
				'rows' , 'uint32',
				'columns' , 'uint32',
				'start' , 'uint32',
				'fps' , 'float32',
				'color' , ['[]','uint8',4],
				'offset' , ['[]','float32',2],
				'scale' , ['[]','float32',2],
				'baseRotation' , 'float32',
				'cameraRotation' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvLensFlareTextureV46 =[
				'texture' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataShaderConstantV46 =[
				'token' , 'uint32',
				'value' , ['[]','float32',4],
						];

						this.PackMapEnvLensFlareV46 =[
				'atoms', Utils.getArrayReader(this.PackMapEnvLensFlareAtomV46),
				'textures', Utils.getArrayReader(this.PackMapEnvLensFlareTextureV46),
				'material' , Utils.getFileNameReader(),
				'fadeBand' , ['[]','float32',2],
				'reverseFadeBand' , ['[]','float32',2],
				'opacityCoeff' , 'float32',
				'flags' , 'uint8',
				'constants', Utils.getArrayReader(this.PackMapEnvDataShaderConstantV46),
						];

						this.PackMapEnvDataSkyCardAttributesExV46 =[
				'dummy' , 'uint32',
						];

						this.PackMapEnvDataSkyCardAttributesV75 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
				'lensFlare', Utils.getPointerReader(this.PackMapEnvLensFlareV46),
				'ext', Utils.getPointerReader(this.PackMapEnvDataSkyCardAttributesExV46),
						];

						this.PackMapEnvDataShaderTextureV46 =[
				'filename' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackEnvDataSkyCardAnimationV46 =[
				'textureAnimTranslation' , ['[]','float32',2],
				'textureAnimScaleRangeX' , ['[]','float32',2],
				'textureAnimScaleRangeY' , ['[]','float32',2],
				'textureAnimScaleSpeed' , ['[]','float32',2],
				'textureAnimRotation' , 'float32',
				'texCoords' , 'uint32',
						];

						this.PackMapEnvDataSkycardFlipbookV46 =[
				'rows' , 'uint32',
				'columns' , 'uint32',
				'start' , 'uint32',
				'count' , 'uint32',
				'fps' , 'float32',
						];

						this.PackMapEnvDataSkyCardMaterialV46 =[
				'filename' , Utils.getFileNameReader(),
				'constants', Utils.getArrayReader(this.PackMapEnvDataShaderConstantV46),
				'textures', Utils.getArrayReader(this.PackMapEnvDataShaderTextureV46),
				'textureAnimation', this.PackEnvDataSkyCardAnimationV46,
				'flipbook', this.PackMapEnvDataSkycardFlipbookV46,
						];

						this.PackMapEnvDataSkyCardExV46 =[
				'dummy' , 'uint32',
						];

						this.PackMapEnvDataSkyCardV75 =[
				'day', this.PackMapEnvDataSkyCardAttributesV75,
				'night', this.PackMapEnvDataSkyCardAttributesV75,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
				'location' , ['[]','float32',3],
				'material', Utils.getPointerReader(this.PackMapEnvDataSkyCardMaterialV46),
				'ext', Utils.getPointerReader(this.PackMapEnvDataSkyCardExV46),
						];

						this.PackMapEnvDataSkyCardsV75 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV75),
						];

						this.PackMapEnvDataSpawnModelDataV46 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV46 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV46),
						];

						this.PackMapEnvDataSpawnGroupsV46 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV46),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV75 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV75 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataAudioV46 =[
				'token', Utils.getQWordReader(),
						];

						this.PackMapEnvDataBaseEx2V46 =[
				'dummy' , 'uint32',
						];

						this.PackMapEnvDataBaseExV46 =[
				'ext2', Utils.getPointerReader(this.PackMapEnvDataBaseEx2V46),
				'brightTime' , 'float32',
				'dimTime' , 'float32',
				'darkCoeff' , 'float32',
				'darkExp' , 'float32',
				'darkMin' , 'float32',
				'darkMax' , 'float32',
				'brightMin' , 'float32',
				'brightMax' , 'float32',
				'brightScale' , 'float32',
				'darkScale' , 'float32',
				'waterReflectionParams' , ['[]','float32',4],
						];

						this.PackMapEnvDataShapeV46 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV75 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV75),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV46),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV75),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV46),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV75),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV75),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV75),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV46),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV75),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV75),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV46),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV75),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV75),
				'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV46),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'flags' , 'uint32',
				'ext', Utils.getPointerReader(this.PackMapEnvDataBaseExV46),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV46),
						];

						this.PackMapEnvDataSkyModeTexV75 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV75 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV75),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV46),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV75),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV46),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV75),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV75),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV75),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV46),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV75),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV75),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV46),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV75),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV75),
				'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV46),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'flags' , 'uint32',
				'ext', Utils.getPointerReader(this.PackMapEnvDataBaseExV46),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV75),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV75 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV75),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV75),
						];

			},

			// => Version: 74
			74:function(){
						this.PackMapEnvDataLightV74 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV74 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV74),
				'shadowInfluence' , 'float32',
				'backlightColor', ['[]', 'uint8', 3],
				'backlightIntensity' , 'float32',
						];

						this.PackMapEnvDataLightingCharV45 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV45 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV45),
						];

						this.PackMapEnvDataLayerAttributesV74 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
				'reserved' , 'uint32',
						];

						this.PackMapEnvDataLayerV74 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV74),
				'name', Utils.getString16Reader(),
				'reserved' , 'uint32',
						];

						this.PackMapEnvDataCloudsV74 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV74),
						];

						this.PackMapEnvDataColoredLightRingsV45 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV74 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV74 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV74 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS' , 'float32',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
				'reserved' , 'uint32',
						];

						this.PackMapEnvDataPFieldCutoutV45 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV74 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV74 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV74 =[
				'day', this.PackMapEnvDataSkyCardAttributesV74,
				'night', this.PackMapEnvDataSkyCardAttributesV74,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV74 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV74),
						];

						this.PackMapEnvDataSpawnModelDataV45 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV45 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV45),
						];

						this.PackMapEnvDataSpawnGroupsV45 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV45),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV74 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV74 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataAudioV45 =[
				'token', Utils.getQWordReader(),
						];

						this.PackMapEnvDataShapeV45 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV74 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV74),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV45),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV74),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV45),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV74),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV74),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV74),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV45),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV74),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV74),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV45),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV74),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV74),
				'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV45),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'reserved', Utils.getString16Reader(),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV45),
						];

						this.PackMapEnvDataSkyModeTexV74 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV74 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV74),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV45),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV74),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV45),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV74),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV74),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV74),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV45),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV74),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV74),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV45),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV74),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV74),
				'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV45),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'reserved', Utils.getString16Reader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV74),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV74 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV74),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV74),
						];

			},

			// => Version: 73
			73:function(){
						this.PackMapEnvDataLightV73 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV73 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV73),
				'shadowInfluence' , 'float32',
				'backlightColor', ['[]', 'uint8', 3],
				'backlightIntensity' , 'float32',
						];

						this.PackMapEnvDataLightingCharV44 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV44 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV44),
						];

						this.PackMapEnvDataLayerAttributesV73 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV73 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV73),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV73 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV73),
						];

						this.PackMapEnvDataColoredLightRingsV44 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV73 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV73 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV73 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS' , 'float32',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV44 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV73 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV73 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV73 =[
				'day', this.PackMapEnvDataSkyCardAttributesV73,
				'night', this.PackMapEnvDataSkyCardAttributesV73,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV73 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV73),
						];

						this.PackMapEnvDataSpawnModelDataV44 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV44 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV44),
						];

						this.PackMapEnvDataSpawnGroupsV44 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV44),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV73 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV73 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataAudioV44 =[
				'token', Utils.getQWordReader(),
						];

						this.PackMapEnvDataShapeV44 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV73 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV73),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV44),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV73),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV44),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV73),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV73),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV73),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV44),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV73),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV73),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV44),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV73),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV73),
				'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV44),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV44),
						];

						this.PackMapEnvDataSkyModeTexV73 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV73 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV73),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV44),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV73),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV44),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV73),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV73),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV73),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV44),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV73),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV73),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV44),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV73),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV73),
				'audio', Utils.getRefArrayReader(this.PackMapEnvDataAudioV44),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV73),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV73 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV73),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV73),
						];

			},

			// => Version: 72
			72:function(){
						this.PackMapEnvDataLightV72 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV72 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV72),
				'shadowInfluence' , 'float32',
				'backlightColor', ['[]', 'uint8', 3],
				'backlightIntensity' , 'float32',
						];

						this.PackMapEnvDataLightingCharV43 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV43 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV43),
						];

						this.PackMapEnvDataLayerAttributesV72 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV72 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV72),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV72 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV72),
						];

						this.PackMapEnvDataColoredLightRingsV43 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV72 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV72 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV72 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS' , 'float32',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV43 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV72 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV72 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV72 =[
				'day', this.PackMapEnvDataSkyCardAttributesV72,
				'night', this.PackMapEnvDataSkyCardAttributesV72,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV72 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV72),
						];

						this.PackMapEnvDataSpawnModelDataV43 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV43 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV43),
						];

						this.PackMapEnvDataSpawnGroupsV43 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV43),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV72 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV72 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataShapeV43 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV72 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV72),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV43),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV72),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV43),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV72),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV72),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV72),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV43),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV72),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV72),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV43),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV72),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV72),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'audioToken', Utils.getQWordReader(),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV43),
						];

						this.PackMapEnvDataSkyModeTexV72 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV72 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV72),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV43),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV72),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV43),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV72),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV72),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV72),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV43),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV72),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV72),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV43),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV72),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV72),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'audioToken', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV72),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV72 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV72),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV72),
						];

			},

			// => Version: 71, ReferencedFunction: 0xFF8E00
			71:function(){
						this.PackMapEnvDataLightV71 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV71 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV71),
				'shadowInfluence' , 'float32',
				'backlightColor', ['[]', 'uint8', 3],
				'backlightIntensity' , 'float32',
						];

						this.PackMapEnvDataLightingCharV42 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV42 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV42),
						];

						this.PackMapEnvDataLayerAttributesV71 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV71 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV71),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV71 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV71),
						];

						this.PackMapEnvDataColoredLightRingsV42 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV71 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV71 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV71 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS' , 'float32',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV42 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV71 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV71 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV71 =[
				'day', this.PackMapEnvDataSkyCardAttributesV71,
				'night', this.PackMapEnvDataSkyCardAttributesV71,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV71 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV71),
						];

						this.PackMapEnvDataSpawnModelDataV42 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV42 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV42),
						];

						this.PackMapEnvDataSpawnGroupsV42 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV42),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV71 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV71 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataShapeV42 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV71 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV71),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV42),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV71),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV42),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV71),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV71),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV71),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV42),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV71),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV71),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV42),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV71),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV71),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV42),
						];

						this.PackMapEnvDataSkyModeTexV71 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV71 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV71),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV42),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV71),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV42),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV71),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV71),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV71),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV42),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV71),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV71),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV42),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV71),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV71),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV71),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV71 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV71),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV71),
						];

			},

			// => Version: 70, ReferencedFunction: 0xFF8DB0
			70:function(){
						this.PackMapEnvDataLightV70 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV70 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV70),
				'shadowInfluence' , 'float32',
						];

						this.PackMapEnvDataLightingCharV41 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV41 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV41),
						];

						this.PackMapEnvDataLayerAttributesV70 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV70 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV70),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV70 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV70),
						];

						this.PackMapEnvDataColoredLightRingsV41 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV70 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV70 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV70 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS' , 'float32',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV41 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV70 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV70 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV70 =[
				'day', this.PackMapEnvDataSkyCardAttributesV70,
				'night', this.PackMapEnvDataSkyCardAttributesV70,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV70 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV70),
						];

						this.PackMapEnvDataSpawnModelDataV41 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV41 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV41),
						];

						this.PackMapEnvDataSpawnGroupsV41 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV41),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV70 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV70 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataShapeV41 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV70 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV70),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV41),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV70),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV41),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV70),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV70),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV70),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV41),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV70),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV70),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV41),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV70),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV70),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV41),
						];

						this.PackMapEnvDataSkyModeTexV70 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV70 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV70),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV41),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV70),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV41),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV70),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV70),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV70),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV41),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV70),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV70),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV41),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV70),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV70),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV70),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV70 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV70),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV70),
						];

			},

			// => Version: 69
			69:function(){
						this.PackMapEnvDataLightV69 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV69 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV69),
				'shadowInfluence' , 'float32',
						];

						this.PackMapEnvDataLightingCharV40 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV40 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV40),
						];

						this.PackMapEnvDataLayerAttributesV69 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV69 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV69),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV69 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV69),
						];

						this.PackMapEnvDataColoredLightRingsV40 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV69 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV69 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV69 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV40 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV69 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV69 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV69 =[
				'day', this.PackMapEnvDataSkyCardAttributesV69,
				'night', this.PackMapEnvDataSkyCardAttributesV69,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV69 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV69),
						];

						this.PackMapEnvDataSpawnModelDataV40 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV40 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV40),
						];

						this.PackMapEnvDataSpawnGroupsV40 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV40),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV69 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV69 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataShapeV40 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV69 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV69),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV40),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV69),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV40),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV69),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV69),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV69),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV40),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV69),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV69),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV40),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV69),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV69),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV40),
						];

						this.PackMapEnvDataSkyModeTexV69 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV69 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV69),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV40),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV69),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV40),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV69),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV69),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV69),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV40),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV69),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV69),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV40),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV69),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV69),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV69),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV69 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV69),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV69),
						];

			},

			// => Version: 68, ReferencedFunction: 0xFF8C90
			68:function(){
						this.PackMapEnvDataLightV68 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV68 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV68),
				'shadowInfluence' , 'float32',
				'backlight', Utils.getPointerReader(this.PackMapEnvDataLightV68),
						];

						this.PackMapEnvDataLightingCharV39 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV39 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV39),
						];

						this.PackMapEnvDataLayerAttributesV68 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV68 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV68),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV68 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV68),
						];

						this.PackMapEnvDataColoredLightRingsV39 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV68 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV68 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV68 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV39 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV68 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV68 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV68 =[
				'day', this.PackMapEnvDataSkyCardAttributesV68,
				'night', this.PackMapEnvDataSkyCardAttributesV68,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV68 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV68),
						];

						this.PackMapEnvDataSpawnModelDataV39 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV39 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV39),
						];

						this.PackMapEnvDataSpawnGroupsV39 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV39),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV68 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV68 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataShapeV39 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV68 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV68),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV39),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV68),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV39),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV68),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV68),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV68),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV39),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV68),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV68),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV39),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV68),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV68),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV39),
						];

						this.PackMapEnvDataSkyModeTexV68 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV68 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV68),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV39),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV68),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV39),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV68),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV68),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV68),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV39),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV68),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV68),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV39),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV68),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV68),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV68),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV68 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV68),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV68),
						];

			},

			// => Version: 67
			67:function(){
						this.PackMapEnvDataLightV67 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV67 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV67),
				'shadowInfluence' , 'float32',
						];

						this.PackMapEnvDataLightingCharV38 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV38 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV38),
						];

						this.PackMapEnvDataLayerAttributesV67 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV67 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV67),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV67 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV67),
						];

						this.PackMapEnvDataColoredLightRingsV38 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV67 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV67 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV67 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV38 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV67 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV67 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV67 =[
				'day', this.PackMapEnvDataSkyCardAttributesV67,
				'night', this.PackMapEnvDataSkyCardAttributesV67,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV67 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV67),
						];

						this.PackMapEnvDataSpawnModelDataV38 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV38 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV38),
						];

						this.PackMapEnvDataSpawnGroupsV38 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV38),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV67 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV67 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataShapeV38 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV67 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV67),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV38),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV67),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV38),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV67),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV67),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV67),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV38),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV67),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV67),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV38),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV67),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV67),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV38),
						];

						this.PackMapEnvDataSkyModeTexV67 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV67 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV67),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV38),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV67),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV38),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV67),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV67),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV67),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV38),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV67),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV67),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV38),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV67),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV67),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV67),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV67 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV67),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV67),
						];

			},

			// => Version: 66, ReferencedFunction: 0xFF8B40
			66:function(){
						this.PackMapEnvDataLightV66 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV66 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV66),
				'shadowInfluence' , 'float32',
						];

						this.PackMapEnvDataLightingCharV37 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV37 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV37),
						];

						this.PackMapEnvDataLayerAttributesV66 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV66 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV66),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV66 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV66),
						];

						this.PackMapEnvDataColoredLightRingsV37 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV66 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV66 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV66 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV37 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV66 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV66 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV66 =[
				'day', this.PackMapEnvDataSkyCardAttributesV66,
				'night', this.PackMapEnvDataSkyCardAttributesV66,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV66 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV66),
						];

						this.PackMapEnvDataSpawnModelDataV37 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV37 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV37),
						];

						this.PackMapEnvDataSpawnGroupsV37 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV37),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV66 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV66 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataShapeV37 =[
				'center' , ['[]','float32',3],
				'height' , 'float32',
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'shapeType' , 'uint8',
						];

						this.PackMapEnvDataLocalV66 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV66),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV37),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV66),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV37),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV66),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV66),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV66),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV37),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV66),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV66),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV37),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV66),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV66),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'type' , 'uint8',
				'guid', Utils.getQWordReader(),
				'shapeArray', Utils.getArrayReader(this.PackMapEnvDataShapeV37),
						];

						this.PackMapEnvDataSkyModeTexV66 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV66 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV66),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV37),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV66),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV37),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV66),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV66),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV66),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV37),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV66),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV66),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV37),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV66),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV66),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV66),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV66 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV66),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV66),
						];

			},

			// => Version: 65, ReferencedFunction: 0xFF8AE0
			65:function(){
						this.PackMapEnvDataLightV65 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV65 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV65),
				'shadowInfluence' , 'float32',
						];

						this.PackMapEnvDataLightingCharV36 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV36 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV36),
						];

						this.PackMapEnvDataLayerAttributesV65 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV65 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV65),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV65 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV65),
						];

						this.PackMapEnvDataColoredLightRingsV36 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV65 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV65 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV65 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV36 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV65 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV65 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV65 =[
				'day', this.PackMapEnvDataSkyCardAttributesV65,
				'night', this.PackMapEnvDataSkyCardAttributesV65,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV65 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV65),
						];

						this.PackMapEnvDataSpawnModelDataV36 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV36 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV36),
						];

						this.PackMapEnvDataSpawnGroupsV36 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV36),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV65 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV65 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataLocalV65 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV65),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV36),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV65),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV36),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV65),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV65),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV65),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV36),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV65),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV65),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV36),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV65),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV65),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV65 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV65 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV65),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV36),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV65),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV36),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV65),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV65),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV65),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV36),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV65),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV65),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV36),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV65),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV65),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV65),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV65 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV65),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV65),
						];

			},

			// => Version: 64, ReferencedFunction: 0xFF89F0
			64:function(){
						this.PackMapEnvDataLightV64 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV64 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV64),
						];

						this.PackMapEnvDataLightingCharV35 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV35 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV35),
						];

						this.PackMapEnvDataLayerAttributesV64 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV64 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV64),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV64 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV64),
						];

						this.PackMapEnvDataColoredLightRingsV35 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV64 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV64 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV64 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV35 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV64 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
				'verticalOffset' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV64 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV64 =[
				'day', this.PackMapEnvDataSkyCardAttributesV64,
				'night', this.PackMapEnvDataSkyCardAttributesV64,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV64 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV64),
						];

						this.PackMapEnvDataSpawnModelDataV35 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV35 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV35),
						];

						this.PackMapEnvDataSpawnGroupsV35 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV35),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV64 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV64 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
				'gustSpeed' , 'uint8',
						];

						this.PackMapEnvDataLocalV64 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV64),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV35),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV64),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV35),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV64),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV64),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV64),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV35),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV64),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV64),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV35),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV64),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV64),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV64 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV64 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV64),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV35),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV64),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV35),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV64),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV64),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV64),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV35),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV64),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV64),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV35),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV64),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV64),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV64),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV64 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV64),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV64),
						];

			},

			// => Version: 63, ReferencedFunction: 0xFF88F0
			63:function(){
						this.PackMapEnvDataLightV63 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV63 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV63),
						];

						this.PackMapEnvDataLightingCharV34 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV34 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV34),
						];

						this.PackMapEnvDataLayerAttributesV63 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV63 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV63),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV63 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV63),
						];

						this.PackMapEnvDataColoredLightRingsV34 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV63 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV63 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV63 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV34 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV63 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV63 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV63 =[
				'day', this.PackMapEnvDataSkyCardAttributesV63,
				'night', this.PackMapEnvDataSkyCardAttributesV63,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV63 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV63),
						];

						this.PackMapEnvDataSpawnModelDataV34 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV34 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV34),
						];

						this.PackMapEnvDataSpawnGroupsV34 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV34),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV63 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'foamSpawn' , 'float32',
				'foamDissolve' , 'float32',
				'foamDepthAttenuation' , 'float32',
				'foamColor0' , ['[]','uint8',4],
				'foamColor1' , ['[]','uint8',4],
						];

						this.PackMapEnvDataWindV63 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV63 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV63),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV34),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV63),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV34),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV63),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV63),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV63),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV34),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV63),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV63),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV34),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV63),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV63),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV63 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV63 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV63),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV34),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV63),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV34),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV63),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV63),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV63),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV34),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV63),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV63),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV34),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV63),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV63),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV63),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV63 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV63),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV63),
						];

			},

			// => Version: 62, ReferencedFunction: 0xFF88C0
			62:function(){
						this.PackMapEnvDataLightV62 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV62 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV62),
						];

						this.PackMapEnvDataLightingCharV33 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV33 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV33),
						];

						this.PackMapEnvDataLayerAttributesV62 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV62 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV62),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV62 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV62),
						];

						this.PackMapEnvDataColoredLightRingsV33 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV62 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV62 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
				'sunDirRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataPFieldV62 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV33 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV62 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV62 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV62 =[
				'day', this.PackMapEnvDataSkyCardAttributesV62,
				'night', this.PackMapEnvDataSkyCardAttributesV62,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV62 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV62),
						];

						this.PackMapEnvDataSpawnModelDataV33 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV33 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV33),
						];

						this.PackMapEnvDataSpawnGroupsV33 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV33),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV62 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV62 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV62 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV62),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV33),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV62),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV33),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV62),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV62),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV62),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV33),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV62),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV62),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV33),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV62),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV62),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV62 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV62 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV62),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV33),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV62),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV33),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV62),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV62),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV62),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV33),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV62),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV62),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV33),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV62),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV62),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV62),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV62 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV62),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV62),
						];

			},

			// => Version: 61, ReferencedFunction: 0xFF8890
			61:function(){
						this.PackMapEnvDataLightV61 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV61 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV61),
						];

						this.PackMapEnvDataLightingCharV32 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV32 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV32),
						];

						this.PackMapEnvDataLayerAttributesV61 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV61 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV61),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV61 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV61),
						];

						this.PackMapEnvDataColoredLightRingsV32 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV61 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
				'flatteningCharacterRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV61 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV61 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV32 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV61 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV61 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV61 =[
				'day', this.PackMapEnvDataSkyCardAttributesV61,
				'night', this.PackMapEnvDataSkyCardAttributesV61,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV61 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV61),
						];

						this.PackMapEnvDataSpawnModelDataV32 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV32 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV32),
						];

						this.PackMapEnvDataSpawnGroupsV32 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV32),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV61 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV61 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV61 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV61),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV32),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV61),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV32),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV61),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV61),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV61),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV32),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV61),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV61),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV32),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV61),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV61),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV61 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV61 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV61),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV32),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV61),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV32),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV61),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV61),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV61),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV32),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV61),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV61),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV32),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV61),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV61),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV61),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV61 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV61),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV61),
						];

			},

			// => Version: 60, ReferencedFunction: 0xFF8860
			60:function(){
						this.PackMapEnvDataLightV60 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV60 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV60),
						];

						this.PackMapEnvDataLightingCharV31 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV31 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV31),
						];

						this.PackMapEnvDataLayerAttributesV60 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV60 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV60),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV60 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV60),
						];

						this.PackMapEnvDataColoredLightRingsV31 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV60 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
				'flatteningRange' , ['[]','float32',2],
						];

						this.PackMapEnvDataHazeV60 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV60 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV31 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV60 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV60 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV60 =[
				'day', this.PackMapEnvDataSkyCardAttributesV60,
				'night', this.PackMapEnvDataSkyCardAttributesV60,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV60 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV60),
						];

						this.PackMapEnvDataSpawnModelDataV31 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV31 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV31),
						];

						this.PackMapEnvDataSpawnGroupsV31 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV31),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV60 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV60 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV60 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV60),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV31),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV60),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV31),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV60),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV60),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV60),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV31),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV60),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV60),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV31),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV60),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV60),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV60 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV60 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV60),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV31),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV60),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV31),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV60),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV60),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV60),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV31),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV60),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV60),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV31),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV60),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV60),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV60),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV60 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV60),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV60),
						];

			},

			// => Version: 59, ReferencedFunction: 0xFF8750
			59:function(){
						this.PackMapEnvDataLightV59 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV59 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV59),
						];

						this.PackMapEnvDataLightingCharV30 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV30 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV30),
						];

						this.PackMapEnvDataLayerAttributesV59 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV59 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV59),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV59 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV59),
						];

						this.PackMapEnvDataColoredLightRingsV30 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV59 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV59 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV59 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV30 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV59 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV59 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV59 =[
				'day', this.PackMapEnvDataSkyCardAttributesV59,
				'night', this.PackMapEnvDataSkyCardAttributesV59,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV59 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV59),
						];

						this.PackMapEnvDataSpawnModelDataV30 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile' , Utils.getFileNameReader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV30 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV30),
						];

						this.PackMapEnvDataSpawnGroupsV30 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV30),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV59 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV59 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV59 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV59),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV30),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV59),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV30),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV59),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV59),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV59),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV30),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV59),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV59),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV30),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV59),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV59),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV59 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV59 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV59),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV30),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV59),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV30),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV59),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV59),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV59),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV30),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV59),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV59),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV30),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV59),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV59),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV59),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV59 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV59),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV59),
						];

			},

			// => Version: 58, ReferencedFunction: 0xFF8640
			58:function(){
						this.PackMapEnvDataLightV58 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV58 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV58),
						];

						this.PackMapEnvDataLightingCharV29 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV29 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV29),
						];

						this.PackMapEnvDataLayerAttributesV58 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV58 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV58),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV58 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV58),
						];

						this.PackMapEnvDataColoredLightRingsV29 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV58 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV58 =[
				'nearColor' , ['[]','uint8',4],
				'farColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV58 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV29 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV58 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV58 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV58 =[
				'day', this.PackMapEnvDataSkyCardAttributesV58,
				'night', this.PackMapEnvDataSkyCardAttributesV58,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV58 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV58),
						];

						this.PackMapEnvDataSpawnModelDataV29 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile', Utils.getString16Reader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV29 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV29),
						];

						this.PackMapEnvDataSpawnGroupsV29 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV29),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapEnvDataWaterV58 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV58 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV58 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV58),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV29),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV58),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV29),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV58),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV58),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV58),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV29),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV58),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV58),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV29),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV58),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV58),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV58 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV58 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV58),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV29),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV58),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV29),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV58),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV58),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV58),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV29),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV58),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV58),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV29),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV58),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV58),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV58),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV58 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV58),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV58),
						];

			},

			// => Version: 57
			57:function(){
						this.PackMapEnvDataLightV57 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV57 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV57),
						];

						this.PackMapEnvDataLightingCharV28 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV28 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV28),
						];

						this.PackMapEnvDataLayerAttributesV57 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV57 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV57),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV57 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV57),
						];

						this.PackMapEnvDataColoredLightRingsV28 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV57 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV57 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV57 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV28 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV57 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV57 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV57 =[
				'day', this.PackMapEnvDataSkyCardAttributesV57,
				'night', this.PackMapEnvDataSkyCardAttributesV57,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV57 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV57),
						];

						this.PackMapEnvDataSpawnModelDataV28 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'heightRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile', Utils.getString16Reader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV28 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV28),
						];

						this.PackMapEnvDataSpawnGroupsV28 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV28),
				'targetVolume', Utils.getQWordReader(),
						];

						this.PackMapEnvDataWaterV57 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV57 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV57 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV57),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV28),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV57),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV28),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV57),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV57),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV57),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV28),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV57),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV57),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV28),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV57),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV57),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV57 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV57 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV57),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV28),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV57),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV28),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV57),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV57),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV57),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV28),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV57),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV57),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV28),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV57),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV57),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV57),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV57 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV57),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV57),
						];

			},

			// => Version: 56, ReferencedFunction: 0xFF8530
			56:function(){
						this.PackMapEnvDataLightV56 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV56 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV56),
						];

						this.PackMapEnvDataLightingCharV27 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV27 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV27),
						];

						this.PackMapEnvDataLayerAttributesV56 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV56 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV56),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV56 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV56),
						];

						this.PackMapEnvDataColoredLightRingsV27 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV56 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV56 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV56 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV27 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV56 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV56 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV56 =[
				'day', this.PackMapEnvDataSkyCardAttributesV56,
				'night', this.PackMapEnvDataSkyCardAttributesV56,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV56 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV56),
						];

						this.PackMapEnvDataSpawnModelDataV27 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'scaleRange' , ['[]','float32',2],
				'rotXRange' , ['[]','float32',2],
				'rotYRange' , ['[]','float32',2],
				'rotZRange' , ['[]','float32',2],
				'probability' , 'float32',
				'delay' , 'float32',
				'flags' , 'uint32',
				'modelFile', Utils.getString16Reader(),
				'maxConcurrent', 'uint16',
						];

						this.PackMapEnvDataSpawnListV27 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV27),
						];

						this.PackMapEnvDataSpawnGroupsV27 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV27),
				'targetVolume', Utils.getQWordReader(),
						];

						this.PackMapEnvDataWaterV56 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV56 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV56 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV56),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV27),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV56),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV27),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV56),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV56),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV56),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV27),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV56),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV56),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV27),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV56),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV56),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV56 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV56 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV56),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV27),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV56),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV27),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV56),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV56),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV56),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV27),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV56),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV56),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV27),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV56),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV56),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV56),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV56 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV56),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV56),
						];

			},

			// => Version: 55
			55:function(){
						this.PackMapEnvDataLightV55 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV55 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV55),
						];

						this.PackMapEnvDataLightingCharV26 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV26 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV26),
						];

						this.PackMapEnvDataLayerAttributesV55 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV55 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV55),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV55 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV55),
						];

						this.PackMapEnvDataColoredLightRingsV26 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV55 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV55 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV55 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV26 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV55 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV55 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV55 =[
				'day', this.PackMapEnvDataSkyCardAttributesV55,
				'night', this.PackMapEnvDataSkyCardAttributesV55,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV55 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV55),
						];

						this.PackMapEnvDataSpawnModelDataV26 =[
				'spawnRange', ['[]', 'uint32', 2],
				'lifeSpan', ['[]', 'uint32', 2],
				'probability' , 'float32',
				'delay' , 'float32',
				'maxConcurrent', 'uint16',
				'flags' , 'uint32',
				'modelFile', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSpawnListV26 =[
				'spawns', Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV26),
						];

						this.PackMapEnvDataSpawnGroupsV26 =[
				'spawnGroups', Utils.getArrayReader(this.PackMapEnvDataSpawnListV26),
				'targetVolume', Utils.getQWordReader(),
						];

						this.PackMapEnvDataWaterV55 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV55 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV55 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV55),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV26),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV55),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV26),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV55),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV55),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV55),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV26),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV55),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV55),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV26),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV55),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV55),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV55 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV55 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV55),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV26),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV55),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV26),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV55),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV55),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV55),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV26),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV55),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV55),
				'spawns', Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV26),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV55),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV55),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV55),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV55 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV55),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV55),
						];

			},

			// => Version: 54, ReferencedFunction: 0xFF8480
			54:function(){
						this.PackMapEnvDataLightV54 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV54 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV54),
						];

						this.PackMapEnvDataLightingCharV25 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV25 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV25),
						];

						this.PackMapEnvDataLayerAttributesV54 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV54 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV54),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV54 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV54),
						];

						this.PackMapEnvDataColoredLightRingsV25 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV54 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV54 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV54 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV25 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV54 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV54 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV54 =[
				'day', this.PackMapEnvDataSkyCardAttributesV54,
				'night', this.PackMapEnvDataSkyCardAttributesV54,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV54 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV54),
						];

						this.PackMapEnvDataWaterV54 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV54 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV54 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV54),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV25),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV54),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV25),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV54),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV54),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV54),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV25),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV54),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV54),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV54),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV54),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV54 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV54 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV54),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV25),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV54),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV25),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV54),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV54),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV54),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV25),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV54),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV54),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV54),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV54),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV54),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV54 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV54),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV54),
						];

			},

			// => Version: 53, ReferencedFunction: 0xFF83D0
			53:function(){
						this.PackMapEnvDataLightV53 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV53 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV53),
						];

						this.PackMapEnvDataLightingCharV24 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV24 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV24),
						];

						this.PackMapEnvDataLayerAttributesV53 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV53 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV53),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV53 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV53),
						];

						this.PackMapEnvDataColoredLightRingsV24 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV53 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV53 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV53 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'deviationSpeed' , ['[]','float32',2],
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV24 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV53 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV53 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV53 =[
				'day', this.PackMapEnvDataSkyCardAttributesV53,
				'night', this.PackMapEnvDataSkyCardAttributesV53,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV53 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV53),
						];

						this.PackMapEnvDataWaterV53 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV53 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV53 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV53),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV24),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV53),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV24),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV53),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV53),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV53),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV24),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV53),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV53),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV53),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV53),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV53 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV53 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV53),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV24),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV53),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV24),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV53),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV53),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV53),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV24),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV53),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV53),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV53),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV53),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV53),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV53 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV53),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV53),
						];

			},

			// => Version: 52, ReferencedFunction: 0xFF82F0
			52:function(){
						this.PackMapEnvDataLightV52 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV52 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV52),
						];

						this.PackMapEnvDataLightingCharV23 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV23 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV23),
						];

						this.PackMapEnvDataLayerAttributesV52 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV52 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV52),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV52 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV52),
						];

						this.PackMapEnvDataColoredLightRingsV23 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV52 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV52 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV52 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'clusterCount', 'uint16',
				'clustering' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags', 'uint16',
				'lifetime' , ['[]','float32',2],
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , ['[]','float32',2],
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'seed' , 'uint32',
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV23 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV52 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV52 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV52 =[
				'day', this.PackMapEnvDataSkyCardAttributesV52,
				'night', this.PackMapEnvDataSkyCardAttributesV52,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV52 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV52),
						];

						this.PackMapEnvDataWaterV52 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV52 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV52 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV52),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV23),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV52),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV23),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV52),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV52),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV52),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV23),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV52),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV52),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV52),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV52),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV52 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV52 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV52),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV23),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV52),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV23),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV52),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV52),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV52),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV23),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV52),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV52),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV52),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV52),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV52),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV52 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV52),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV52),
						];

			},

			// => Version: 51
			51:function(){
						this.PackMapEnvDataLightV51 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV51 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV51),
						];

						this.PackMapEnvDataLightingCharV22 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV22 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV22),
						];

						this.PackMapEnvDataLayerAttributesV51 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV51 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV51),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV51 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV51),
						];

						this.PackMapEnvDataColoredLightRingsV22 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV51 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV51 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV51 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'lifetime' , 'float32',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'period' , 'float32',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV22 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV51 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV51 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV51 =[
				'day', this.PackMapEnvDataSkyCardAttributesV51,
				'night', this.PackMapEnvDataSkyCardAttributesV51,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV51 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV51),
						];

						this.PackMapEnvDataWaterV51 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV51 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV51 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV51),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV22),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV51),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV22),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV51),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV51),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV51),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV22),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV51),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV51),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV51),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV51),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV51 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV51 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV51),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV22),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV51),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV22),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV51),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV51),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV51),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV22),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV51),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV51),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV51),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV51),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV51),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV51 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV51),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV51),
						];

			},

			// => Version: 50, ReferencedFunction: 0xFF81E0
			50:function(){
						this.PackMapEnvDataLightV50 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV50 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV50),
						];

						this.PackMapEnvDataLightingCharV21 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV21 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV21),
						];

						this.PackMapEnvDataLayerAttributesV50 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV50 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV50),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV50 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV50),
						];

						this.PackMapEnvDataColoredLightRingsV21 =[
				'range' , ['[]','float32',2],
				'distances', ['[]', 'float32', 6],
				'lightColors', ['[]', ['[]','uint8',4], 6],
				'shadowColors', ['[]', ['[]','uint8',4], 6],
						];

						this.PackMapEnvDataEffectV50 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV50 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV50 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV21 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV50 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV50 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV50 =[
				'day', this.PackMapEnvDataSkyCardAttributesV50,
				'night', this.PackMapEnvDataSkyCardAttributesV50,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV50 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV50),
						];

						this.PackMapEnvDataWaterV50 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV50 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV50 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV50),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV21),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV50),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV21),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV50),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV50),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV50),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV21),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV50),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV50),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV50),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV50),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV50 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV50 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV50),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV21),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV50),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV21),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV50),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV50),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV50),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV21),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV50),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV50),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV50),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV50),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV50),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV50 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV50),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV50),
						];

			},

			// => Version: 49, ReferencedFunction: 0xFF8090
			49:function(){
						this.PackMapEnvDataLightV49 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV49 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV49),
						];

						this.PackMapEnvDataLightingCharV20 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLightingCharGroupV20 =[
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV20),
						];

						this.PackMapEnvDataLayerAttributesV49 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV49 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV49),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV49 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV49),
						];

						this.PackMapEnvDataColoredLightRingsV20 =[
				'range' , ['[]','float32',2],
				'colors', ['[]', ['[]','uint8',4], 6],
				'distances', ['[]', 'float32', 6],
						];

						this.PackMapEnvDataEffectV49 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV49 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV49 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV20 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV49 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV49 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV49 =[
				'day', this.PackMapEnvDataSkyCardAttributesV49,
				'night', this.PackMapEnvDataSkyCardAttributesV49,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV49 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV49),
						];

						this.PackMapEnvDataWaterV49 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV49 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV49 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV49),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV20),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV49),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV20),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV49),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV49),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV49),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV20),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV49),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV49),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV49),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV49),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV49 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV49 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV49),
				'lightingCharGroups', Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV20),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV49),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV20),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV49),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV49),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV49),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV20),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV49),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV49),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV49),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV49),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV49),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV49 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV49),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV49),
						];

			},

			// => Version: 48
			48:function(){
						this.PackMapEnvDataLightV48 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV48 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV48),
						];

						this.PackMapEnvDataLightingCharV19 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV48 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV48 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV48),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV48 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV48),
						];

						this.PackMapEnvDataColoredLightRingsV19 =[
				'range' , ['[]','float32',2],
				'colors', ['[]', ['[]','uint8',4], 6],
				'distances', ['[]', 'float32', 6],
						];

						this.PackMapEnvDataEffectV48 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV48 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV48 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV19 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV48 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV48 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV48 =[
				'day', this.PackMapEnvDataSkyCardAttributesV48,
				'night', this.PackMapEnvDataSkyCardAttributesV48,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV48 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV48),
						];

						this.PackMapEnvDataWaterV48 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV48 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV48 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV48),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV19),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV48),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV19),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV48),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV48),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV48),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV19),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV48),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV48),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV48),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV48),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV48 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV48 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV48),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV19),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV48),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV19),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV48),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV48),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV48),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV19),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV48),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV48),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV48),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV48),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'bindTarget', Utils.getQWordReader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV48),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV48 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV48),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV48),
						];

			},

			// => Version: 47
			47:function(){
						this.PackMapEnvDataLightV47 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV47 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV47),
						];

						this.PackMapEnvDataLightingCharV18 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV47 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV47 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV47),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV47 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV47),
						];

						this.PackMapEnvDataColoredLightRingsV18 =[
				'range' , ['[]','float32',2],
				'colors', ['[]', ['[]','uint8',4], 6],
				'distances', ['[]', 'float32', 6],
						];

						this.PackMapEnvDataEffectV47 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV47 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV47 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV18 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV47 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV47 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV47 =[
				'day', this.PackMapEnvDataSkyCardAttributesV47,
				'night', this.PackMapEnvDataSkyCardAttributesV47,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV47 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV47),
						];

						this.PackMapEnvDataWaterV47 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV47 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV47 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV47),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV18),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV47),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV18),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV47),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV47),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV47),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV18),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV47),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV47),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV47),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV47),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV47 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV47 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV47),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV18),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV47),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV18),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV47),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV47),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV47),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV18),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV47),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV47),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV47),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV47),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV47),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV47 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV47),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV47),
						];

			},

			// => Version: 46
			46:function(){
						this.PackMapEnvDataLightV46 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV46 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV46),
						];

						this.PackMapEnvDataLightingCharV17 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV46 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV46 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV46),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV46 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV46),
						];

						this.PackMapEnvDataColoredLightRingsV17 =[
				'range' , ['[]','float32',2],
				'colors', ['[]', ['[]','uint8',4], 6],
				'distances', ['[]', 'float32', 6],
						];

						this.PackMapEnvDataEffectV46 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV46 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV46 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV17 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV46 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV46 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV46 =[
				'day', this.PackMapEnvDataSkyCardAttributesV46,
				'night', this.PackMapEnvDataSkyCardAttributesV46,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV46 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV46),
						];

						this.PackMapEnvDataWaterV46 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV46 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV46 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV46),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV17),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV46),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV17),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV46),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV46),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV46),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV17),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV46),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV46),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV46),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV46),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV46 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV46 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV46),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV17),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV46),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV17),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV46),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV46),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV46),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV17),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV46),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV46),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV46),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV46),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV46),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV46 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV46),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV46),
						];

			},

			// => Version: 45
			45:function(){
						this.PackMapEnvDataLightV45 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV45 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV45),
						];

						this.PackMapEnvDataLightingCharV16 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV45 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV45 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV45),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV45 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV45),
						];

						this.PackMapEnvDataColoredLightRingsV16 =[
				'range' , ['[]','float32',2],
				'colors', ['[]', ['[]','uint8',4], 6],
				'distances', ['[]', 'float32', 6],
						];

						this.PackMapEnvDataEffectV45 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV45 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV45 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV16 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV45 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV45 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV45 =[
				'day', this.PackMapEnvDataSkyCardAttributesV45,
				'night', this.PackMapEnvDataSkyCardAttributesV45,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV45 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV45),
						];

						this.PackMapEnvDataWaterV45 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV45 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV45 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV45),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV16),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV45),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV16),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV45),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV45),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV45),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV16),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV45),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV45),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV45),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV45),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV45 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV45 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV45),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV16),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV45),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV16),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV45),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV45),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV45),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV16),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV45),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV45),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV45),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV45),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV45),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV45 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV45),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV45),
						];

			},

			// => Version: 44, ReferencedFunction: 0xFF7F80
			44:function(){
						this.PackMapEnvDataLightV44 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV44 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV44),
						];

						this.PackMapEnvDataLightingCharV15 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV44 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV44 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV44),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV44 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV44),
						];

						this.PackMapEnvDataColoredLightRingsV15 =[
				'range' , ['[]','float32',2],
				'colors', ['[]', ['[]','uint8',4], 6],
				'distances', ['[]', 'float32', 6],
						];

						this.PackMapEnvDataEffectV44 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV44 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV44 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV15 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV44 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV44 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV44 =[
				'day', this.PackMapEnvDataSkyCardAttributesV44,
				'night', this.PackMapEnvDataSkyCardAttributesV44,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV44 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV44),
						];

						this.PackMapEnvDataWaterV44 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV44 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV44 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV44),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV15),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV44),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV15),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV44),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV44),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV44),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV15),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV44),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV44),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV44),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV44),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV44 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV44 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV44),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV15),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV44),
				'coloredLightRings', Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV15),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV44),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV44),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV44),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV15),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV44),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV44),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV44),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV44),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV44),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV44 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV44),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV44),
						];

			},

			// => Version: 43, ReferencedFunction: 0xFF7ED0
			43:function(){
						this.PackMapEnvDataLightV43 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV43 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV43),
						];

						this.PackMapEnvDataLightingCharV14 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV43 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
				'fadeWidth' , 'float32',
				'fadeEnd' , 'float32',
						];

						this.PackMapEnvDataLayerV43 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV43),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV43 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV43),
						];

						this.PackMapEnvDataEffectV43 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV43 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV43 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV14 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV43 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV43 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
				'brightness' , 'float32',
						];

						this.PackMapEnvDataSkyCardV43 =[
				'day', this.PackMapEnvDataSkyCardAttributesV43,
				'night', this.PackMapEnvDataSkyCardAttributesV43,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV43 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV43),
						];

						this.PackMapEnvDataWaterV43 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.PackMapEnvDataWindV43 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV43 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV43),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV14),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV43),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV43),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV43),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV43),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV14),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV43),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV43),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV43),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV43),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV43 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV43 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV43),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV14),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV43),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV43),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV43),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV43),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV14),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV43),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV43),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV43),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV43),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV43),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV43 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV43),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV43),
						];

			},

			// => Version: 42, ReferencedFunction: 0xFF7E30
			42:function(){
						this.PackMapEnvDataLightV42 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV42 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV42),
						];

						this.PackMapEnvDataLightingCharV13 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV42 =[
				'brightness' , 'float32',
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV42 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV42),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV42 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV42),
						];

						this.PackMapEnvDataEffectV42 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV42 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV42 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV13 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV42 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV42 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV42 =[
				'day', this.PackMapEnvDataSkyCardAttributesV42,
				'night', this.PackMapEnvDataSkyCardAttributesV42,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV42 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV42),
						];

						this.PackMapEnvDataWaterV42 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
						];

						this.PackMapEnvDataWindV42 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV42 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV42),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV13),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV42),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV42),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV42),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV42),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV13),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV42),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV42),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV42),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV42),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV42 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV42 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV42),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV13),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV42),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV42),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV42),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV42),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV13),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV42),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV42),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV42),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV42),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV42),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV42 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV42),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV42),
						];

			},

			// => Version: 41, ReferencedFunction: 0xFF7D10
			41:function(){
						this.PackMapEnvDataLightV41 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV41 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV41),
						];

						this.PackMapEnvDataLightingCharV12 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV41 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV41 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV41),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV41 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV41),
						];

						this.PackMapEnvDataEffectV41 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV41 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV41 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV12 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV41 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV41 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV41 =[
				'day', this.PackMapEnvDataSkyCardAttributesV41,
				'night', this.PackMapEnvDataSkyCardAttributesV41,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV41 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV41),
						];

						this.PackMapEnvDataWaterV41 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'depthAttenuation' , 'float32',
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
						];

						this.PackMapEnvDataWindV41 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV41 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV41),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV12),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV41),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV41),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV41),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV41),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV12),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV41),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV41),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV41),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV41),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV41 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV41 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV41),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV12),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV41),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV41),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV41),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV41),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV12),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV41),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV41),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV41),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV41),
				'name', Utils.getString16Reader(),
				'nightMods', Utils.getArrayReader('uint8'),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV41),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV41 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV41),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV41),
						];

			},

			// => Version: 40, ReferencedFunction: 0xFF7CD0
			40:function(){
						this.PackMapEnvDataLightV40 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV40 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV40),
						];

						this.PackMapEnvDataLightingCharV11 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV40 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV40 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV40),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV40 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV40),
						];

						this.PackMapEnvDataEffectV40 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV40 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV40 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV11 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV40 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV40 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV40 =[
				'day', this.PackMapEnvDataSkyCardAttributesV40,
				'night', this.PackMapEnvDataSkyCardAttributesV40,
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV40 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV40),
						];

						this.PackMapEnvDataWaterV40 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
				'depthAttenuation' , 'float32',
						];

						this.PackMapEnvDataWindV40 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV40 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV40),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV11),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV40),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV40),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV40),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV40),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV11),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV40),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV40),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV40),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV40),
				'name', Utils.getString16Reader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV40 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV40 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV40),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV11),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV40),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV40),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV40),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV40),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV11),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV40),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV40),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV40),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV40),
				'name', Utils.getString16Reader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV40),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV40 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV40),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV40),
						];

			},

			// => Version: 39
			39:function(){
						this.PackMapEnvDataLightV39 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV39 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV39),
						];

						this.PackMapEnvDataLightingCharV10 =[
				'sunScale' , 'float32',
				'saturation' , 'float32',
				'sunFill' , 'float32',
				'ambScale' , 'float32',
				'ambFill' , 'float32',
				'flags' , 'uint8',
						];

						this.PackMapEnvDataLayerAttributesV39 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV39 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV39),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV39 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV39),
						];

						this.PackMapEnvDataEffectV39 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV39 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV39 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV10 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV39 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV39 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV39 =[
				'day', this.PackMapEnvDataSkyCardAttributesV39,
				'night', this.PackMapEnvDataSkyCardAttributesV39,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV39 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV39),
						];

						this.PackMapEnvDataWaterV39 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
				'depthAttenuation' , 'float32',
						];

						this.PackMapEnvDataWindV39 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV39 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV39),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV10),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV39),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV39),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV39),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV39),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV10),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV39),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV39),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV39),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV39),
				'name', Utils.getString16Reader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
				'guid', Utils.getQWordReader(),
						];

						this.PackMapEnvDataSkyModeTexV39 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV39 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV39),
				'lightingChar', Utils.getArrayReader(this.PackMapEnvDataLightingCharV10),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV39),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV39),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV39),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV39),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV10),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV39),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV39),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV39),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV39),
				'name', Utils.getString16Reader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV39),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV39 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV39),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV39),
						];

			},

			// => Version: 38, ReferencedFunction: 0xFF7C30
			38:function(){
						this.PackMapEnvDataLightV38 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV38 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV38),
						];

						this.PackMapEnvDataLayerAttributesV38 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV38 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV38),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV38 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV38),
						];

						this.PackMapEnvDataEffectV38 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
				'focalDepth' , 'float32',
				'focalRange' , 'float32',
						];

						this.PackMapEnvDataHazeV38 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV38 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV9 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV38 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV38 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV38 =[
				'day', this.PackMapEnvDataSkyCardAttributesV38,
				'night', this.PackMapEnvDataSkyCardAttributesV38,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV38 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV38),
						];

						this.PackMapEnvDataWaterV38 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
				'depthAttenuation' , 'float32',
						];

						this.PackMapEnvDataWindV38 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV38 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV38),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV38),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV38),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV38),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV38),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV9),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV38),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV38),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV38),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV38),
				'name', Utils.getString16Reader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV38 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV38 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV38),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV38),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV38),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV38),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV38),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV9),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV38),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV38),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV38),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV38),
				'name', Utils.getString16Reader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV38),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV38 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV38),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV38),
						];

			},

			// => Version: 37, ReferencedFunction: 0xFF7BB0
			37:function(){
						this.PackMapEnvDataLightV37 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV37 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV37),
						];

						this.PackMapEnvDataLayerAttributesV37 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV37 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'extent' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV37),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV37 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV37),
						];

						this.PackMapEnvDataEffectV37 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
						];

						this.PackMapEnvDataHazeV37 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV37 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV8 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV37 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV37 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV37 =[
				'day', this.PackMapEnvDataSkyCardAttributesV37,
				'night', this.PackMapEnvDataSkyCardAttributesV37,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV37 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV37),
						];

						this.PackMapEnvDataWaterV37 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
				'depthAttenuation' , 'float32',
						];

						this.PackMapEnvDataWindV37 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV37 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV37),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV37),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV37),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV37),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV37),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV8),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV37),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV37),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV37),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV37),
				'name', Utils.getString16Reader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV37 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV37 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV37),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV37),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV37),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV37),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV37),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV8),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV37),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV37),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV37),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV37),
				'name', Utils.getString16Reader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV37),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV37 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV37),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV37),
						];

			},

			// => Version: 36
			36:function(){
						this.PackMapEnvDataLightV36 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV36 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV36),
						];

						this.PackMapEnvDataLayerAttributesV36 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV36 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV36),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV36 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV36),
						];

						this.PackMapEnvDataEffectV36 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
						];

						this.PackMapEnvDataHazeV36 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV36 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV7 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV36 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV36 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV36 =[
				'day', this.PackMapEnvDataSkyCardAttributesV36,
				'night', this.PackMapEnvDataSkyCardAttributesV36,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV36 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV36),
						];

						this.PackMapEnvDataWaterV36 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
				'depthAttenuation' , 'float32',
						];

						this.PackMapEnvDataWindV36 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV36 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV36),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV36),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV36),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV36),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV36),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV7),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV36),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV36),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV36),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV36),
				'name', Utils.getString16Reader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV36 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV36 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV36),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV36),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV36),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV36),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV36),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV7),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV36),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV36),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV36),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV36),
				'name', Utils.getString16Reader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV36),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV36 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV36),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV36),
						];

			},

			// => Version: 35, ReferencedFunction: 0xFF7B50
			35:function(){
						this.PackMapEnvDataLightV35 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV35 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV35),
						];

						this.PackMapEnvDataLayerAttributesV35 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV35 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV35),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV35 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV35),
						];

						this.PackMapEnvDataEffectV35 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
						];

						this.PackMapEnvDataHazeV35 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV35 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataPFieldCutoutV6 =[
				'name', Utils.getString16Reader(),
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyV35 =[
				'flags' , 'uint8',
				'dayBrightness' , 'float32',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightBrightness' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV35 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV35 =[
				'day', this.PackMapEnvDataSkyCardAttributesV35,
				'night', this.PackMapEnvDataSkyCardAttributesV35,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV35 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV35),
						];

						this.PackMapEnvDataWaterV35 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataWindV35 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV35 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV35),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV35),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV35),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV35),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV35),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV6),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV35),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV35),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV35),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV35),
				'name', Utils.getString16Reader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV35 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV35 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV35),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV35),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV35),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV35),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV35),
				'particleFieldCutouts', Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV6),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV35),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV35),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV35),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV35),
				'name', Utils.getString16Reader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV35),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV35 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV35),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV35),
						];

			},

			// => Version: 34
			34:function(){
						this.PackMapEnvDataLightV34 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV34 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV34),
						];

						this.PackMapEnvDataLayerAttributesV34 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV34 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV34),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV34 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV34),
						];

						this.PackMapEnvDataEffectV34 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'tintTargetColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'tintFocus' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
						];

						this.PackMapEnvDataHazeV34 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV34 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyV34 =[
				'flags' , 'uint8',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV34 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV34 =[
				'day', this.PackMapEnvDataSkyCardAttributesV34,
				'night', this.PackMapEnvDataSkyCardAttributesV34,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV34 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV34),
						];

						this.PackMapEnvDataWaterV34 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataWindV34 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV34 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV34),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV34),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV34),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV34),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV34),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV34),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV34),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV34),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV34),
				'name', Utils.getString16Reader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV34 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV34 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV34),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV34),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV34),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV34),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV34),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV34),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV34),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV34),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV34),
				'name', Utils.getString16Reader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV34),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV34 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV34),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV34),
						];

			},

			// => Version: 33
			33:function(){
						this.PackMapEnvDataLightV33 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV33 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV33),
						];

						this.PackMapEnvDataLayerAttributesV33 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV33 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV33),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV33 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV33),
						];

						this.PackMapEnvDataEffectV33 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
						];

						this.PackMapEnvDataHazeV33 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV33 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyV33 =[
				'flags' , 'uint8',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV33 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV33 =[
				'day', this.PackMapEnvDataSkyCardAttributesV33,
				'night', this.PackMapEnvDataSkyCardAttributesV33,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV33 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV33),
						];

						this.PackMapEnvDataWaterV33 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataWindV33 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV33 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV33),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV33),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV33),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV33),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV33),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV33),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV33),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV33),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV33),
				'name', Utils.getString16Reader(),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV33 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV33 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV33),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV33),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV33),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV33),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV33),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV33),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV33),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV33),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV33),
				'name', Utils.getString16Reader(),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV33),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV33 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV33),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV33),
						];

			},

			// => Version: 32, ReferencedFunction: 0xFF79C0
			32:function(){
						this.PackMapEnvDataLightV32 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV32 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV32),
						];

						this.PackMapEnvDataLayerAttributesV32 =[
				'density' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV32 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'depth' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'attributes', Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV32),
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV32 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV32),
						];

						this.PackMapEnvDataEffectV32 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
						];

						this.PackMapEnvDataHazeV32 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV32 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyV32 =[
				'flags' , 'uint8',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV32 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV32 =[
				'day', this.PackMapEnvDataSkyCardAttributesV32,
				'night', this.PackMapEnvDataSkyCardAttributesV32,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV32 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV32),
						];

						this.PackMapEnvDataWaterV32 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataWindV32 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV32 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV32),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV32),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV32),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV32),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV32),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV32),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV32),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV32),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV32),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV32 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV32 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV32),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV32),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV32),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV32),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV32),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV32),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV32),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV32),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV32),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV32),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV32 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV32),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV32),
						];

			},

			// => Version: 31, ReferencedFunction: 0xFF7950
			31:function(){
						this.PackMapEnvDataLightV31 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV31 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV31),
						];

						this.PackMapEnvDataLayerAttributesV31 =[
				'density' , 'float32',
				'depth' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV31 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'day', this.PackMapEnvDataLayerAttributesV31,
				'night', this.PackMapEnvDataLayerAttributesV31,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV31 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV31),
						];

						this.PackMapEnvDataEffectV31 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
						];

						this.PackMapEnvDataHazeV31 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV31 =[
				'altitude' , 'float32',
				'angle' , ['[]','float32',2],
				'depth' , 'float32',
				'deviation' , 'float32',
				'extent', 'uint16',
				'fade' , 'float32',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyV31 =[
				'flags' , 'uint8',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV31 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV31 =[
				'day', this.PackMapEnvDataSkyCardAttributesV31,
				'night', this.PackMapEnvDataSkyCardAttributesV31,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV31 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV31),
						];

						this.PackMapEnvDataWaterV31 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'patternEdge' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataWindV31 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV31 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV31),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV31),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV31),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV31),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV31),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV31),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV31),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV31),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV31),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV31 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV31 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV31),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV31),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV31),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV31),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV31),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV31),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV31),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV31),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV31),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV31),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV31 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV31),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV31),
						];

			},

			// => Version: 30, ReferencedFunction: 0xFF78D0
			30:function(){
						this.PackMapEnvDataLightV30 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV30 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV30),
						];

						this.PackMapEnvDataLayerAttributesV30 =[
				'density' , 'float32',
				'depth' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV30 =[
				'altitude' , 'float32',
				'cutOut' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'day', this.PackMapEnvDataLayerAttributesV30,
				'night', this.PackMapEnvDataLayerAttributesV30,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV30 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV30),
						];

						this.PackMapEnvDataEffectV30 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
						];

						this.PackMapEnvDataHazeV30 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV30 =[
				'angle' , ['[]','float32',2],
				'deviation' , 'float32',
				'extent', 'uint16',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyV30 =[
				'flags' , 'uint8',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV30 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV30 =[
				'day', this.PackMapEnvDataSkyCardAttributesV30,
				'night', this.PackMapEnvDataSkyCardAttributesV30,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV30 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV30),
						];

						this.PackMapEnvDataWaterV30 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataWindV30 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV30 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV30),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV30),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV30),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV30),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV30),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV30),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV30),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV30),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV30),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV30 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV30 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV30),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV30),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV30),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV30),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV30),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV30),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV30),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV30),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV30),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV30),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV30 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV30),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV30),
						];

			},

			// => Version: 29
			29:function(){
						this.PackMapEnvDataLightV29 =[
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'direction' , ['[]','float32',3],
						];

						this.PackMapEnvDataLightingV29 =[
				'lights', Utils.getRefArrayReader(this.PackMapEnvDataLightV29),
						];

						this.PackMapEnvDataLayerAttributesV29 =[
				'density' , 'float32',
				'depth' , 'float32',
				'haze' , 'float32',
				'lightIntensity' , 'float32',
				'velocity' , ['[]','float32',2],
						];

						this.PackMapEnvDataLayerV29 =[
				'altitude' , 'float32',
				'scale' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'day', this.PackMapEnvDataLayerAttributesV29,
				'night', this.PackMapEnvDataLayerAttributesV29,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataCloudsV29 =[
				'layers', Utils.getArrayReader(this.PackMapEnvDataLayerV29),
						];

						this.PackMapEnvDataEffectV29 =[
				'glow' , ['[]','uint8',4],
				'tintColor' , ['[]','uint8',4],
				'saturation' , 'float32',
				'tintAmount' , 'float32',
				'glowLevel' , ['[]','uint8',4],
				'glowAmplify' , 'float32',
						];

						this.PackMapEnvDataHazeV29 =[
				'distColor' , ['[]','uint8',4],
				'distRange' , ['[]','float32',2],
				'heightColor' , ['[]','uint8',4],
				'heightRange' , ['[]','float32',2],
				'depthCue' , 'float32',
						];

						this.PackMapEnvDataPFieldV29 =[
				'angle' , ['[]','float32',2],
				'deviation' , 'float32',
				'extent', 'uint16',
				'fieldDirection' , ['[]','float32',3],
				'flags' , 'uint8',
				'opacity' , ['[]','float32',2],
				'particleCount', 'uint16',
				'rotation' , ['[]','float32',2],
				'scaleX' , ['[]','float32',2],
				'scaleY' , ['[]','float32',2],
				'speed' , ['[]','float32',2],
				'texColRow', ['[]', 'uint32', 2],
				'texFPS', 'uint16',
				'texPath' , Utils.getFileNameReader(),
				'type' , 'uint8',
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyV29 =[
				'flags' , 'uint8',
				'dayHazeBottom' , 'float32',
				'dayHazeDensity' , 'float32',
				'dayHazeFalloff' , 'float32',
				'dayLightIntensity' , 'float32',
				'dayStarDensity' , 'float32',
				'nightHazeBottom' , 'float32',
				'nightHazeDensity' , 'float32',
				'nightHazeFalloff' , 'float32',
				'nightLightIntensity' , 'float32',
				'nightStarDensity' , 'float32',
						];

						this.PackMapEnvDataSkyCardAttributesV29 =[
				'azimuth' , 'float32',
				'density' , 'float32',
				'hazeDensity' , 'float32',
				'latitude' , 'float32',
				'lightIntensity' , 'float32',
				'minHaze' , 'float32',
				'scale' , ['[]','float32',2],
				'speed' , 'float32',
				'texture' , Utils.getFileNameReader(),
				'textureUV' , ['[]','float32',4],
						];

						this.PackMapEnvDataSkyCardV29 =[
				'day', this.PackMapEnvDataSkyCardAttributesV29,
				'night', this.PackMapEnvDataSkyCardAttributesV29,
				'name', Utils.getString16Reader(),
						];

						this.PackMapEnvDataSkyCardsV29 =[
				'cards', Utils.getArrayReader(this.PackMapEnvDataSkyCardV29),
						];

						this.PackMapEnvDataWaterV29 =[
				'waterFlags' , 'uint32',
				'animAmplitude' , 'float32',
				'animChoppiness' , 'float32',
				'animWind' , ['[]','float32',2],
				'bumpAmount' , 'float32',
				'bumpAngle0' , 'float32',
				'bumpAngle1' , 'float32',
				'bumpScale0' , 'float32',
				'bumpScale1' , 'float32',
				'bumpSpeed0' , 'float32',
				'bumpSpeed1' , 'float32',
				'bumpTile0' , 'float32',
				'bumpTile1' , 'float32',
				'patternAngle' , 'float32',
				'patternTile' , 'float32',
				'patternSpeed' , 'float32',
				'surfaceShallowColor' , ['[]','uint8',4],
				'surfaceDeepColor' , ['[]','uint8',4],
				'patternColor' , ['[]','uint8',4],
				'surfaceFresnel' , 'float32',
				'distortAmount' , 'float32',
				'bumpTexture' , Utils.getFileNameReader(),
				'patternTexture' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataWindV29 =[
				'azimuth' , 'uint8',
				'elevation' , 'uint8',
				'noise' , 'uint8',
				'speed' , 'uint8',
				'gust' , 'uint8',
				'gustFreq' , 'uint8',
						];

						this.PackMapEnvDataLocalV29 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV29),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV29),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV29),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV29),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV29),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV29),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV29),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV29),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV29),
				'center' , ['[]','float32',3],
				'zRange' , ['[]','float32',2],
				'fadeHorizInner' , 'float32',
				'fadeHorizOuter' , 'float32',
				'fadeVertical' , 'float32',
				'type' , 'uint8',
				'vertexArray', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEnvDataSkyModeTexV29 =[
				'texPathNE' , Utils.getFileNameReader(),
				'texPathSW' , Utils.getFileNameReader(),
				'texPathT' , Utils.getFileNameReader(),
						];

						this.PackMapEnvDataGlobalV29 =[
				'lighting', Utils.getArrayReader(this.PackMapEnvDataLightingV29),
				'clouds', Utils.getPointerReader(this.PackMapEnvDataCloudsV29),
				'effect', Utils.getRefArrayReader(this.PackMapEnvDataEffectV29),
				'haze', Utils.getRefArrayReader(this.PackMapEnvDataHazeV29),
				'particleFields', Utils.getRefArrayReader(this.PackMapEnvDataPFieldV29),
				'sky', Utils.getPointerReader(this.PackMapEnvDataSkyV29),
				'skyCards', Utils.getPointerReader(this.PackMapEnvDataSkyCardsV29),
				'water', Utils.getRefArrayReader(this.PackMapEnvDataWaterV29),
				'wind', Utils.getRefArrayReader(this.PackMapEnvDataWindV29),
				'skyModeTex', Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV29),
				'starFile' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapEnvironmentV29 =[
				'dataLocalArray', Utils.getArrayReader(this.PackMapEnvDataLocalV29),
				'dataGlobal', Utils.getPointerReader(this.PackMapEnvDataGlobalV29),
						];

			},
		}
	},

	///==================================================
	/// Chunk: laye, versions: 1, strucTab: 0x157D75C 
	///==================================================
	{
		name:'laye',
		versions:{


			// => Version: 0
			0:function(){
						this.PackMapLayerProp =[
				'guid', Utils.getQWordReader(),
				'layerIds', Utils.getArrayReader('uint32'),
						];

						this.PackMapLayer =[
				'layerId' , 'uint32',
				'metaData', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.__root=this.PackMapLayers =[
				'props', Utils.getArrayReader(this.PackMapLayerProp),
				'layers', Utils.getArrayReader(this.PackMapLayer),
						];

			},
		}
	},

	///==================================================
	/// Chunk: lght, versions: 18, strucTab: 0x157D8A8 
	///==================================================
	{
		name:'lght',
		versions:{


			// => Version: 17
			17:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapPortalData =[
				'fadeCamera' , 'float32',
				'fadeLight' , 'float32',
				'lighten' , 'float32',
				'darken' , 'float32',
						];

						this.PackMapPortalLight =[
				'guid', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'portalData', Utils.getArrayReader(this.PackMapPortalData),
				'broadId', 'uint16',
						];

						this.PackMapSpotShadow =[
				'shadowFilename' , Utils.getFileNameReader(),
						];

						this.PackMapSpotLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'upDirection' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
				'shadowData', Utils.getPointerReader(this.PackMapSpotShadow),
						];

						this.PackMapSpotLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapSpotLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims', ['[]', 'uint32', 2],
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoints', Utils.getArrayReader(['[]','float32',3]),
				'flags' , 'uint32',
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'portalLights', Utils.getArrayReader(this.PackMapPortalLight),
				'spotLights', Utils.getArrayReader(this.PackMapSpotLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 16
			16:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapPortalData =[
				'fadeCamera' , 'float32',
				'fadeLight' , 'float32',
				'lighten' , 'float32',
				'darken' , 'float32',
						];

						this.PackMapPortalLight =[
				'guid', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'portalData', Utils.getArrayReader(this.PackMapPortalData),
				'broadId', 'uint16',
						];

						this.PackMapSpotShadow =[
				'shadowFilename' , Utils.getFileNameReader(),
						];

						this.PackMapSpotLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
				'shadowData', Utils.getPointerReader(this.PackMapSpotShadow),
						];

						this.PackMapSpotLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapSpotLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims', ['[]', 'uint32', 2],
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoints', Utils.getArrayReader(['[]','float32',3]),
				'flags' , 'uint32',
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'portalLights', Utils.getArrayReader(this.PackMapPortalLight),
				'spotLights', Utils.getArrayReader(this.PackMapSpotLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 15, ReferencedFunction: 0xFFB8E0
			15:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapPortalData =[
				'fadeCamera' , 'float32',
				'fadeLight' , 'float32',
				'lighten' , 'float32',
				'darken' , 'float32',
						];

						this.PackMapPortalLight =[
				'guid', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'portalData', Utils.getArrayReader(this.PackMapPortalData),
				'broadId', 'uint16',
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapSpotLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims', ['[]', 'uint32', 2],
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoints', Utils.getArrayReader(['[]','float32',3]),
				'flags' , 'uint32',
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapLightsV15 =[
				'pointLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'portalLights', Utils.getArrayReader(this.PackMapPortalLight),
				'spotLights', Utils.getArrayReader(this.PackMapSpotLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 14
			14:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapProtalLight =[
				'guid', Utils.getQWordReader(),
				'fadeCamera' , 'float32',
				'fadeLight' , 'float32',
				'lighten' , 'float32',
				'darken' , 'float32',
				'points', Utils.getArrayReader(['[]','float32',3]),
				'broadId', 'uint16',
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapSpotLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims', ['[]', 'uint32', 2],
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoints', Utils.getArrayReader(['[]','float32',3]),
				'flags' , 'uint32',
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapLightsV14 =[
				'pointLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'portalLights', Utils.getArrayReader(this.PackMapProtalLight),
				'spotLights', Utils.getArrayReader(this.PackMapSpotLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 13, ReferencedFunction: 0xFFB780
			13:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims', ['[]', 'uint32', 2],
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoints', Utils.getArrayReader(['[]','float32',3]),
				'flags' , 'uint32',
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapLightgroups),
				'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 12, ReferencedFunction: 0xFFB4F0
			12:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims', ['[]', 'uint32', 2],
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoint' , ['[]','float32',3],
				'flags' , 'uint32',
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapLightgroups),
				'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 11, ReferencedFunction: 0xFFB4F0
			11:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
				'broadId', 'uint16',
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims', ['[]', 'uint32', 2],
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoint' , ['[]','float32',3],
				'flags' , 'uint32',
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapLightgroups),
				'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 10, ReferencedFunction: 0xFFC0D0
			10:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims', ['[]', 'uint32', 2],
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoint' , ['[]','float32',3],
				'flags' , 'uint32',
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapLightgroups),
				'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
						];

			},

			// => Version: 9, ReferencedFunction: 0xFFC010
			9:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims' , 'uint32',
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoint' , ['[]','float32',3],
				'flags' , 'uint32',
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapLightgroups),
				'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
						];

			},

			// => Version: 8, ReferencedFunction: 0xFFBF90
			8:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims' , 'uint32',
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'minExt' , ['[]','float32',3],
				'maxExt' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'floodPoint' , ['[]','float32',3],
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapLightgroups),
				'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
						];

			},

			// => Version: 7
			7:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims' , 'uint32',
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'minExt' , ['[]','float32',3],
				'maxExt' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'name', Utils.getString16Reader(),
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapLightgroups),
				'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
						];

			},

			// => Version: 6
			6:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapVolumeImage =[
				'filename' , Utils.getFileNameReader(),
				'dims' , 'uint32',
				'format' , 'uint32',
				'image', Utils.getArrayReader('uint8'),
						];

						this.PackMapVolumeLight =[
				'guid', Utils.getQWordReader(),
				'minExt' , ['[]','float32',3],
				'maxExt' , ['[]','float32',3],
				'intensities' , ['[]','float32',2],
				'pack' , ['[]','float32',4],
				'images', Utils.getArrayReader(this.PackMapVolumeImage),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapLightgroups),
				'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),
				'volumeLights', Utils.getArrayReader(this.PackMapVolumeLight),
						];

			},

			// => Version: 5, ReferencedFunction: 0xFFBE00
			5:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.PackMapPointLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
				'innerAngle' , 'float32',
				'outerAngle' , 'float32',
				'textureName' , Utils.getFileNameReader(),
						];

						this.PackMapPointLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapPointLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.__root=this.PackMapLights =[
				'pointLights', Utils.getArrayReader(this.PackMapLightgroups),
				'spotLights', Utils.getArrayReader(this.PackMapPointLightgroups),
						];

			},

			// => Version: 4, ReferencedFunction: 0xFFBC00
			4:function(){
						this.PackMapLight =[
				'position' , ['[]','float32',3],
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'offset' , 'float32',
				'amplitude' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'guid', Utils.getQWordReader(),
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.__root=this.PackMapLights =[
				'lights', Utils.getArrayReader(this.PackMapLightgroups),
						];

			},

			// => Version: 3, ReferencedFunction: 0xFFBAC0
			3:function(){
						this.PackMapLight =[
				'type' , 'uint32',
				'position' , ['[]','float32',3],
				'elevation' , 'float32',
				'azimuth' , 'float32',
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapCurve =[
				'gust' , 'float32',
				'gustFreq' , 'float32',
				'noise' , 'float32',
				'phase' , 'float32',
				'curveType' , 'uint32',
						];

						this.PackMapLightgroups =[
				'lights', Utils.getArrayReader(this.PackMapLight),
				'curves', Utils.getArrayReader(this.PackMapCurve),
						];

						this.__root=this.PackMapLights =[
				'lights', Utils.getArrayReader(this.PackMapLightgroups),
						];

			},

			// => Version: 2, ReferencedFunction: 0xFFB9A0
			2:function(){
						this.PackMapLight =[
				'type' , 'uint32',
				'position' , ['[]','float32',3],
				'elevation' , 'float32',
				'azimuth' , 'float32',
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapLightgroups =[
				'lights', Utils.getArrayReader(this.PackMapLight),
						];

						this.__root=this.PackMapLights =[
				'groups', Utils.getArrayReader(this.PackMapLightgroups),
						];

			},

			// => Version: 1
			1:function(){
						this.PackMapLight =[
				'type' , 'uint32',
				'position' , ['[]','float32',3],
				'elevation' , 'float32',
				'azimuth' , 'float32',
				'color', ['[]', 'uint8', 3],
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'farDistance' , 'float32',
						];

						this.__root=this.PackMapLights =[
				'lights', Utils.getArrayReader(this.PackMapLight),
						];

			},
		}
	},

	///==================================================
	/// Chunk: msn, versions: 3, strucTab: 0x157D980 
	///==================================================
	{
		name:'msn',
		versions:{


			// => Version: 2
			2:function(){
						this.PackMapInterestPoint =[
				'position' , ['[]','float32',3],
				'forward' , ['[]','float32',3],
				'description', Utils.getString16Reader(),
						];

						this.__root=this.MapMission =[
				'interestPoint', Utils.getArrayReader(this.PackMapInterestPoint),
						];

			},

			// => Version: 1
			1:function(){
						this.PackMapInterestPoint =[
				'position' , ['[]','float32',3],
				'forward' , ['[]','float32',3],
						];

						this.__root=this.MapMission =[
				'interestPoint', Utils.getArrayReader(this.PackMapInterestPoint),
						];

			},
		}
	},

	///==================================================
	/// Chunk: nvms, versions: 3, strucTab: 0x1580A24 
	///==================================================
	{
		name:'nvms',
		versions:{


			// => Version: 2
			2:function(){
						this.PackMapNavMeshChunkV2 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

						this.PackMapNavMeshMoverV2 =[
				'mapPropId', Utils.getQWordReader(),
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'mediatorData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapNavMeshV2 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkV2),
				'dynamicArray', Utils.getArrayReader(this.PackMapNavMeshMoverV2),
						];

			},

			// => Version: 1, ReferencedFunction: 0xFFCF40
			1:function(){
						this.PackMapNavMeshChunkV1 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapNavMeshV1 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PackMapNavMeshChunkV0 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapNavMeshV0 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: nmex, versions: 3, strucTab: 0x1580D18 
	///==================================================
	{
		name:'nmex',
		versions:{


			// => Version: 2
			2:function(){
						this.PackMapNavMeshChunkExternalV2 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'filename' , Utils.getFileNameReader(),
						];

						this.PackMapNavMeshMoverV2 =[
				'mapPropId', Utils.getQWordReader(),
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'mediatorData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapNavMeshExternalV2 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkExternalV2),
				'dynamicArray', Utils.getArrayReader(this.PackMapNavMeshMoverV2),
						];

			},

			// => Version: 1
			1:function(){
						this.PackMapNavMeshChunkExternalV1 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'filename' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapNavMeshExternalV1 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkExternalV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PackMapNavMeshChunkExternalV0 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'filename' , Utils.getFileNameReader(),
						];

						this.__root=this.PackMapNavMeshExternalV0 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'chunkArray', Utils.getArrayReader(this.PackMapNavMeshChunkExternalV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: obs, versions: 3, strucTab: 0x157D9A4 
	///==================================================
	{
		name:'obs',
		versions:{


			// => Version: 2
			2:function(){
						this.PackMapEditCollision =[
				'token' , 'uint32',
				'flags' , 'uint32',
				'bottmVertices', Utils.getArrayReader(['[]','float32',3]),
				'topVertices', Utils.getArrayReader(['[]','float32',3]),
				'name', Utils.getString16Reader(),
				'surface', Utils.getQWordReader(),
						];

						this.__root=this.MapObstacles =[
				'obstacles', Utils.getArrayReader(this.PackMapEditCollision),
						];

			},

			// => Version: 1
			1:function(){
						this.PackMapEditCollision =[
				'token' , 'uint32',
				'flags' , 'uint32',
				'bottmVertices', Utils.getArrayReader(['[]','float32',3]),
				'topVertices', Utils.getArrayReader(['[]','float32',3]),
				'name', Utils.getString16Reader(),
						];

						this.__root=this.MapObstacles =[
				'obstacles', Utils.getArrayReader(this.PackMapEditCollision),
						];

			},

			// => Version: 0
			0:function(){
						this.PackMapEditCollision =[
				'token' , 'uint32',
				'flags' , 'uint32',
				'bottmVertices', Utils.getArrayReader(['[]','float32',3]),
				'topVertices', Utils.getArrayReader(['[]','float32',3]),
						];

						this.__root=this.MapObstacles =[
				'obstacles', Utils.getArrayReader(this.PackMapEditCollision),
						];

			},
		}
	},

	///==================================================
	/// Chunk: occ, versions: 1, strucTab: 0x157DA98 
	///==================================================
	{
		name:'occ',
		versions:{


			// => Version: 0
			0:function(){
						this.MapOcclusion =[
				'token' , 'uint32',
				'flags' , 'uint32',
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'name', Utils.getString16Reader(),
						];

						this.__root=this.MapOcclusions =[
				'Occlusions', Utils.getArrayReader(this.MapOcclusion),
						];

			},
		}
	},

	///==================================================
	/// Chunk: octm, versions: 1, strucTab: 0x157DAA4 
	///==================================================
	{
		name:'octm',
		versions:{


			// => Version: 0
			0:function(){
						this.__root=this.MapOcclusionTome =[
				'enableTomeQueries' , 'uint32',
				'tome', Utils.getArrayReader('uint8'),
				'propIDMap', Utils.getArrayReader('uint8'),
				'reserved', Utils.getArrayReader('uint8'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: parm, versions: 1, strucTab: 0x157DAB0 
	///==================================================
	{
		name:'parm',
		versions:{


			// => Version: 0
			0:function(){
						this.__root=this.MapParam =[
				'rect' , ['[]','float32',4],
				'flags' , 'uint32',
				'guid', ['[]', 'uint8', 16],
						];

			},
		}
	},

	///==================================================
	/// Chunk: phys, versions: 11, strucTab: 0x157DE58 
	///==================================================
	{
		name:'phys',
		versions:{


			// => Version: 10
			10:function(){
						this.PackMapPhysicsMeshV10 =[
				'indexArray', Utils.getArrayReader('uint16'),
				'vertexArray', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.PackMapPhysicsObjectV10 =[
				'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV10),
				'sceneFilePtr', Utils.getArrayReader('uint8'),
						];

						this.PackMapPhysicsObjectRefV10 =[
				'sequence', Utils.getQWordReader(),
				'objectIndex' , 'uint32',
						];

						this.PackMapPhysicsGeometryV10 =[
				'filePath', Utils.getString16Reader(),
				'quantizedExtents' , 'uint8',
				'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV10),
				'surface', Utils.getArrayReader('uint16'),
						];

						this.PackMapPhysicsModelPropV10 =[
				'token', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelZoneV8 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelObstacleV10 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsBlockV10 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV10),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV10),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV10),
				'debrisModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV10),
				'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV8),
				'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV10),
						];

						this.__root=this.PackMapPhysicsV10 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'blockArray', Utils.getArrayReader(this.PackMapPhysicsBlockV10),
						];

			},

			// => Version: 9, ReferencedFunction: 0xFFB230
			9:function(){
						this.PackMapPhysicsMeshV9 =[
				'indexArray', Utils.getArrayReader('uint16'),
				'vertexArray', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.PackMapPhysicsObjectV9 =[
				'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV9),
				'sceneFilePtr', Utils.getArrayReader('uint8'),
						];

						this.PackMapPhysicsObjectRefV9 =[
				'sequence', Utils.getQWordReader(),
				'objectIndex' , 'uint32',
						];

						this.PackMapPhysicsGeometryV9 =[
				'filePath', Utils.getString16Reader(),
				'quantizedExtents' , 'uint8',
				'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV9),
						];

						this.PackMapPhysicsModelPropV9 =[
				'token', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelZoneV7 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelObstacleV9 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsBlockV9 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV9),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV9),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV9),
				'debrisModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV9),
				'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV7),
				'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV9),
						];

						this.__root=this.PackMapPhysicsV9 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'blockArray', Utils.getArrayReader(this.PackMapPhysicsBlockV9),
						];

			},

			// => Version: 8
			8:function(){
						this.PackMapPhysicsMeshV8 =[
				'indexArray', Utils.getArrayReader('uint16'),
				'vertexArray', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.SceneBoxShapeV7 =[
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneSphereShapeV7 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneCapsuleShapeV7 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneMeshShapeV7 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.SceneFilePhysicsV7 =[
				'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),
				'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),
				'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),
				'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),
						];

						this.ScenePathNodeV6 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'flags' , 'uint32',
				'smoothing' , 'float32',
				'singlesided' , 'uint8',
						];

						this.ScenePathV6 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV6),
				'closed' , 'uint8',
						];

						this.SceneEdgeV6 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV6 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV6),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.SceneGameSurfaceV6 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.SceneFileGameV6 =[
				'paths', Utils.getArrayReader(this.ScenePathV6),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV6),
				'surfaces', Utils.getArrayReader(this.SceneGameSurfaceV6),
						];

						this.PackMapPhysicsObjectV8 =[
				'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV8),
				'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),
				'game', Utils.getPointerReader(this.SceneFileGameV6),
						];

						this.PackMapPhysicsObjectRefV8 =[
				'sequence', Utils.getQWordReader(),
				'objectIndex' , 'uint32',
						];

						this.PackMapPhysicsGeometryV8 =[
				'filePath', Utils.getString16Reader(),
				'quantizedExtents' , 'uint8',
				'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV8),
						];

						this.PackMapPhysicsModelPropV8 =[
				'token', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelZoneV6 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelObstacleV8 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsBlockV8 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV8),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV8),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV8),
				'debrisModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV8),
				'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV6),
				'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV8),
						];

						this.__root=this.PackMapPhysicsV8 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'blockArray', Utils.getArrayReader(this.PackMapPhysicsBlockV8),
						];

			},

			// => Version: 7
			7:function(){
						this.PackMapPhysicsMeshV7 =[
				'indexArray', Utils.getArrayReader('uint16'),
				'vertexArray', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.SceneBoxShapeV7 =[
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneSphereShapeV7 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneCapsuleShapeV7 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneMeshShapeV7 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.SceneFilePhysicsV7 =[
				'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),
				'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),
				'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),
				'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),
						];

						this.ScenePathNodeV6 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'flags' , 'uint32',
				'smoothing' , 'float32',
				'singlesided' , 'uint8',
						];

						this.ScenePathV6 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV6),
				'closed' , 'uint8',
						];

						this.SceneEdgeV6 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV6 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV6),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.SceneGameSurfaceV6 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.SceneFileGameV6 =[
				'paths', Utils.getArrayReader(this.ScenePathV6),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV6),
				'surfaces', Utils.getArrayReader(this.SceneGameSurfaceV6),
						];

						this.PackMapPhysicsObjectV7 =[
				'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV7),
				'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),
				'game', Utils.getPointerReader(this.SceneFileGameV6),
						];

						this.PackMapPhysicsObjectRefV7 =[
				'sequence', Utils.getQWordReader(),
				'objectIndex' , 'uint32',
						];

						this.PackMapPhysicsGeometryV7 =[
				'filePath', Utils.getString16Reader(),
				'quantizedExtents' , 'uint8',
				'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV7),
						];

						this.PackMapPhysicsModelPropV7 =[
				'token', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelZoneV5 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelObstacleV7 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsBlockV7 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV7),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV7),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV7),
				'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV5),
				'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV7),
						];

						this.__root=this.PackMapPhysicsV7 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'blockArray', Utils.getArrayReader(this.PackMapPhysicsBlockV7),
						];

			},

			// => Version: 6, ReferencedFunction: 0xFFB210
			6:function(){
						this.PackMapPhysicsMeshV6 =[
				'indexArray', Utils.getArrayReader('uint16'),
				'vertexArray', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.SceneBoxShapeV7 =[
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneSphereShapeV7 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneCapsuleShapeV7 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneMeshShapeV7 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.SceneFilePhysicsV7 =[
				'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),
				'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),
				'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),
				'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),
						];

						this.ScenePathNodeV6 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'flags' , 'uint32',
				'smoothing' , 'float32',
				'singlesided' , 'uint8',
						];

						this.ScenePathV6 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV6),
				'closed' , 'uint8',
						];

						this.SceneEdgeV6 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV6 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV6),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.SceneGameSurfaceV6 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.SceneFileGameV6 =[
				'paths', Utils.getArrayReader(this.ScenePathV6),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV6),
				'surfaces', Utils.getArrayReader(this.SceneGameSurfaceV6),
						];

						this.PackMapPhysicsObjectV6 =[
				'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV6),
				'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),
				'game', Utils.getPointerReader(this.SceneFileGameV6),
						];

						this.PackMapPhysicsObjectRefV6 =[
				'sequence', Utils.getQWordReader(),
				'objectIndex' , 'uint32',
						];

						this.PackMapPhysicsGeometryV6 =[
				'filePath', Utils.getString16Reader(),
				'quantizedExtents' , 'uint8',
				'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV6),
						];

						this.PackMapPhysicsModelPropV6 =[
				'token', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelZoneV4 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelObstacleV6 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.__root=this.PackMapPhysicsV6 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV6),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV6),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV6),
				'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV4),
				'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV6),
						];

			},

			// => Version: 5, ReferencedFunction: 0xFFB210
			5:function(){
						this.PackMapPhysicsMeshV5 =[
				'indexArray', Utils.getArrayReader('uint16'),
				'vertexArray', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.SceneBoxShapeV7 =[
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneSphereShapeV7 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneCapsuleShapeV7 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneMeshShapeV7 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.SceneFilePhysicsV7 =[
				'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),
				'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),
				'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),
				'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),
						];

						this.ScenePathNodeV5 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
				'singlesided' , 'uint8',
						];

						this.ScenePathV5 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV5),
				'closed' , 'uint8',
						];

						this.SceneEdgeV5 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV5 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV5),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaceFlags', Utils.getArrayReader('uint32'),
						];

						this.SceneFileGameV5 =[
				'paths', Utils.getArrayReader(this.ScenePathV5),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV5),
						];

						this.PackMapPhysicsObjectV5 =[
				'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV5),
				'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),
				'game', Utils.getPointerReader(this.SceneFileGameV5),
						];

						this.PackMapPhysicsObjectRefV5 =[
				'sequence', Utils.getQWordReader(),
				'objectIndex' , 'uint32',
						];

						this.PackMapPhysicsGeometryV5 =[
				'filePath', Utils.getString16Reader(),
				'quantizedExtents' , 'uint8',
				'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV5),
						];

						this.PackMapPhysicsModelPropV5 =[
				'token', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelZoneV3 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelObstacleV5 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.__root=this.PackMapPhysicsV5 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV5),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV5),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV5),
				'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV3),
				'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV5),
						];

			},

			// => Version: 4, ReferencedFunction: 0xFFB210
			4:function(){
						this.PackMapPhysicsMeshV4 =[
				'indexArray', Utils.getArrayReader('uint16'),
				'vertexArray', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.SceneBoxShapeV7 =[
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneSphereShapeV7 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneCapsuleShapeV7 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneMeshShapeV7 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.SceneFilePhysicsV7 =[
				'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),
				'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),
				'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),
				'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),
						];

						this.ScenePathNodeV5 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
				'singlesided' , 'uint8',
						];

						this.ScenePathV5 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV5),
				'closed' , 'uint8',
						];

						this.SceneEdgeV5 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV5 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV5),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaceFlags', Utils.getArrayReader('uint32'),
						];

						this.SceneFileGameV5 =[
				'paths', Utils.getArrayReader(this.ScenePathV5),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV5),
						];

						this.PackMapPhysicsObjectV4 =[
				'mesh', Utils.getPointerReader(this.PackMapPhysicsMeshV4),
				'physics', Utils.getPointerReader(this.SceneFilePhysicsV7),
				'game', Utils.getPointerReader(this.SceneFileGameV5),
						];

						this.PackMapPhysicsObjectRefV4 =[
				'sequence', Utils.getQWordReader(),
				'objectIndex' , 'uint32',
						];

						this.PackMapPhysicsGeometryV4 =[
				'filePath', Utils.getFileNameReader(),
				'quantizedExtents' , 'uint8',
				'objRefArray', Utils.getArrayReader(this.PackMapPhysicsObjectRefV4),
						];

						this.PackMapPhysicsModelPropV4 =[
				'token', Utils.getQWordReader(),
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelZoneV2 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',4],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelObstacleV4 =[
				'translate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.__root=this.PackMapPhysicsV4 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'objectArray', Utils.getArrayReader(this.PackMapPhysicsObjectV4),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV4),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV4),
				'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV2),
				'obsModelArray', Utils.getArrayReader(this.PackMapPhysicsModelObstacleV4),
						];

			},

			// => Version: 3
			3:function(){
						this.PackMapPhysicsMeshV3 =[
				'indexArray', Utils.getArrayReader('uint16'),
				'vertexArray', Utils.getArrayReader(['[]','float32',3]),
				'moppCodeData', Utils.getArrayReader('uint8'),
						];

						this.PackMapPhysicsShapeDataV3 =[
				'scale' , 'float32',
				'gameDataPtr', Utils.getArrayReader('uint8'),
						];

						this.PackMapPhysicsGeometryV3 =[
				'shapeDataIndexArray', Utils.getArrayReader('uint32'),
						];

						this.PackMapPhysicsModelPropV3 =[
				'token', ['[]', 'uint32', 2],
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelZoneV1 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.__root=this.PackMapPhysicsV3 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'meshArray', Utils.getArrayReader(this.PackMapPhysicsMeshV3),
				'shapeArray', Utils.getArrayReader(this.PackMapPhysicsShapeDataV3),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV3),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV3),
				'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV1),
						];

			},

			// => Version: 2, ReferencedFunction: 0xFFB1F0
			2:function(){
						this.PackMapPhysicsShapeDataV2 =[
				'scale' , 'float32',
				'gameDataPtr', Utils.getArrayReader('uint8'),
						];

						this.PackMapPhysicsGeometryV2 =[
				'shapeDataIndexArray', Utils.getArrayReader('uint32'),
						];

						this.PackMapPhysicsModelPropV2 =[
				'token', ['[]', 'uint32', 2],
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.PackMapPhysicsModelZoneV0 =[
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.__root=this.PackMapPhysicsV2 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'shapeArray', Utils.getArrayReader(this.PackMapPhysicsShapeDataV2),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV2),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV2),
				'zoneModelArray', Utils.getArrayReader(this.PackMapPhysicsModelZoneV0),
						];

			},

			// => Version: 1, ReferencedFunction: 0xFFB1D0
			1:function(){
						this.PackMapPhysicsShapeDataV1 =[
				'scale' , 'float32',
				'gameDataPtr', Utils.getArrayReader('uint8'),
						];

						this.PackMapPhysicsGeometryV1 =[
				'shapeDataIndexArray', Utils.getArrayReader('uint32'),
						];

						this.PackMapPhysicsModelPropV1 =[
				'token', ['[]', 'uint32', 2],
				'scale' , 'float32',
				'translate' , ['[]','float32',3],
				'rotate' , ['[]','float32',3],
				'geometryIndex' , 'uint32',
						];

						this.__root=this.PackMapPhysicsV1 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'shapeArray', Utils.getArrayReader(this.PackMapPhysicsShapeDataV1),
				'geometryArray', Utils.getArrayReader(this.PackMapPhysicsGeometryV1),
				'propModelArray', Utils.getArrayReader(this.PackMapPhysicsModelPropV1),
						];

			},
		}
	},

	///==================================================
	/// Chunk: pnvm, versions: 3, strucTab: 0x157DFC4 
	///==================================================
	{
		name:'pnvm',
		versions:{


			// => Version: 2
			2:function(){
						this.PackMapPhysicsNavMeshChunkV2 =[
				'navMeshData', Utils.getArrayReader('uint8'),
				'mediatorMoppData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPhysicsNavMeshV2 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'erosionRadius' , 'float32',
				'chunkArray', Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV2),
						];

			},

			// => Version: 1, ReferencedFunction: 0xFFD110
			1:function(){
						this.PackMapPhysicsNavMeshChunkV1 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'mediatorMoppData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPhysicsNavMeshV1 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'chunkArray', Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PackMapPhysicsNavMeshChunkV0 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'mediatorMoppData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPhysicsNavMeshV0 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'chunkArray', Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: prp2, versions: 22, strucTab: 0x157E208 
	///==================================================
	{
		name:'prp2',
		versions:{


			// => Version: 21
			21:function(){
						this.PackMapPropConstantV18 =[
				'token' , 'uint32',
				'constant' , ['[]','float32',4],
				'submodel' , 'uint32',
						];

						this.PackMapPropObjV21 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constants', Utils.getArrayReader(this.PackMapPropConstantV18),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'reserved' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV21 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constants', Utils.getArrayReader(this.PackMapPropConstantV18),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'reserved' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropTransformV21 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackMapPropObjInstanceV21 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constants', Utils.getArrayReader(this.PackMapPropConstantV18),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'reserved' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'transforms', Utils.getArrayReader(this.PackMapPropTransformV21),
				'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjToolV21 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjMetaV21 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constants', Utils.getArrayReader(this.PackMapPropConstantV18),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'reserved' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV21 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV21 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV21),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV21),
				'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV21),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV21),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV21),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV21),
				'reserved', Utils.getString16Reader(),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 20
			20:function(){
						this.PackMapPropConstantV17 =[
				'token' , 'uint32',
				'constant' , ['[]','float32',4],
				'submodel' , 'uint32',
						];

						this.PackMapPropObjV20 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constants', Utils.getArrayReader(this.PackMapPropConstantV17),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV20 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constants', Utils.getArrayReader(this.PackMapPropConstantV17),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropTransformV20 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackMapPropObjInstanceV20 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constants', Utils.getArrayReader(this.PackMapPropConstantV17),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'transforms', Utils.getArrayReader(this.PackMapPropTransformV20),
				'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjToolV20 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjMetaV20 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constants', Utils.getArrayReader(this.PackMapPropConstantV17),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV20 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV20 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV20),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV20),
				'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV20),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV20),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV20),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV20),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 19
			19:function(){
						this.PackMapPropObjV19 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constTokens', Utils.getArrayReader('uint32'),
				'constValues', Utils.getArrayReader(['[]','float32',4]),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV19 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constTokens', Utils.getArrayReader('uint32'),
				'constValues', Utils.getArrayReader(['[]','float32',4]),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropTransformV19 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackMapPropObjInstanceV19 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constTokens', Utils.getArrayReader('uint32'),
				'constValues', Utils.getArrayReader(['[]','float32',4]),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'transforms', Utils.getArrayReader(this.PackMapPropTransformV19),
				'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjToolV19 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjMetaV19 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'constTokens', Utils.getArrayReader('uint32'),
				'constValues', Utils.getArrayReader(['[]','float32',4]),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV19 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV19 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV19),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV19),
				'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV19),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV19),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV19),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV19),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 18
			18:function(){
						this.PackMapPropObjV18 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV18 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropTransformV18 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackMapPropObjInstanceV18 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'transforms', Utils.getArrayReader(this.PackMapPropTransformV18),
				'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjToolV18 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjMetaV18 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'sortLayer' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV18 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV18 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV18),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV18),
				'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV18),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV18),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV18),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV18),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 17, ReferencedFunction: 0xFFA800
			17:function(){
						this.PackMapPropObjV17 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV17 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropTransformV17 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackMapPropObjInstanceV17 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'transforms', Utils.getArrayReader(this.PackMapPropTransformV17),
				'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjToolV17 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjMetaV17 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV17 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV17 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV17),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV17),
				'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV17),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV17),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV17),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV17),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 16
			16:function(){
						this.PackMapPropObjV16 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV16 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropTransformV16 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackMapPropObjInstanceV16 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'transforms', Utils.getArrayReader(this.PackMapPropTransformV16),
				'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjToolV16 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjMetaV16 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'permutation', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV16 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV16 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV16),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV16),
				'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV16),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV16),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV16),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV16),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 15
			15:function(){
						this.PackMapPropObjV15 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV15 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropTransformV15 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackMapPropObjInstanceV15 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'transforms', Utils.getArrayReader(this.PackMapPropTransformV15),
				'origGuidArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjToolV15 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjMetaV15 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'bounds' , ['[]','float32',4],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV15 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV15 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV15),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV15),
				'propInstanceArray', Utils.getArrayReader(this.PackMapPropObjInstanceV15),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV15),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV15),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV15),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 14, ReferencedFunction: 0xFFA790
			14:function(){
						this.PackMapPropObjV14 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV14 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV14 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjMetaV14 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'bucketId', 'uint16',
				'byte' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV14 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV14 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV14),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV14),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV14),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV14),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV14),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 13
			13:function(){
						this.PackMapPropObjV13 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV13 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV13 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapPropObjMetaV13 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'byte' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV13 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'children', Utils.getArrayReader(Utils.getQWordReader()),
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV13 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV13),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV13),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV13),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV13),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV13),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 12, ReferencedFunction: 0xFF95A0
			12:function(){
						this.PackMapPropObjV12 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV12 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV12 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
						];

						this.PackMapPropObjMetaV12 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'byte' , 'uint8',
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'parent', Utils.getQWordReader(),
				'glomOrigin' , ['[]','float32',3],
						];

						this.PackMapPropObjVolumeV12 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomType' , 'uint8',
				'glomClipScale' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV12 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV12),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV12),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV12),
				'propMetaArray', Utils.getArrayReader(this.PackMapPropObjMetaV12),
				'propVolumeArray', Utils.getArrayReader(this.PackMapPropObjVolumeV12),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 11, ReferencedFunction: 0xFF93A0
			11:function(){
						this.PackMapPropObjV11 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV11 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'broadId', 'uint16',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV11 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomOrigin' , ['[]','float32',3],
				'glomClipScale' , ['[]','float32',3],
				'glomTargetId', Utils.getQWordReader(),
				'glomType' , 'uint8',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapPropV11 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV11),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV11),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV11),
				'broadPhase', this.PackBroadphaseType,
				'nextBroadId' , 'uint32',
						];

			},

			// => Version: 10, ReferencedFunction: 0xFFACB0
			10:function(){
						this.PackMapPropObjV10 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV10 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV10 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomOrigin' , ['[]','float32',3],
				'glomClipScale' , ['[]','float32',3],
				'glomTargetId', Utils.getQWordReader(),
				'glomType' , 'uint8',
						];

						this.__root=this.PackMapPropV10 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV10),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV10),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV10),
						];

			},

			// => Version: 9, ReferencedFunction: 0xFFAB60
			9:function(){
						this.PackMapPropObjV9 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV9 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV9 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomOrigin' , ['[]','float32',3],
				'glomClipScale' , ['[]','float32',3],
				'glomTargetId', Utils.getQWordReader(),
				'glomType' , 'uint8',
						];

						this.__root=this.PackMapPropV9 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV9),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV9),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV9),
						];

			},

			// => Version: 8
			8:function(){
						this.PackMapPropObjV8 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV8 =[
				'filename' , Utils.getFileNameReader(),
				'blitTextures', Utils.getArrayReader(Utils.getFileNameReader()),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV8 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomOrigin' , ['[]','float32',3],
				'glomClipScale' , ['[]','float32',3],
				'glomTargetId', Utils.getQWordReader(),
				'glomType' , 'uint8',
						];

						this.__root=this.PackMapPropV8 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV8),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV8),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV8),
						];

			},

			// => Version: 7, ReferencedFunction: 0xFFAB10
			7:function(){
						this.PackMapPropObjV7 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV7 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'color' , ['[]','uint8',4],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV7 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomOrigin' , ['[]','float32',3],
				'glomClipScale' , ['[]','float32',3],
				'glomTargetId', Utils.getQWordReader(),
				'glomType' , 'uint8',
						];

						this.__root=this.PackMapPropV7 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV7),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV7),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV7),
						];

			},

			// => Version: 6, ReferencedFunction: 0xFFA960
			6:function(){
						this.PackMapPropObjV6 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV6 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
				'lod1' , 'float32',
				'lod2' , 'float32',
				'flags' , 'uint32',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV6 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomOrigin' , ['[]','float32',3],
				'glomClipScale' , ['[]','float32',3],
				'glomTargetId', Utils.getQWordReader(),
				'glomType' , 'uint8',
						];

						this.__root=this.PackMapPropV6 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV6),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV6),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV6),
						];

			},

			// => Version: 5
			5:function(){
						this.PackMapPropObjV5 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
				'lod1', 'uint16',
				'lod2', 'uint16',
				'flags' , 'uint32',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV5 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
				'lod1', 'uint16',
				'lod2', 'uint16',
				'flags' , 'uint32',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV5 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
				'glomOrigin' , ['[]','float32',3],
				'glomClipScale' , ['[]','float32',3],
				'glomTargetId', Utils.getQWordReader(),
				'glomType' , 'uint8',
						];

						this.__root=this.PackMapPropV5 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV5),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV5),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV5),
						];

			},

			// => Version: 4
			4:function(){
						this.PackMapPropObjV4 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
				'lod1', 'uint16',
				'lod2', 'uint16',
				'flags' , 'uint32',
				'byte' , 'uint8',
						];

						this.PackMapPropObjAnimSeqV4 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
				'lod1', 'uint16',
				'lod2', 'uint16',
				'flags' , 'uint32',
				'byte' , 'uint8',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV4 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
						];

						this.__root=this.PackMapPropV4 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV4),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV4),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV4),
						];

			},

			// => Version: 3
			3:function(){
						this.PackMapPropObjV3 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
				'lod1', 'uint16',
				'lod2', 'uint16',
				'flags' , 'uint32',
						];

						this.PackMapPropObjAnimSeqV3 =[
				'filename' , Utils.getFileNameReader(),
				'guid', Utils.getQWordReader(),
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
				'lod1', 'uint16',
				'lod2', 'uint16',
				'flags' , 'uint32',
				'animSequence', Utils.getQWordReader(),
						];

						this.PackMapPropObjToolV3 =[
				'guid', Utils.getQWordReader(),
				'layerMask' , 'uint32',
						];

						this.__root=this.PackMapPropV3 =[
				'propArray', Utils.getArrayReader(this.PackMapPropObjV3),
				'propAnimArray', Utils.getArrayReader(this.PackMapPropObjAnimSeqV3),
				'propToolArray', Utils.getArrayReader(this.PackMapPropObjToolV3),
						];

			},
		}
	},

	///==================================================
	/// Chunk: reso, versions: 2, strucTab: 0x157EBD0 
	///==================================================
	{
		name:'reso',
		versions:{


			// => Version: 1
			1:function(){
						this.PackMapResourceMapNodeItemV1 =[
				'filename' , Utils.getFileNameReader(),
				'type' , 'uint32',
				'permutation', Utils.getQWordReader(),
						];

						this.PackMapResourceMapNodeV1 =[
				'position' , ['[]','float32',3],
				'flags' , 'uint32',
				'itemArray', Utils.getArrayReader(this.PackMapResourceMapNodeItemV1),
						];

						this.__root=this.PackMapResourceMapV1 =[
				'nodeArray', Utils.getArrayReader(this.PackMapResourceMapNodeV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PackMapResourceMapNodeItemV0 =[
				'filename' , Utils.getFileNameReader(),
				'type' , 'uint32',
						];

						this.PackMapResourceMapNodeV0 =[
				'position' , ['[]','float32',3],
				'flags' , 'uint32',
				'itemArray', Utils.getArrayReader(this.PackMapResourceMapNodeItemV0),
						];

						this.__root=this.PackMapResourceMapV0 =[
				'nodeArray', Utils.getArrayReader(this.PackMapResourceMapNodeV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: rive, versions: 6, strucTab: 0x157EED8 
	///==================================================
	{
		name:'rive',
		versions:{


			// => Version: 5, ReferencedFunction: 0xFFCFE0
			5:function(){
						this.PackMapRiverProperty =[
				'type' , 'uint32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.MapRiverReach =[
				'properties', Utils.getArrayReader(this.PackMapRiverProperty),
						];

						this.MapRiver =[
				'guid', Utils.getQWordReader(),
				'name', Utils.getString16Reader(),
				'properties', Utils.getArrayReader(this.PackMapRiverProperty),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'reaches', Utils.getArrayReader(this.MapRiverReach),
						];

						this.__root=this.PackMapRivers =[
				'rivers', Utils.getArrayReader(this.MapRiver),
						];

			},

			// => Version: 4
			4:function(){
						this.MapRiverTextureMap =[
				'scale' , 'float32',
				'speedX' , 'float32',
				'speedY' , 'float32',
				'tiling' , 'float32',
				'flags' , 'uint32',
				'uvIndex' , 'uint8',
						];

						this.MapRiverMaterial =[
				'materialFile' , Utils.getFileNameReader(),
				'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),
				'flags' , 'uint32',
						];

						this.MapRiverReach =[
				'width' , 'float32',
				'curveLength' , 'float32',
				'curvePercent' , 'float32',
				'xTessellation' , 'uint32',
				'yTessellation', ['[]', 'uint32', 2],
				'broadId' , 'uint32',
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materials', Utils.getArrayReader(this.MapRiverMaterial),
				'reserved', Utils.getString16Reader(),
						];

						this.MapRiver =[
				'guid', Utils.getQWordReader(),
				'name', Utils.getString16Reader(),
				'xTiling' , 'float32',
				'points', Utils.getArrayReader(['[]','float32',3]),
				'reaches', Utils.getArrayReader(this.MapRiverReach),
				'flags' , 'uint32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapRivers =[
				'flags' , 'uint32',
				'nextBroadId' , 'uint32',
				'rivers', Utils.getArrayReader(this.MapRiver),
				'broadPhase', this.PackBroadphaseType,
						];

			},

			// => Version: 3
			3:function(){
						this.MapRiverTextureMap =[
				'scale' , 'float32',
				'speedX' , 'float32',
				'speedY' , 'float32',
				'tiling' , 'float32',
				'uvIndex' , 'uint8',
						];

						this.MapRiverMaterial =[
				'materialFile' , Utils.getFileNameReader(),
				'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),
						];

						this.MapRiverReach =[
				'width' , 'float32',
				'curveLength' , 'float32',
				'curvePercent' , 'float32',
				'xTessellation' , 'uint32',
				'yTessellation', ['[]', 'uint32', 2],
				'broadId' , 'uint32',
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materials', Utils.getArrayReader(this.MapRiverMaterial),
						];

						this.MapRiver =[
				'guid', Utils.getQWordReader(),
				'name', Utils.getString16Reader(),
				'xTiling' , 'float32',
				'points', Utils.getArrayReader(['[]','float32',3]),
				'reaches', Utils.getArrayReader(this.MapRiverReach),
				'flags' , 'uint32',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapRivers =[
				'flags' , 'uint32',
				'nextBroadId' , 'uint32',
				'rivers', Utils.getArrayReader(this.MapRiver),
				'broadPhase', this.PackBroadphaseType,
						];

			},

			// => Version: 2
			2:function(){
						this.MapRiverTextureMap =[
				'scale' , 'float32',
				'speedX' , 'float32',
				'speedY' , 'float32',
				'tiling' , 'float32',
				'uvIndex' , 'uint8',
						];

						this.MapRiverMaterial =[
				'materialFile' , Utils.getFileNameReader(),
				'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),
						];

						this.MapRiverReach =[
				'width' , 'float32',
				'curveLength' , 'float32',
				'curvePercent' , 'float32',
				'xTessellation' , 'uint32',
				'yTessellation', ['[]', 'uint32', 2],
				'broadId' , 'uint32',
				'fvf' , 'uint32',
				'materials', Utils.getArrayReader(this.MapRiverMaterial),
						];

						this.MapRiver =[
				'guid', Utils.getQWordReader(),
				'name', Utils.getString16Reader(),
				'xTiling' , 'float32',
				'points', Utils.getArrayReader(['[]','float32',3]),
				'reaches', Utils.getArrayReader(this.MapRiverReach),
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapRivers =[
				'flags' , 'uint32',
				'nextBroadId' , 'uint32',
				'rivers', Utils.getArrayReader(this.MapRiver),
				'broadPhase', this.PackBroadphaseType,
						];

			},

			// => Version: 1
			1:function(){
						this.MapRiverTextureMap =[
				'scale' , 'float32',
				'speedX' , 'float32',
				'speedY' , 'float32',
				'tiling' , 'float32',
				'uvIndex' , 'uint8',
						];

						this.MapRiverMaterial =[
				'materialFile' , Utils.getFileNameReader(),
				'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),
						];

						this.MapRiverReach =[
				'width' , 'float32',
				'curveLength' , 'float32',
				'curvePercent' , 'float32',
				'xTessellation' , 'uint32',
				'yTessellation', ['[]', 'uint32', 2],
				'broadId' , 'uint32',
				'materials', Utils.getArrayReader(this.MapRiverMaterial),
						];

						this.MapRiver =[
				'guid', Utils.getQWordReader(),
				'name', Utils.getString16Reader(),
				'xTiling' , 'float32',
				'points', Utils.getArrayReader(['[]','float32',3]),
				'reaches', Utils.getArrayReader(this.MapRiverReach),
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapRivers =[
				'flags' , 'uint32',
				'nextBroadId' , 'uint32',
				'rivers', Utils.getArrayReader(this.MapRiver),
				'broadPhase', this.PackBroadphaseType,
						];

			},

			// => Version: 0
			0:function(){
						this.MapRiverTextureMap =[
				'scale' , 'float32',
				'speed' , 'float32',
				'tiling' , 'float32',
				'uvIndex' , 'uint8',
						];

						this.MapRiverMaterial =[
				'materialFile' , Utils.getFileNameReader(),
				'textureFiles', Utils.getArrayReader(Utils.getFileNameReader()),
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'textureMaps', Utils.getArrayReader(this.MapRiverTextureMap),
						];

						this.MapRiverReach =[
				'width' , 'float32',
				'curveLength' , 'float32',
				'curvePercent' , 'float32',
				'xTessellation' , 'uint32',
				'yTessellation', ['[]', 'uint32', 2],
				'broadId' , 'uint32',
				'materials', Utils.getArrayReader(this.MapRiverMaterial),
						];

						this.MapRiver =[
				'guid', Utils.getQWordReader(),
				'xTiling' , 'float32',
				'points', Utils.getArrayReader(['[]','float32',3]),
				'reaches', Utils.getArrayReader(this.MapRiverReach),
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapRivers =[
				'flags' , 'uint32',
				'nextBroadId' , 'uint32',
				'rivers', Utils.getArrayReader(this.MapRiver),
				'broadPhase', this.PackBroadphaseType,
						];

			},
		}
	},

	///==================================================
	/// Chunk: tlfs, versions: 1, strucTab: 0x157DBB8 
	///==================================================
	{
		name:'tlfs',
		versions:{


			// => Version: 0
			0:function(){
						this.PackMapToolFsFileV0 =[
				'filename', Utils.getFileNameReader(),
				'time', Utils.getQWordReader(),
				'dataPtr', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapToolFsV0 =[
				'filePtr', Utils.getArrayReader(this.PackMapToolFsFileV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: shex, versions: 2, strucTab: 0x157F268 
	///==================================================
	{
		name:'shex',
		versions:{


			// => Version: 1
			1:function(){
						this.__root=this.PackMapShadowExtV1 =[
				'filename' , Utils.getFileNameReader(),
				'shadowDims', ['[]', 'uint32', 2],
						];

			},
		}
	},

	///==================================================
	/// Chunk: shor, versions: 4, strucTab: 0x157F380 
	///==================================================
	{
		name:'shor',
		versions:{


			// => Version: 3, ReferencedFunction: 0xFFB300
			3:function(){
						this.MapShoreChain =[
				'offset' , 'float32',
				'opacity' , 'float32',
				'animationSpeed' , 'float32',
				'edgeSize' , ['[]','float32',2],
				'flags' , 'uint32',
				'points', Utils.getArrayReader(['[]','float32',2]),
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'restTime' , 'float32',
				'fadeRanges', ['[]', ['[]','float32',2], 4],
				'simplifyDistMin' , 'float32',
				'simplifyDistMax' , 'float32',
				'simplifyDot' , 'float32',
						];

						this.__root=this.MapShore =[
				'chains', Utils.getArrayReader(this.MapShoreChain),
						];

			},

			// => Version: 2
			2:function(){
						this.MapShoreChain =[
				'offset' , 'float32',
				'opacity' , 'float32',
				'animationSpeed' , 'float32',
				'edgeSize' , ['[]','float32',2],
				'flags' , 'uint32',
				'points', Utils.getArrayReader(['[]','float32',2]),
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'restTime' , 'float32',
				'fadeRanges', ['[]', ['[]','float32',2], 4],
						];

						this.__root=this.MapShore =[
				'chains', Utils.getArrayReader(this.MapShoreChain),
						];

			},
		}
	},

	///==================================================
	/// Chunk: snd, versions: 1, strucTab: 0x157F584 
	///==================================================
	{
		name:'snd',
		versions:{


			// => Version: 0
			0:function(){
						this.__root=this.MapLegacy =[
				'data', Utils.getArrayReader('uint8'),
				'files', Utils.getArrayReader(Utils.getFileNameReader()),
						];

			},
		}
	},

	///==================================================
	/// Chunk: surf, versions: 3, strucTab: 0x157F560 
	///==================================================
	{
		name:'surf',
		versions:{


			// => Version: 2
			2:function(){
						this.MapSurfaceAttribute =[
				'Id', Utils.getQWordReader(),
				'Sound', Utils.getQWordReader(),
				'flags' , 'uint32',
						];

						this.MapSurfaceAttributeTool =[
				'name', Utils.getString16Reader(),
				'category', Utils.getString16Reader(),
				'color' , ['[]','uint8',4],
						];

						this.MapSurfaceOverride =[
				'surfaceId', Utils.getQWordReader(),
				'bitArray', Utils.getArrayReader('uint32'),
						];

						this.MapSurfaceTerrainOverride =[
				'chunkCoord', ['[]', 'uint32', 2],
				'overrideArray', Utils.getArrayReader(this.MapSurfaceOverride),
						];

						this.MapSurfacePropOverride =[
				'propId', Utils.getQWordReader(),
				'overrideArray', Utils.getArrayReader(this.MapSurfaceOverride),
						];

						this.__root=this.MapSurfaces =[
				'attributeData', Utils.getArrayReader(this.MapSurfaceAttribute),
				'toolData', Utils.getArrayReader(this.MapSurfaceAttributeTool),
				'terrainArray', Utils.getArrayReader(this.MapSurfaceTerrainOverride),
				'propArray', Utils.getArrayReader(this.MapSurfacePropOverride),
						];

			},

			// => Version: 1
			1:function(){
						this.MapSurfaceAttribute =[
				'Id', Utils.getQWordReader(),
				'Sound', Utils.getQWordReader(),
				'flags' , 'uint32',
						];

						this.MapSurfaceAttributeTool =[
				'name', Utils.getString16Reader(),
				'category', Utils.getString16Reader(),
				'color' , ['[]','uint8',4],
						];

						this.__root=this.MapSurfaces =[
				'attributeData', Utils.getArrayReader(this.MapSurfaceAttribute),
				'toolData', Utils.getArrayReader(this.MapSurfaceAttributeTool),
						];

			},

			// => Version: 0
			0:function(){
						this.MapSurfaceMeta =[
				'index', 'uint16',
				'descriptor' , 'uint8',
				'data' , 'uint8',
						];

						this.MapSurfaceChunk =[
				'coord', ['[]', 'uint32', 3],
				'metadata', Utils.getArrayReader(this.MapSurfaceMeta),
				'typeData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.MapSurfaces =[
				'chunkData', Utils.getArrayReader(this.MapSurfaceChunk),
				'typeData', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},
		}
	},

	///==================================================
	/// Chunk: zon2, versions: 22, strucTab: 0x1580230 
	///==================================================
	{
		name:'zon2',
		versions:{


			// => Version: 21
			21:function(){
						this.PackMapZoneModelV22 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
				'hslOffset' , ['[]','float32',3],
				'zOffsets', ['[]', 'uint8', 2],
						];

						this.PackMapZoneLayerDefV22 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'hslRanges', ['[]', ['[]','float32',2], 4],
				'instanceScaleJitter' , 'float32',
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'materialname' , Utils.getFileNameReader(),
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV22),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV22),
				'reserved', Utils.getString16Reader(),
						];

						this.PackMapZonePageV10 =[
				'flags', Utils.getArrayReader('uint8'),
				'chunkCoord', ['[]', 'uint32', 2],
				'seed' , 'uint8',
				'paintFlags', Utils.getArrayReader('uint32'),
				'string', Utils.getString16Reader(),
						];

						this.PackMapZonePageTableV10 =[
				'pageArray', Utils.getArrayReader(this.PackMapZonePageV10),
				'flags' , 'uint32',
						];

						this.PackMapZoneDefV22 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV22),
				'timeStamp', Utils.getQWordReader(),
				'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV10),
				'reserved', Utils.getString16Reader(),
						];

						this.PackMapZoneEncodingDataV22 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV22 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV22 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV22),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV22),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
				'broadId', 'uint16',
				'reserved', Utils.getString16Reader(),
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapZonesV22 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV22),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV22),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
				'string', Utils.getString16Reader(),
						];

			},

			// => Version: 20, ReferencedFunction: 0xFFC530
			20:function(){
						this.PackMapZoneModelV21 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
				'hslOffset' , ['[]','float32',3],
				'zOffsets', ['[]', 'uint8', 2],
						];

						this.PackMapZoneLayerDefV21 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'hslRanges', ['[]', ['[]','float32',2], 4],
				'instanceScaleJitter' , 'float32',
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'materialname' , Utils.getFileNameReader(),
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV21),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV21),
						];

						this.PackMapZonePageV9 =[
				'flags', Utils.getArrayReader('uint8'),
				'chunkCoord', ['[]', 'uint32', 2],
				'seed' , 'uint8',
				'paintFlags', Utils.getArrayReader('uint32'),
						];

						this.PackMapZonePageTableV9 =[
				'pageArray', Utils.getArrayReader(this.PackMapZonePageV9),
				'flags' , 'uint32',
						];

						this.PackMapZoneDefV21 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV21),
				'timeStamp', Utils.getQWordReader(),
				'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV9),
						];

						this.PackMapZoneEncodingDataV21 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV21 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV21 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV21),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV21),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapZonesV21 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV21),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV21),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 19, ReferencedFunction: 0x5EABE0
			19:function(){
						this.PackMapZoneModelV20 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
				'hslOffset' , ['[]','float32',3],
				'zOffsets', ['[]', 'uint8', 2],
						];

						this.PackMapZoneLayerDefV20 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'hslRanges', ['[]', ['[]','float32',2], 3],
				'instanceScaleJitter' , 'float32',
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'materialname' , Utils.getFileNameReader(),
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV20),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV20),
						];

						this.PackMapZonePageV8 =[
				'flags', Utils.getArrayReader('uint8'),
				'chunkCoord', ['[]', 'uint32', 2],
				'seed' , 'uint8',
				'paintFlags', Utils.getArrayReader('uint32'),
						];

						this.PackMapZonePageTableV8 =[
				'pageArray', Utils.getArrayReader(this.PackMapZonePageV8),
				'flags' , 'uint32',
						];

						this.PackMapZoneDefV20 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV20),
				'timeStamp', Utils.getQWordReader(),
				'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV8),
						];

						this.PackMapZoneEncodingDataV20 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV20 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV20 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV20),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV20),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapZonesV20 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV20),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV20),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 18, ReferencedFunction: 0xFFC4A0
			18:function(){
						this.PackMapZoneModelV19 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
				'hslOffset' , ['[]','float32',3],
				'zOffsets', ['[]', 'uint8', 2],
						];

						this.PackMapZoneLayerDefV19 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'hslRanges', ['[]', ['[]','float32',2], 4],
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'materialname' , Utils.getFileNameReader(),
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV19),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV19),
						];

						this.PackMapZonePageV7 =[
				'flags', Utils.getArrayReader('uint8'),
				'chunkCoord', ['[]', 'uint32', 2],
				'seed' , 'uint8',
				'paintFlags', Utils.getArrayReader('uint32'),
						];

						this.PackMapZonePageTableV7 =[
				'pageArray', Utils.getArrayReader(this.PackMapZonePageV7),
				'flags' , 'uint32',
						];

						this.PackMapZoneDefV19 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV19),
				'timeStamp', Utils.getQWordReader(),
				'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV7),
						];

						this.PackMapZoneEncodingDataV19 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV19 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV19 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV19),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV19),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapZonesV19 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV19),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV19),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 17, ReferencedFunction: 0xFFC3E0
			17:function(){
						this.PackMapZoneModelV18 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
				'hslOffset' , ['[]','float32',3],
				'zOffsets', ['[]', 'uint8', 2],
						];

						this.PackMapZoneLayerDefV18 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'hslRanges', ['[]', ['[]','float32',2], 3],
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'materialname' , Utils.getFileNameReader(),
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV18),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV18),
						];

						this.PackMapZonePageV6 =[
				'flags', Utils.getArrayReader('uint8'),
				'chunkCoord', ['[]', 'uint32', 2],
				'seed' , 'uint8',
				'paintFlags', Utils.getArrayReader('uint32'),
						];

						this.PackMapZonePageTableV6 =[
				'pageArray', Utils.getArrayReader(this.PackMapZonePageV6),
				'flags' , 'uint32',
						];

						this.PackMapZoneDefV18 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV18),
				'timeStamp', Utils.getQWordReader(),
				'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV6),
						];

						this.PackMapZoneEncodingDataV18 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV18 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV18 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV18),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV18),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapZonesV18 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV18),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV18),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 16, ReferencedFunction: 0xFFC1A0
			16:function(){
						this.PackMapZoneModelV17 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
				'hslOffset' , ['[]','float32',3],
						];

						this.PackMapZoneLayerDefV17 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV17),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV17),
						];

						this.PackMapZonePageV5 =[
				'flags', Utils.getArrayReader('uint8'),
				'chunkCoord', ['[]', 'uint32', 2],
				'seed' , 'uint8',
				'paintFlags', Utils.getArrayReader('uint32'),
						];

						this.PackMapZonePageTableV5 =[
				'pageArray', Utils.getArrayReader(this.PackMapZonePageV5),
				'flags' , 'uint32',
						];

						this.PackMapZoneDefV17 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV17),
				'timeStamp', Utils.getQWordReader(),
				'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV5),
						];

						this.PackMapZoneEncodingDataV17 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV17 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV17 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV17),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV17),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapZonesV17 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV17),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV17),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 15, ReferencedFunction: 0xFFC1A0
			15:function(){
						this.PackMapZoneModelV16 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
				'hslOffset' , ['[]','float32',3],
						];

						this.PackMapZoneLayerDefV16 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV16),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV16),
						];

						this.PackMapZonePageV4 =[
				'flags', Utils.getArrayReader('uint8'),
				'chunkCoord', ['[]', 'uint32', 2],
				'seed' , 'uint8',
				'paintFlags', Utils.getArrayReader('uint32'),
						];

						this.PackMapZonePageTableV4 =[
				'pageArray', Utils.getArrayReader(this.PackMapZonePageV4),
				'flags' , 'uint32',
						];

						this.PackMapZoneDefV16 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV16),
				'timeStamp', Utils.getQWordReader(),
				'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV4),
						];

						this.PackMapZoneEncodingDataV16 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV16 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV16 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV16),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV16),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
				'broadId', 'uint16',
						];

						this.PackBroadphaseType =[
				'broadphaseData', Utils.getArrayReader('uint8'),
						];

						this.__root=this.PackMapZonesV16 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV16),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV16),
				'broadPhase', this.PackBroadphaseType,
				'maxBroadId', 'uint16',
						];

			},

			// => Version: 14
			14:function(){
						this.PackMapZoneModelV15 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
				'hslOffset' , ['[]','float32',3],
						];

						this.PackMapZoneLayerDefV15 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV15),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV15),
						];

						this.PackMapZonePageV3 =[
				'flags', Utils.getArrayReader('uint8'),
				'chunkCoord', ['[]', 'uint32', 2],
				'seed' , 'uint8',
				'paintFlags', Utils.getArrayReader('uint32'),
						];

						this.PackMapZonePageTableV3 =[
				'pageArray', Utils.getArrayReader(this.PackMapZonePageV3),
				'flags' , 'uint32',
						];

						this.PackMapZoneDefV15 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV15),
				'timeStamp', Utils.getQWordReader(),
				'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV3),
						];

						this.PackMapZoneEncodingDataV15 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV15 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV15 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV15),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV15),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
						];

						this.__root=this.PackMapZonesV15 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV15),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV15),
						];

			},

			// => Version: 13
			13:function(){
						this.PackMapZoneModelV14 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapZoneLayerDefV14 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV14),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV14),
						];

						this.PackMapZonePageV2 =[
				'flags', Utils.getArrayReader('uint8'),
				'chunkCoord', ['[]', 'uint32', 2],
				'seed' , 'uint8',
				'paintFlags', Utils.getArrayReader('uint32'),
						];

						this.PackMapZonePageTableV2 =[
				'pageArray', Utils.getArrayReader(this.PackMapZonePageV2),
				'flags' , 'uint32',
						];

						this.PackMapZoneDefV14 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV14),
				'timeStamp', Utils.getQWordReader(),
				'pageTable', Utils.getPointerReader(this.PackMapZonePageTableV2),
						];

						this.PackMapZoneEncodingDataV14 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV14 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV14 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV14),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV14),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
						];

						this.__root=this.PackMapZonesV14 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV14),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV14),
						];

			},

			// => Version: 12
			12:function(){
						this.PackMapZoneModelV13 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapZoneLayerDefV13 =[
				'type' , 'uint8',
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV13),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV13),
						];

						this.PackMapZoneDefV13 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV13),
				'timeStamp', Utils.getQWordReader(),
						];

						this.PackMapZoneEncodingDataV13 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV13 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV13 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV13),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV13),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
						];

						this.__root=this.PackMapZonesV13 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV13),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV13),
						];

			},

			// => Version: 11
			11:function(){
						this.PackMapZoneModelV12 =[
				'filename' , Utils.getFileNameReader(),
				'probability' , 'float32',
				'flags' , 'uint32',
						];

						this.PackMapZoneLayerDefV12 =[
				'height' , 'uint8',
				'width' , 'uint8',
				'radiusGround' , 'uint8',
				'sortGroup' , 'uint8',
				'tiling' , 'uint8',
				'scaleRange' , ['[]','float32',2],
				'probability' , 'float32',
				'fadeRange' , ['[]','float32',2],
				'rotRange', ['[]', ['[]','float32',2], 3],
				'noise' , 'uint8',
				'layerFlags' , 'uint32',
				'modelArray', Utils.getArrayReader(this.PackMapZoneModelV12),
				'subModel', Utils.getPointerReader(this.PackMapZoneModelV12),
						];

						this.PackMapZoneDefV12 =[
				'defFilename' , Utils.getFileNameReader(),
				'token' , 'uint32',
				'layerDefArray', Utils.getArrayReader(this.PackMapZoneLayerDefV12),
				'timeStamp', Utils.getQWordReader(),
						];

						this.PackMapZoneEncodingDataV12 =[
				'index', 'uint16',
				'offset' , 'uint8',
						];

						this.PackMapZoneCollideDataV12 =[
				'normalX' , 'float32',
				'normalY' , 'float32',
				'zPos' , 'float32',
						];

						this.PackMapZoneV12 =[
				'zoneFlags' , 'uint32',
				'vertRect', ['[]', 'uint32', 4],
				'waterHeight' , 'float32',
				'seed' , 'uint8',
				'defToken' , 'uint32',
				'range' , ['[]','float32',2],
				'zPos' , 'float32',
				'flags', Utils.getArrayReader('uint8'),
				'encodeData', Utils.getArrayReader(this.PackMapZoneEncodingDataV12),
				'collideData', Utils.getArrayReader(this.PackMapZoneCollideDataV12),
				'offsetData', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',2]),
						];

						this.__root=this.PackMapZonesV12 =[
				'zoneDefArray', Utils.getArrayReader(this.PackMapZoneDefV12),
				'zoneArray', Utils.getArrayReader(this.PackMapZoneV12),
						];

			},
		}
	},

	///==================================================
	/// Chunk: trn, versions: 15, strucTab: 0x157FD20 
	///==================================================
	{
		name:'trn',
		versions:{


			// => Version: 14
			14:function(){
						this.PackMapTerrainChunkV14 =[
				'chunkFlags' , 'uint32',
				'surfaceIndexArray', Utils.getArrayReader('uint16'),
				'surfaceTokenArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackMapTerrainConstV14 =[
				'tokenName' , 'uint32',
				'value' , ['[]','float32',4],
						];

						this.PackMapTerrainTexV14 =[
				'tokenName' , 'uint32',
				'flags' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'flags', ['[]', 'uint32', 2],
				'layer' , 'uint32',
						];

						this.PackMapTerrainMaterialV14 =[
				'materialFile' , Utils.getFileNameReader(),
				'fvf' , 'uint32',
				'constIndexArray', Utils.getArrayReader('uint32'),
				'texIndexArray', Utils.getArrayReader('uint32'),
						];

						this.PackMapTerrainChunkUVDataV14 =[
				'translation' , ['[]','float32',2],
				'xScaleRange' , ['[]','float32',2],
				'yScaleRange' , ['[]','float32',2],
				'scaleSpeed' , ['[]','float32',2],
				'rotation' , 'float32',
						];

						this.PackMapTerrrainChunkMaterialV14 =[
				'tiling', ['[]', 'uint8', 3],
				'hiResMaterial', this.PackMapTerrainMaterialV14,
				'loResMaterial', this.PackMapTerrainMaterialV14,
				'faderMaterial', this.PackMapTerrainMaterialV14,
				'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV14),
						];

						this.PackMapTerrainMaterialsV14 =[
				'pagedImage' , Utils.getFileNameReader(),
				'constArray', Utils.getArrayReader(this.PackMapTerrainConstV14),
				'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV14),
				'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV14),
				'midFade' , ['[]','float32',2],
				'farFade' , ['[]','float32',2],
						];

						this.__root=this.PackMapTerrainV14 =[
				'dims', ['[]', 'uint32', 2],
				'swapDistance' , 'float32',
				'heightMapArray', Utils.getArrayReader('float32'),
				'tileFlagArray', Utils.getArrayReader('uint32'),
				'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV14),
				'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV14),
						];

			},

			// => Version: 13, ReferencedFunction: 0xFFCAA0
			13:function(){
						this.PackMapTerrainChunkV13 =[
				'chunkFlags' , 'uint32',
				'tileTableArray', Utils.getArrayReader('uint8'),
						];

						this.PackMapTerrainConstV13 =[
				'tokenName' , 'uint32',
				'value' , ['[]','float32',4],
						];

						this.PackMapTerrainTexV13 =[
				'tokenName' , 'uint32',
				'flags' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'flags', ['[]', 'uint32', 2],
				'layer' , 'uint32',
						];

						this.PackMapTerrainMaterialV13 =[
				'materialFile' , Utils.getFileNameReader(),
				'fvf' , 'uint32',
				'constIndexArray', Utils.getArrayReader('uint32'),
				'texIndexArray', Utils.getArrayReader('uint32'),
						];

						this.PackMapTerrainChunkUVDataV13 =[
				'translation' , ['[]','float32',2],
				'xScaleRange' , ['[]','float32',2],
				'yScaleRange' , ['[]','float32',2],
				'scaleSpeed' , ['[]','float32',2],
				'rotation' , 'float32',
						];

						this.PackMapTerrrainChunkMaterialV13 =[
				'tiling', ['[]', 'uint8', 3],
				'hiResMaterial', this.PackMapTerrainMaterialV13,
				'loResMaterial', this.PackMapTerrainMaterialV13,
				'faderMaterial', this.PackMapTerrainMaterialV13,
				'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV13),
						];

						this.PackMapTerrainMaterialsV13 =[
				'pagedImage' , Utils.getFileNameReader(),
				'constArray', Utils.getArrayReader(this.PackMapTerrainConstV13),
				'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV13),
				'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV13),
				'midFade' , ['[]','float32',2],
				'farFade' , ['[]','float32',2],
						];

						this.__root=this.PackMapTerrainV13 =[
				'dims', ['[]', 'uint32', 2],
				'swapDistance' , 'float32',
				'heightMapArray', Utils.getArrayReader('float32'),
				'tileFlagArray', Utils.getArrayReader('uint32'),
				'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV13),
				'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV13),
				'typeArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},

			// => Version: 12, ReferencedFunction: 0xFFC990
			12:function(){
						this.PackMapTerrainChunkV12 =[
				'chunkFlags' , 'uint32',
				'tileTableArray', Utils.getArrayReader('uint8'),
						];

						this.PackMapTerrainConstV12 =[
				'tokenName' , 'uint32',
				'value' , ['[]','float32',4],
						];

						this.PackMapTerrainTexV12 =[
				'tokenName' , 'uint32',
				'flags' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'flags', ['[]', 'uint32', 2],
				'layer' , 'uint32',
						];

						this.PackMapTerrainMaterialV12 =[
				'materialFile' , Utils.getFileNameReader(),
				'fvf' , 'uint32',
				'constIndexArray', Utils.getArrayReader('uint32'),
				'texIndexArray', Utils.getArrayReader('uint32'),
						];

						this.PackMapTerrainChunkUVDataV12 =[
				'translation' , ['[]','float32',2],
				'xScaleRange' , ['[]','float32',2],
				'yScaleRange' , ['[]','float32',2],
				'scaleSpeed' , ['[]','float32',2],
				'rotation' , 'float32',
						];

						this.PackMapTerrrainChunkMaterialV12 =[
				'tiling', ['[]', 'uint8', 3],
				'hiResMaterial', this.PackMapTerrainMaterialV12,
				'loResMaterial', this.PackMapTerrainMaterialV12,
				'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV12),
						];

						this.PackMapTerrainMaterialsV12 =[
				'pagedImage' , Utils.getFileNameReader(),
				'constArray', Utils.getArrayReader(this.PackMapTerrainConstV12),
				'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV12),
				'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV12),
						];

						this.__root=this.PackMapTerrainV12 =[
				'dims', ['[]', 'uint32', 2],
				'swapDistance' , 'float32',
				'heightMapArray', Utils.getArrayReader('float32'),
				'tileFlagArray', Utils.getArrayReader('uint32'),
				'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV12),
				'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV12),
				'typeArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},

			// => Version: 11, ReferencedFunction: 0xFFC900
			11:function(){
						this.PackMapTerrainChunkV11 =[
				'chunkFlags' , 'uint32',
				'tileTableArray', Utils.getArrayReader('uint8'),
						];

						this.PackMapTerrainConstV11 =[
				'tokenName' , 'uint32',
				'value' , ['[]','float32',4],
						];

						this.PackMapTerrainTexV11 =[
				'tokenName' , 'uint32',
				'flags' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'flags', ['[]', 'uint32', 2],
				'layer' , 'uint32',
						];

						this.PackMapTerrainMaterialV11 =[
				'materialFile' , Utils.getFileNameReader(),
				'fvf' , 'uint32',
				'constIndexArray', Utils.getArrayReader('uint32'),
				'texIndexArray', Utils.getArrayReader('uint32'),
						];

						this.PackMapTerrainChunkUVDataV11 =[
				'translation' , ['[]','float32',2],
				'xScaleRange' , ['[]','float32',2],
				'yScaleRange' , ['[]','float32',2],
				'scaleSpeed' , ['[]','float32',2],
				'rotation' , 'float32',
						];

						this.PackMapTerrrainChunkMaterialV11 =[
				'tiling', ['[]', 'uint8', 3],
				'hiResMaterial', this.PackMapTerrainMaterialV11,
				'loResMaterial', this.PackMapTerrainMaterialV11,
				'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV11),
						];

						this.PackMapTerrainMaterialsV11 =[
				'pagedImage' , Utils.getFileNameReader(),
				'constArray', Utils.getArrayReader(this.PackMapTerrainConstV11),
				'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV11),
				'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV11),
						];

						this.__root=this.PackMapTerrainV11 =[
				'dims', ['[]', 'uint32', 2],
				'swapDistance' , 'float32',
				'heightMapArray', Utils.getArrayReader('float32'),
				'tileFlagArray', Utils.getArrayReader('uint32'),
				'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV11),
				'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV11),
				'typeArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},

			// => Version: 10
			10:function(){
						this.PackMapTerrainChunkV10 =[
				'chunkFlags' , 'uint32',
				'tileTableArray', Utils.getArrayReader('uint8'),
						];

						this.PackMapTerrainConstV10 =[
				'tokenName' , 'uint32',
				'value' , ['[]','float32',4],
						];

						this.PackMapTerrainTexV10 =[
				'tokenName' , 'uint32',
				'flags' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'flags', ['[]', 'uint32', 2],
				'layer' , 'uint32',
						];

						this.PackMapTerrainMaterialV10 =[
				'materialFile' , Utils.getFileNameReader(),
				'fvf' , 'uint32',
				'constIndexArray', Utils.getArrayReader('uint32'),
				'texIndexArray', Utils.getArrayReader('uint32'),
						];

						this.PackMapTerrainChunkUVDataV10 =[
				'translation' , ['[]','float32',2],
				'xScaleRange' , ['[]','float32',2],
				'yScaleRange' , ['[]','float32',2],
				'scaleSpeed' , ['[]','float32',2],
				'rotation' , 'float32',
						];

						this.PackMapTerrrainChunkMaterialV10 =[
				'tiling' , 'uint8',
				'hiResMaterial', this.PackMapTerrainMaterialV10,
				'loResMaterial', this.PackMapTerrainMaterialV10,
				'uvData', Utils.getPointerReader(this.PackMapTerrainChunkUVDataV10),
						];

						this.PackMapTerrainMaterialsV10 =[
				'pagedImage' , Utils.getFileNameReader(),
				'constArray', Utils.getArrayReader(this.PackMapTerrainConstV10),
				'texFileArray', Utils.getArrayReader(this.PackMapTerrainTexV10),
				'materials', Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV10),
						];

						this.__root=this.PackMapTerrainV10 =[
				'dims', ['[]', 'uint32', 2],
				'swapDistance' , 'float32',
				'heightMapArray', Utils.getArrayReader('float32'),
				'tileFlagArray', Utils.getArrayReader('uint32'),
				'chunkArray', Utils.getArrayReader(this.PackMapTerrainChunkV10),
				'materials', Utils.getPointerReader(this.PackMapTerrainMaterialsV10),
				'typeArray', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},
		}
	},

	///==================================================
	/// Chunk: trni, versions: 4, strucTab: 0x157FDD4 
	///==================================================
	{
		name:'trni',
		versions:{


			// => Version: 3, ReferencedFunction: 0xFFCB00
			3:function(){
						this.PagedImageLayerDataV3 =[
				'rawDims', ['[]', 'uint32', 2],
				'strippedDims', ['[]', 'uint32', 2],
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
				'diskFormat' , 'uint32',
						];

						this.PagedImagePageDataV3 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'solidColor' , ['[]','uint8',4],
						];

						this.PagedImageTableDataV3 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV3),
				'rawPages', Utils.getArrayReader(this.PagedImagePageDataV3),
				'strippedPages', Utils.getArrayReader(this.PagedImagePageDataV3),
				'flags' , 'uint32',
						];

						this.PagedImageEmbeddedPageDataV3 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'data', Utils.getArrayReader('uint8'),
						];

						this.PagedImageEmbeddedPagesDataV3 =[
				'rawPages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV3),
				'strippedPages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV3),
						];

						this.__root=this.MapTerrainImg =[
				'tableData', Utils.getPointerReader(this.PagedImageTableDataV3),
				'pageData', Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV3),
						];

			},

			// => Version: 2
			2:function(){
						this.PagedImageLayerDataV2 =[
				'dims', ['[]', 'uint32', 2],
				'rawDims', ['[]', 'uint32', 2],
				'diskFormat' , 'uint32',
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
						];

						this.PagedImagePageDataV2 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'solidColor' , ['[]','uint8',4],
						];

						this.PagedImageTableDataV2 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV2),
				'pages', Utils.getArrayReader(this.PagedImagePageDataV2),
				'flags' , 'uint32',
						];

						this.PagedImageEmbeddedPageDataV2 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'rawData', Utils.getArrayReader('uint8'),
				'compressedData', Utils.getArrayReader('uint8'),
						];

						this.PagedImageEmbeddedPagesDataV2 =[
				'pages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV2),
						];

						this.__root=this.MapTerrainImg =[
				'tableData', Utils.getPointerReader(this.PagedImageTableDataV2),
				'pageData', Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV2),
						];

			},

			// => Version: 1
			1:function(){
						this.PagedImageLayerDataV1 =[
				'dims', ['[]', 'uint32', 2],
				'rawDims', ['[]', 'uint32', 2],
				'diskFormat' , 'uint32',
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
						];

						this.PagedImagePageDataV1 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'solidColor' , ['[]','uint8',4],
						];

						this.PagedImageTableDataV1 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV1),
				'pages', Utils.getArrayReader(this.PagedImagePageDataV1),
						];

						this.PagedImageEmbeddedPageDataV1 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'rawData', Utils.getArrayReader('uint8'),
				'compressedData', Utils.getArrayReader('uint8'),
						];

						this.PagedImageEmbeddedPagesDataV1 =[
				'pages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV1),
						];

						this.__root=this.MapTerrainImg =[
				'tableData', Utils.getPointerReader(this.PagedImageTableDataV1),
				'pageData', Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PagedImageLayerDataV0 =[
				'dims', ['[]', 'uint32', 2],
				'rawDims', ['[]', 'uint32', 2],
				'diskFormat' , 'uint32',
				'rawFormat' , 'uint32',
				'strippedFormat' , 'uint32',
						];

						this.PagedImagePageDataV0 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
						];

						this.PagedImageTableDataV0 =[
				'layers', Utils.getArrayReader(this.PagedImageLayerDataV0),
				'pages', Utils.getArrayReader(this.PagedImagePageDataV0),
						];

						this.PagedImageEmbeddedPageDataV0 =[
				'layer' , 'uint32',
				'coord', ['[]', 'uint32', 2],
				'rawData', Utils.getArrayReader('uint8'),
				'compressedData', Utils.getArrayReader('uint8'),
						];

						this.PagedImageEmbeddedPagesDataV0 =[
				'pages', Utils.getArrayReader(this.PagedImageEmbeddedPageDataV0),
						];

						this.__root=this.MapTerrainImg =[
				'tableData', Utils.getPointerReader(this.PagedImageTableDataV0),
				'pageData', Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: watr, versions: 1, strucTab: 0x157FE34 
	///==================================================
	{
		name:'watr',
		versions:{


			// => Version: 0
			0:function(){
						this.__root=this.PackMapWaterV0 =[
				'waterFoamData', Utils.getArrayReader('uint8'),
				'waterChunks', Utils.getArrayReader('uint32'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: edit, versions: 15, strucTab: 0x1581920 
	///==================================================
	{
		name:'edit',
		versions:{


			// => Version: 14, ReferencedFunction: 0x5EABE0
			14:function(){
						this.MapEditLayerItem =[
				'guid', Utils.getQWordReader(),
				'moduleId' , 'uint32',
				'layerFlags', Utils.getArrayReader('uint32'),
						];

						this.MapEditLayers =[
				'layerStates', Utils.getArrayReader('uint8'),
				'layerNames', Utils.getArrayReader(Utils.getString16Reader()),
				'layerIds', Utils.getArrayReader('uint32'),
				'items', Utils.getArrayReader(this.MapEditLayerItem),
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
				'zRange' , ['[]','float32',2],
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.PackMapEditDirtyChunks =[
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
						];

						this.PackMapEditSurfacePoly =[
				'name', Utils.getString16Reader(),
				'surfaceType' , 'uint32',
				'vertices', Utils.getArrayReader(['[]','float32',2]),
				'range' , ['[]','float32',2],
						];

						this.PackMapEditSurfaceRoadNode =[
				'position' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.PackMapEditSurfaceRoad =[
				'name', Utils.getString16Reader(),
				'surfaceType' , 'uint32',
				'nodes', Utils.getArrayReader(this.PackMapEditSurfaceRoadNode),
						];

						this.PackMapEditNavMeshData =[
				'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'surfacePolys', Utils.getArrayReader(this.PackMapEditSurfacePoly),
				'surfaceRoads', Utils.getArrayReader(this.PackMapEditSurfaceRoad),
						];

						this.MapEditSnapPoint =[
				'guid', Utils.getQWordReader(),
				'moduleId' , 'uint32',
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.__root=this.MapEditData =[
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
				'navMeshData', this.PackMapEditNavMeshData,
				'snapPoints', Utils.getArrayReader(this.MapEditSnapPoint),
				'mapHome', Utils.getString16Reader(),
				'homeSave' , 'uint8',
				'reserved', Utils.getString16Reader(),
						];

			},

			// => Version: 13, ReferencedFunction: 0x5EABE0
			13:function(){
						this.MapEditLayerItem =[
				'guid', Utils.getQWordReader(),
				'moduleId' , 'uint32',
				'layerFlags', Utils.getArrayReader('uint32'),
						];

						this.MapEditLayers =[
				'layerStates', Utils.getArrayReader('uint8'),
				'layerNames', Utils.getArrayReader(Utils.getString16Reader()),
				'layerIds', Utils.getArrayReader('uint32'),
				'items', Utils.getArrayReader(this.MapEditLayerItem),
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
				'zRange' , ['[]','float32',2],
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.PackMapEditDirtyChunks =[
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
						];

						this.MapEditSnapPoint =[
				'guid', Utils.getQWordReader(),
				'moduleId' , 'uint32',
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.__root=this.MapEditData =[
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
				'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'snapPoints', Utils.getArrayReader(this.MapEditSnapPoint),
				'mapHome', Utils.getString16Reader(),
				'homeSave' , 'uint8',
				'reserved', Utils.getString16Reader(),
						];

			},

			// => Version: 12, ReferencedFunction: 0x5EABE0
			12:function(){
						this.MapEditLayerItem =[
				'guid', Utils.getQWordReader(),
				'moduleId' , 'uint32',
				'layerFlags' , 'uint32',
						];

						this.MapEditLayers =[
				'layerStates', ['[]', 'uint8', 31],
				'layerNames', ['[]', Utils.getString16Reader(), 31],
				'items', Utils.getArrayReader(this.MapEditLayerItem),
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
				'zRange' , ['[]','float32',2],
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.PackMapEditDirtyChunks =[
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
						];

						this.MapEditSnapPoint =[
				'guid', Utils.getQWordReader(),
				'moduleId' , 'uint32',
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.__root=this.MapEditData =[
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
				'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'snapPoints', Utils.getArrayReader(this.MapEditSnapPoint),
				'mapHome', Utils.getString16Reader(),
				'homeSave' , 'uint8',
				'reserved', Utils.getString16Reader(),
						];

			},

			// => Version: 11
			11:function(){
						this.MapEditLayerItem =[
				'guid', Utils.getQWordReader(),
				'moduleId' , 'uint32',
				'layerFlags' , 'uint32',
						];

						this.MapEditLayers =[
				'layerStates', ['[]', 'uint8', 31],
				'layerNames', ['[]', Utils.getString16Reader(), 31],
				'items', Utils.getArrayReader(this.MapEditLayerItem),
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
				'zRange' , ['[]','float32',2],
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.PackMapEditDirtyChunks =[
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
						];

						this.MapEditSnapPoint =[
				'guid', Utils.getQWordReader(),
				'moduleId' , 'uint32',
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'scale' , 'float32',
						];

						this.__root=this.MapEditData =[
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
				'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'snapPoints', Utils.getArrayReader(this.MapEditSnapPoint),
				'mapHome', Utils.getString16Reader(),
				'homeSave' , 'uint8',
				'reserved', Utils.getString16Reader(),
						];

			},

			// => Version: 10
			10:function(){
						this.MapEditLayers =[
				'layerPropCount', ['[]', 'uint32', 31],
				'layerStates', ['[]', 'uint8', 31],
				'layerNames', ['[]', Utils.getString16Reader(), 31],
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
				'zRange' , ['[]','float32',2],
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.PackMapEditDirtyChunks =[
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
						];

						this.__root=this.MapEditData =[
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
				'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'mapHome', Utils.getString16Reader(),
				'homeSave' , 'uint8',
				'reserved', Utils.getString16Reader(),
						];

			},

			// => Version: 9
			9:function(){
						this.MapEditLayers =[
				'layerPropCount', ['[]', 'uint32', 31],
				'layerStates', ['[]', 'uint8', 31],
				'layerNames', ['[]', Utils.getString16Reader(), 31],
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
				'zRange' , ['[]','float32',2],
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.PackMapEditDirtyChunks =[
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
						];

						this.__root=this.MapEditData =[
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
				'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'mapHome', Utils.getString16Reader(),
				'homeSave' , 'uint8',
						];

			},

			// => Version: 8
			8:function(){
						this.MapEditLayers =[
				'layerPropCount', ['[]', 'uint32', 31],
				'layerStates', ['[]', 'uint8', 31],
				'layerNames', ['[]', Utils.getString16Reader(), 31],
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
				'zRange' , ['[]','float32',2],
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.PackMapEditDirtyChunks =[
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
						];

						this.__root=this.MapEditData =[
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
				'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),
						];

			},

			// => Version: 7
			7:function(){
						this.MapEditLayers =[
				'layerPropCount', ['[]', 'uint32', 31],
				'layerStates', ['[]', 'uint8', 31],
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
				'zRange' , ['[]','float32',2],
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.PackMapEditDirtyChunks =[
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
						];

						this.__root=this.MapEditData =[
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
				'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),
						];

			},

			// => Version: 6
			6:function(){
						this.MapEditRegion =[
				'regions', Utils.getArrayReader(Utils.getString16Reader()),
						];

						this.MapEditRegion =[
				'ambientColor', ['[]', 'uint8', 3],
				'directionalColor', ['[]', 'uint8', 3],
				'ambientIntenisty' , 'float32',
				'directionalIntenisty' , 'float32',
						];

						this.MapEditLayers =[
				'layerPropCount', ['[]', 'uint32', 31],
				'layerStates', ['[]', 'uint8', 31],
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.PackMapEditDirtyChunks =[
				'flags' , 'uint32',
				'position' , ['[]','float32',3],
						];

						this.__root=this.MapEditData =[
				'regions', this.MapEditRegion,
				'miniMapParams', this.MapEditRegion,
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
				'floodPoints', Utils.getArrayReader(this.PackMapEditDirtyChunks),
						];

			},

			// => Version: 5, ReferencedFunction: 0x5EABE0
			5:function(){
						this.MapEditRegion =[
				'regions', Utils.getArrayReader(Utils.getString16Reader()),
						];

						this.MapEditRegion =[
				'ambientColor', ['[]', 'uint8', 3],
				'directionalColor', ['[]', 'uint8', 3],
				'ambientIntenisty' , 'float32',
				'directionalIntenisty' , 'float32',
						];

						this.MapEditLayers =[
				'layerPropCount', ['[]', 'uint32', 31],
				'layerStates', ['[]', 'uint8', 31],
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.PackMapEditDirtyChunks =[
				'dirtyFlags' , 'uint32',
				'chunkCoord', ['[]', 'uint32', 2],
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.__root=this.MapEditData =[
				'regions', this.MapEditRegion,
				'miniMapParams', this.MapEditRegion,
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'dirtyChunks', Utils.getArrayReader(this.PackMapEditDirtyChunks),
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
						];

			},

			// => Version: 4, ReferencedFunction: 0x5EABE0
			4:function(){
						this.MapEditRegion =[
				'regions', Utils.getArrayReader(Utils.getString16Reader()),
						];

						this.MapEditRegion =[
				'ambientColor', ['[]', 'uint8', 3],
				'directionalColor', ['[]', 'uint8', 3],
				'ambientIntenisty' , 'float32',
				'directionalIntenisty' , 'float32',
						];

						this.MapEditLayers =[
				'layerPropCount', ['[]', 'uint32', 31],
				'layerStates', ['[]', 'uint8', 31],
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.__root=this.MapEditData =[
				'regions', this.MapEditRegion,
				'miniMapParams', this.MapEditRegion,
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
						];

			},

			// => Version: 3
			3:function(){
						this.MapEditRegion =[
				'regions', Utils.getArrayReader(Utils.getString16Reader()),
						];

						this.MapEditRegion =[
				'ambientColor', ['[]', 'uint8', 3],
				'directionalColor', ['[]', 'uint8', 3],
				'ambientIntenisty' , 'float32',
				'directionalIntenisty' , 'float32',
						];

						this.MapEditLayers =[
				'layerStates', Utils.getArrayReader('uint8'),
						];

						this.PackMapEditAnnotation =[
				'name', Utils.getString16Reader(),
				'flags' , 'uint32',
				'anchors', Utils.getArrayReader(['[]','float32',2]),
						];

						this.PackMapEditAnnotations =[
				'annotations', Utils.getArrayReader(this.PackMapEditAnnotation),
						];

						this.MapEditCamLocations =[
				'attack' , 'float32',
				'rotation' , 'float32',
				'position' , ['[]','float32',3],
				'name', Utils.getString16Reader(),
						];

						this.__root=this.MapEditData =[
				'regions', this.MapEditRegion,
				'miniMapParams', this.MapEditRegion,
				'layers', this.MapEditLayers,
				'annotations', this.PackMapEditAnnotations,
				'camLocations', Utils.getArrayReader(this.MapEditCamLocations),
						];

			},
		}
	},

	///==================================================
	/// Chunk: dcal, versions: 10, strucTab: 0x1581508 
	///==================================================
	{
		name:'dcal',
		versions:{


			// => Version: 9, ReferencedFunction: 0xFFCCC0
			9:function(){
						this.PackMapDecalVertexV8 =[
				'position' , ['[]','float32',3],
				'normal' , ['[]','float32',3],
				'tangent' , ['[]','float32',3],
				'bitangent' , ['[]','float32',3],
						];

						this.PackMapDecalV9 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'textureScaleUV0' , ['[]','float32',2],
				'textureOffsetUV0' , ['[]','float32',2],
				'textureScaleUV1' , ['[]','float32',2],
				'textureOffsetUV1' , ['[]','float32',2],
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'flags' , 'uint32',
				'animTranslation' , ['[]','float32',2],
				'animScaleRangeX' , ['[]','float32',2],
				'animScaleRangeY' , ['[]','float32',2],
				'animScaleSpeed' , ['[]','float32',2],
				'animRotation' , 'float32',
				'surfaceBias' , 'float32',
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'vertices', Utils.getArrayReader(this.PackMapDecalVertexV8),
				'indices', Utils.getArrayReader('uint16'),
				'propIds', Utils.getArrayReader(Utils.getQWordReader()),
				'projection' , 'uint8',
				'surfaceId', Utils.getQWordReader(),
				'id', Utils.getQWordReader(),
						];

						this.__root=this.PackMapDecalsV9 =[
				'decals', Utils.getArrayReader(this.PackMapDecalV9),
						];

			},

			// => Version: 8
			8:function(){
						this.PackMapDecalVertexV7 =[
				'position' , ['[]','float32',3],
						];

						this.PackMapDecalV8 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'textureScaleUV0' , ['[]','float32',2],
				'textureOffsetUV0' , ['[]','float32',2],
				'textureScaleUV1' , ['[]','float32',2],
				'textureOffsetUV1' , ['[]','float32',2],
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'flags' , 'uint32',
				'animTranslation' , ['[]','float32',2],
				'animScaleRangeX' , ['[]','float32',2],
				'animScaleRangeY' , ['[]','float32',2],
				'animScaleSpeed' , ['[]','float32',2],
				'animRotation' , 'float32',
				'surfaceBias' , 'float32',
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'vertices', Utils.getArrayReader(this.PackMapDecalVertexV7),
				'indices', Utils.getArrayReader('uint16'),
				'propIds', Utils.getArrayReader(Utils.getQWordReader()),
				'projection' , 'uint8',
				'surfaceId', Utils.getQWordReader(),
				'id', Utils.getQWordReader(),
						];

						this.__root=this.PackMapDecalsV8 =[
				'decals', Utils.getArrayReader(this.PackMapDecalV8),
						];

			},

			// => Version: 7, ReferencedFunction: 0xFFCC60
			7:function(){
						this.PackMapDecalVertexV6 =[
				'position' , ['[]','float32',3],
						];

						this.PackMapDecalV7 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'textureScaleUV0' , ['[]','float32',2],
				'textureOffsetUV0' , ['[]','float32',2],
				'textureScaleUV1' , ['[]','float32',2],
				'textureOffsetUV1' , ['[]','float32',2],
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'flags' , 'uint32',
				'animTranslation' , ['[]','float32',2],
				'animScaleRangeX' , ['[]','float32',2],
				'animScaleRangeY' , ['[]','float32',2],
				'animScaleSpeed' , ['[]','float32',2],
				'animRotation' , 'float32',
				'surfaceBias' , 'float32',
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'vertices', Utils.getArrayReader(this.PackMapDecalVertexV6),
				'indices', Utils.getArrayReader('uint16'),
				'propIds', Utils.getArrayReader(Utils.getQWordReader()),
				'projection' , 'uint8',
				'id', Utils.getQWordReader(),
						];

						this.__root=this.PackMapDecalsV7 =[
				'decals', Utils.getArrayReader(this.PackMapDecalV7),
						];

			},

			// => Version: 6
			6:function(){
						this.PackMapDecalVertexV5 =[
				'position' , ['[]','float32',3],
						];

						this.PackMapDecalV6 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'textureScaleUV0' , ['[]','float32',2],
				'textureOffsetUV0' , ['[]','float32',2],
				'textureScaleUV1' , ['[]','float32',2],
				'textureOffsetUV1' , ['[]','float32',2],
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'flags' , 'uint32',
				'animTranslation' , ['[]','float32',2],
				'animScaleRangeX' , ['[]','float32',2],
				'animScaleRangeY' , ['[]','float32',2],
				'animScaleSpeed' , ['[]','float32',2],
				'animRotation' , 'float32',
				'surfaceBias' , 'float32',
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'vertices', Utils.getArrayReader(this.PackMapDecalVertexV5),
				'indices', Utils.getArrayReader('uint16'),
				'propIds', Utils.getArrayReader(Utils.getQWordReader()),
				'projection' , 'uint8',
						];

						this.__root=this.PackMapDecalsV6 =[
				'decals', Utils.getArrayReader(this.PackMapDecalV6),
						];

			},

			// => Version: 5
			5:function(){
						this.PackMapDecalVertexV4 =[
				'position' , ['[]','float32',3],
						];

						this.PackMapDecalV5 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'textureScaleUV0' , ['[]','float32',2],
				'textureOffsetUV0' , ['[]','float32',2],
				'textureScaleUV1' , ['[]','float32',2],
				'textureOffsetUV1' , ['[]','float32',2],
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'flags' , 'uint32',
				'animTranslation' , ['[]','float32',2],
				'animScaleRangeX' , ['[]','float32',2],
				'animScaleRangeY' , ['[]','float32',2],
				'animScaleSpeed' , ['[]','float32',2],
				'animRotation' , 'float32',
				'surfaceBias' , 'float32',
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
				'vertices', Utils.getArrayReader(this.PackMapDecalVertexV4),
				'indices', Utils.getArrayReader('uint16'),
				'propIds', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.PackMapDecalsV5 =[
				'decals', Utils.getArrayReader(this.PackMapDecalV5),
						];

			},

			// => Version: 4
			4:function(){
						this.PackMapDecalV4 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'textureScaleUV0' , ['[]','float32',2],
				'textureOffsetUV0' , ['[]','float32',2],
				'textureScaleUV1' , ['[]','float32',2],
				'textureOffsetUV1' , ['[]','float32',2],
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'flags' , 'uint32',
				'animTranslation' , ['[]','float32',2],
				'animScaleRangeX' , ['[]','float32',2],
				'animScaleRangeY' , ['[]','float32',2],
				'animScaleSpeed' , ['[]','float32',2],
				'animRotation' , 'float32',
				'surfaceBias' , 'float32',
				'constantTokens', Utils.getArrayReader('uint32'),
				'constantValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.__root=this.PackMapDecalsV4 =[
				'decals', Utils.getArrayReader(this.PackMapDecalV4),
						];

			},

			// => Version: 3, ReferencedFunction: 0xFFCBE0
			3:function(){
						this.PackMapDecalV3 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'textureScaleUV0' , ['[]','float32',2],
				'textureOffsetUV0' , ['[]','float32',2],
				'textureScaleUV1' , ['[]','float32',2],
				'textureOffsetUV1' , ['[]','float32',2],
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'flags' , 'uint32',
				'animTranslation' , ['[]','float32',2],
				'animScaleRangeX' , ['[]','float32',2],
				'animScaleRangeY' , ['[]','float32',2],
				'animScaleSpeed' , ['[]','float32',2],
				'animRotation' , 'float32',
				'surfaceBias' , 'float32',
						];

						this.__root=this.PackMapDecalsV3 =[
				'decals', Utils.getArrayReader(this.PackMapDecalV3),
						];

			},

			// => Version: 2
			2:function(){
						this.PackMapDecalV2 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'textureScale' , ['[]','float32',2],
				'textureOffset' , ['[]','float32',2],
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'flags' , 'uint32',
				'animTranslation' , ['[]','float32',2],
				'animScaleRangeX' , ['[]','float32',2],
				'animScaleRangeY' , ['[]','float32',2],
				'animScaleSpeed' , ['[]','float32',2],
				'animRotation' , 'float32',
						];

						this.__root=this.PackMapDecalsV2 =[
				'decals', Utils.getArrayReader(this.PackMapDecalV2),
						];

			},

			// => Version: 1
			1:function(){
						this.PackMapDecalV1 =[
				'position' , ['[]','float32',3],
				'extents' , ['[]','float32',3],
				'rotation' , ['[]','float32',3],
				'textureScale' , ['[]','float32',2],
				'textureOffset' , ['[]','float32',2],
				'materialFilename' , Utils.getFileNameReader(),
				'textureFilenames', Utils.getArrayReader(Utils.getFileNameReader()),
				'flags' , 'uint32',
						];

						this.__root=this.PackMapDecalsV1 =[
				'decals', Utils.getArrayReader(this.PackMapDecalV1),
						];

			},
		}
	},

	///==================================================
	/// Chunk: exp, versions: 1, strucTab: 0x157D700 
	///==================================================
	{
		name:'exp',
		versions:{


			// => Version: 0
			0:function(){
						this.MapExpansionProperty =[
				'type' , 'uint32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.__root=this.MapExpansionProperties =[
				'properties', Utils.getArrayReader(this.MapExpansionProperty),
						];

			},
		}
	},

	///==================================================
	/// Chunk: nvms, versions: 3, strucTab: 0x1580D3C 
	///==================================================
	{
		name:'nvms',
		versions:{


			// => Version: 2
			2:function(){
						this.__root=this.PackMapNavMeshChunkV2 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

			},

			// => Version: 1, ReferencedFunction: 0xFFCEE0
			1:function(){
						this.__root=this.PackMapNavMeshChunkV1 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

			},

			// => Version: 0
			0:function(){
						this.__root=this.PackMapNavMeshChunkV0 =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: MODL, versions: 66, strucTab: 0x15CFF08 
	///==================================================
	{
		name:'MODL',
		versions:{


			// => Version: 65, ReferencedFunction: 0x106D490
			65:function(){
						this.ModelTextureDataV65 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV65 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV65 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV65 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV65 =[
				'flags' , 'uint32',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
				'scrollFreq' , ['[]','float32',2],
				'scale' , ['[]','float32',2],
				'scaleFreq' , ['[]','float32',2],
				'rotate' , 'float32',
				'rotate' , 'float32',
						];

						this.ModelMaterialDataV65 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV65),
				'constants', Utils.getArrayReader(this.ModelConstantDataV65),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV65),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV65),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV65),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV65 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV65),
						];

						this.ModelParticleCloudV65 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV65 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV65 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V65 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV65 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'affinity' , 'uint32',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV65),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV65),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV65),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V65),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV65 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV65),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV65),
						];

						this.ModelObstacleDataV65 =[
				'affinity' , 'uint32',
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V65),
						];

						this.ModelStreakV65 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV65 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV65 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV65),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV65),
						];

						this.ModelEffectLightV65 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV65 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV65),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV65 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV65 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV65),
						];

						this.ModelClothGroupBindingV65 =[
				'strippedToken', Utils.getQWordReader(),
				'boneName', Utils.getStringReader(),
				'OBBMin' , ['[]','float32',3],
				'OBBMax' , ['[]','float32',3],
						];

						this.ModelClothSoftLockV65 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV65 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV65 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV65),
				'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV65),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV65),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV65),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV65),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lockedNormals', Utils.getArrayReader('uint32'),
				'lockedTanegents', Utils.getArrayReader('uint32'),
				'lockedBitangents', Utils.getArrayReader('uint32'),
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
				'translateWeight' , 'float32',
				'visBone', Utils.getQWordReader(),
						];

						this.ModelEffectWindV65 =[
				'bone', Utils.getQWordReader(),
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelWindDataV65 =[
				'effectWind', Utils.getArrayReader(this.ModelEffectWindV65),
						];

						this.ModelLightningSystemV65 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV65 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV65),
				'fps' , 'float32',
				'frequency' , 'float32',
				'groupMax' , 'uint32',
				'groupMin' , 'uint32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'texOffset' , 'float32',
				'texRange' , ['[]','float32',2],
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thicknessPreset' , 'uint8',
				'thicknessRange' , ['[]','float32',2],
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV65 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV65 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV65),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV65),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV65),
						];

						this.ModelSoftBodyDataV65 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV65 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.ModelBoundingSphereV65 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.__root=this.ModelFileDataV65 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV65),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV65),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV65),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV65),
				'lightData', Utils.getPointerReader(this.ModelLightDataV65),
				'clothData', Utils.getArrayReader(this.ModelClothDataV65),
				'windData', Utils.getPointerReader(this.ModelWindDataV65),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV65),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV65),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV65),
				'boundingSphere', Utils.getPointerReader(this.ModelBoundingSphereV65),
						];

			},

			// => Version: 64
			64:function(){
						this.ModelTextureDataV64 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV64 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV64 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV64 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV64 =[
				'flags' , 'uint32',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
				'scrollFreq' , ['[]','float32',2],
				'scale' , ['[]','float32',2],
				'scaleFreq' , ['[]','float32',2],
				'rotate' , 'float32',
				'rotate' , 'float32',
						];

						this.ModelMaterialDataV64 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV64),
				'constants', Utils.getArrayReader(this.ModelConstantDataV64),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV64),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV64),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV64),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV64 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV64),
						];

						this.ModelMeshLodDataV64 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV64 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV64 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV64),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV64),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV64 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV64),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV64),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelParticleCloudV64 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV64 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV64 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V64 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV64 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'affinity' , 'uint32',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV64),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV64),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV64),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V64),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV64 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV64),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV64),
						];

						this.ModelObstacleDataV64 =[
				'affinity' , 'uint32',
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V64),
						];

						this.ModelStreakV64 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV64 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV64 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV64),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV64),
						];

						this.ModelEffectLightV64 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV64 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV64),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV64 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV64 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV64),
						];

						this.ModelClothGroupBindingV64 =[
				'strippedToken', Utils.getQWordReader(),
				'boneName', Utils.getStringReader(),
				'OBBMin' , ['[]','float32',3],
				'OBBMax' , ['[]','float32',3],
						];

						this.ModelClothSoftLockV64 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV64 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV64 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV64),
				'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV64),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV64),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV64),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV64),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lockedNormals', Utils.getArrayReader('uint32'),
				'lockedTanegents', Utils.getArrayReader('uint32'),
				'lockedBitangents', Utils.getArrayReader('uint32'),
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
				'translateWeight' , 'float32',
				'visBone', Utils.getQWordReader(),
						];

						this.ModelEffectWindV64 =[
				'bone', Utils.getQWordReader(),
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelWindDataV64 =[
				'effectWind', Utils.getArrayReader(this.ModelEffectWindV64),
						];

						this.ModelLightningSystemV64 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV64 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV64),
				'fps' , 'float32',
				'frequency' , 'float32',
				'groupMax' , 'uint32',
				'groupMin' , 'uint32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'texOffset' , 'float32',
				'texRange' , ['[]','float32',2],
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thicknessPreset' , 'uint8',
				'thicknessRange' , ['[]','float32',2],
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV64 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV64 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV64),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV64),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV64),
						];

						this.ModelSoftBodyDataV64 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV64 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.ModelBoundingSphereV64 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.__root=this.ModelFileDataV64 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV64),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV64),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV64),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV64),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV64),
				'lightData', Utils.getPointerReader(this.ModelLightDataV64),
				'clothData', Utils.getArrayReader(this.ModelClothDataV64),
				'windData', Utils.getPointerReader(this.ModelWindDataV64),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV64),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV64),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV64),
				'boundingSphere', Utils.getPointerReader(this.ModelBoundingSphereV64),
						];

			},

			// => Version: 63, ReferencedFunction: 0x106D3D0
			63:function(){
						this.ModelTextureDataV63 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV63 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV63 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV63 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV63 =[
				'flags' , 'uint32',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV63 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV63),
				'constants', Utils.getArrayReader(this.ModelConstantDataV63),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV63),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV63),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV63),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV63 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV63),
						];

						this.ModelMeshLodDataV63 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV63 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV63 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV63),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV63),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV63 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV63),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV63),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelParticleCloudV63 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV63 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV63 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V63 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV63 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'affinity' , 'uint32',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV63),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV63),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV63),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V63),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV63 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV63),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV63),
						];

						this.ModelObstacleDataV63 =[
				'affinity' , 'uint32',
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V63),
						];

						this.ModelStreakV63 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV63 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV63 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV63),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV63),
						];

						this.ModelEffectLightV63 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV63 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV63),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV63 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV63 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV63),
						];

						this.ModelClothGroupBindingV63 =[
				'strippedToken', Utils.getQWordReader(),
				'boneName', Utils.getStringReader(),
				'OBBMin' , ['[]','float32',3],
				'OBBMax' , ['[]','float32',3],
						];

						this.ModelClothSoftLockV63 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV63 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV63 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV63),
				'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV63),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV63),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV63),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV63),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lockedNormals', Utils.getArrayReader('uint32'),
				'lockedTanegents', Utils.getArrayReader('uint32'),
				'lockedBitangents', Utils.getArrayReader('uint32'),
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
				'translateWeight' , 'float32',
						];

						this.ModelEffectWindV63 =[
				'bone', Utils.getQWordReader(),
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelWindDataV63 =[
				'effectWind', Utils.getArrayReader(this.ModelEffectWindV63),
						];

						this.ModelLightningSystemV63 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV63 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV63),
				'fps' , 'float32',
				'frequency' , 'float32',
				'groupMax' , 'uint32',
				'groupMin' , 'uint32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'texOffset' , 'float32',
				'texRange' , ['[]','float32',2],
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thicknessPreset' , 'uint8',
				'thicknessRange' , ['[]','float32',2],
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV63 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV63 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV63),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV63),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV63),
						];

						this.ModelSoftBodyDataV63 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV63 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.ModelBoundingSphereV63 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.__root=this.ModelFileDataV63 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV63),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV63),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV63),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV63),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV63),
				'lightData', Utils.getPointerReader(this.ModelLightDataV63),
				'clothData', Utils.getArrayReader(this.ModelClothDataV63),
				'windData', Utils.getPointerReader(this.ModelWindDataV63),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV63),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV63),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV63),
				'boundingSphere', Utils.getPointerReader(this.ModelBoundingSphereV63),
						];

			},

			// => Version: 62, ReferencedFunction: 0x106D2B0
			62:function(){
						this.ModelTextureDataV62 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV62 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV62 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV62 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV62 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV62 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV62),
				'constants', Utils.getArrayReader(this.ModelConstantDataV62),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV62),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV62),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV62),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV62 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV62),
						];

						this.ModelMeshLodDataV62 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV62 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV62 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV62),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV62),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV62 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV62),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV62),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelParticleCloudV62 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV62 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV62 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V62 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV62 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'affinity' , 'uint32',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV62),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV62),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV62),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V62),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV62 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV62),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV62),
						];

						this.ModelObstacleDataV62 =[
				'affinity' , 'uint32',
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V62),
						];

						this.ModelStreakV62 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV62 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV62 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV62),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV62),
						];

						this.ModelEffectLightV62 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV62 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV62),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV62 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV62 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV62),
						];

						this.ModelClothGroupBindingV62 =[
				'strippedToken', Utils.getQWordReader(),
				'boneName', Utils.getStringReader(),
				'OBBMin' , ['[]','float32',3],
				'OBBMax' , ['[]','float32',3],
						];

						this.ModelClothSoftLockV62 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV62 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV62 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV62),
				'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV62),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV62),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV62),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV62),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lockedNormals', Utils.getArrayReader('uint32'),
				'lockedTanegents', Utils.getArrayReader('uint32'),
				'lockedBitangents', Utils.getArrayReader('uint32'),
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
				'translateWeight' , 'float32',
						];

						this.ModelEffectWindV62 =[
				'bone', Utils.getQWordReader(),
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelWindDataV62 =[
				'effectWind', Utils.getArrayReader(this.ModelEffectWindV62),
						];

						this.ModelLightningSystemV62 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV62 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV62),
				'fps' , 'float32',
				'frequency' , 'float32',
				'groupMax' , 'uint32',
				'groupMin' , 'uint32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'texOffset' , 'float32',
				'texRange' , ['[]','float32',2],
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thicknessPreset' , 'uint8',
				'thicknessRange' , ['[]','float32',2],
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV62 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV62 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV62),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV62),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV62),
						];

						this.ModelSoftBodyDataV62 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV62 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.ModelBoundingSphereV62 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.__root=this.ModelFileDataV62 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV62),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV62),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV62),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV62),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV62),
				'lightData', Utils.getPointerReader(this.ModelLightDataV62),
				'clothData', Utils.getArrayReader(this.ModelClothDataV62),
				'windData', Utils.getPointerReader(this.ModelWindDataV62),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV62),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV62),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV62),
				'boundingSphere', Utils.getPointerReader(this.ModelBoundingSphereV62),
						];

			},

			// => Version: 61, ReferencedFunction: 0x106D250
			61:function(){
						this.ModelTextureDataV61 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV61 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV61 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV61 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV61 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV61 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV61),
				'constants', Utils.getArrayReader(this.ModelConstantDataV61),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV61),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV61),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV61),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV61 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV61),
						];

						this.ModelMeshLodDataV61 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV61 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV61 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV61),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV61),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV61 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV61),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV61),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV61 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV61 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV61,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneSymmetryV61 =[
				'boneLeft', Utils.getQWordReader(),
				'boneRight', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV61 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV61),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV61),
						];

						this.ModelMeshBindingDataV61 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV61 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV61 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV61),
				'InitialPlacement', this.ModelTransformDataV61,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV61),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV61),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV61 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV61 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV61 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV61 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V61 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV61 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'affinity' , 'uint32',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV61),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV61),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV61),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V61),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV61 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV61),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV61),
						];

						this.ModelObstacleDataV61 =[
				'affinity' , 'uint32',
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V61),
						];

						this.ModelStreakV61 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV61 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV61 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV61),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV61),
						];

						this.ModelEffectLightV61 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV61 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV61),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV61 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV61 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV61),
						];

						this.ModelClothGroupBindingV61 =[
				'strippedToken', Utils.getQWordReader(),
				'boneName', Utils.getStringReader(),
				'OBBMin' , ['[]','float32',3],
				'OBBMax' , ['[]','float32',3],
						];

						this.ModelClothSoftLockV61 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV61 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV61 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV61),
				'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV61),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV61),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV61),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV61),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lockedNormals', Utils.getArrayReader('uint32'),
				'lockedTanegents', Utils.getArrayReader('uint32'),
				'lockedBitangents', Utils.getArrayReader('uint32'),
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
						];

						this.ModelEffectWindV61 =[
				'bone', Utils.getQWordReader(),
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelWindDataV61 =[
				'effectWind', Utils.getArrayReader(this.ModelEffectWindV61),
						];

						this.ModelLightningSystemV61 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV61 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV61),
				'fps' , 'float32',
				'frequency' , 'float32',
				'groupMax' , 'uint32',
				'groupMin' , 'uint32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'texOffset' , 'float32',
				'texRange' , ['[]','float32',2],
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thicknessPreset' , 'uint8',
				'thicknessRange' , ['[]','float32',2],
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV61 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV61 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV61),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV61),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV61),
						];

						this.ModelBoneConstraintLinkV61 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV61 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV61),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV61 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV61 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.ModelFixedOffsetDataV61 =[
				'name', Utils.getQWordReader(),
				'parentBone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
						];

						this.__root=this.ModelFileDataV61 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV61),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV61),
				'model', Utils.getPointerReader(this.ModelModelDataV61),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV61),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV61),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV61),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV61),
				'lightData', Utils.getPointerReader(this.ModelLightDataV61),
				'clothData', Utils.getArrayReader(this.ModelClothDataV61),
				'windData', Utils.getPointerReader(this.ModelWindDataV61),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV61),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV61),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV61),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV61),
				'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV61),
				'modelReference' , Utils.getFileNameReader(),
						];

			},

			// => Version: 60, ReferencedFunction: 0x106CE50
			60:function(){
						this.ModelTextureDataV60 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV60 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV60 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV60 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV60 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV60 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV60),
				'constants', Utils.getArrayReader(this.ModelConstantDataV60),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV60),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV60),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV60),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV60 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV60),
						];

						this.ModelMeshLodDataV60 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV60 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV60 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV60),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV60),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV60 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV60),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV60),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV60 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV60 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV60,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneSymmetryV60 =[
				'boneLeft', Utils.getQWordReader(),
				'boneRight', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV60 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV60),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV60),
						];

						this.ModelMeshBindingDataV60 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV60 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV60 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV60),
				'InitialPlacement', this.ModelTransformDataV60,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV60),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV60),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV60 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV60 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV60 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV60 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V60 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV60 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV60),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV60),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV60),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V60),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV60 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV60),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV60),
						];

						this.ModelObstacleDataV60 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V60),
						];

						this.ModelStreakV60 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV60 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV60 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV60),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV60),
						];

						this.ModelEffectLightV60 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV60 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV60),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV60 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV60 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV60),
						];

						this.ModelClothGroupBindingV60 =[
				'strippedToken', Utils.getQWordReader(),
				'boneName', Utils.getStringReader(),
				'OBBMin' , ['[]','float32',3],
				'OBBMax' , ['[]','float32',3],
						];

						this.ModelClothSoftLockV60 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV60 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV60 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV60),
				'groupBindings', Utils.getArrayReader(this.ModelClothGroupBindingV60),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV60),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV60),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV60),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lockedNormals', Utils.getArrayReader('uint32'),
				'lockedTanegents', Utils.getArrayReader('uint32'),
				'lockedBitangents', Utils.getArrayReader('uint32'),
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
						];

						this.ModelLightningSystemV60 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV60 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV60),
				'fps' , 'float32',
				'frequency' , 'float32',
				'groupMax' , 'uint32',
				'groupMin' , 'uint32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'texOffset' , 'float32',
				'texRange' , ['[]','float32',2],
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thicknessPreset' , 'uint8',
				'thicknessRange' , ['[]','float32',2],
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV60 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV60 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV60),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV60),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV60),
						];

						this.ModelBoneConstraintLinkV60 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV60 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV60),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV60 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV60 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.ModelFixedOffsetDataV60 =[
				'name', Utils.getQWordReader(),
				'parentBone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
						];

						this.__root=this.ModelFileDataV60 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV60),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV60),
				'model', Utils.getPointerReader(this.ModelModelDataV60),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV60),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV60),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV60),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV60),
				'lightData', Utils.getPointerReader(this.ModelLightDataV60),
				'clothData', Utils.getArrayReader(this.ModelClothDataV60),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV60),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV60),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV60),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV60),
				'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV60),
				'modelReference' , Utils.getFileNameReader(),
						];

			},

			// => Version: 59, ReferencedFunction: 0x106CE00
			59:function(){
						this.ModelTextureDataV59 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV59 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV59 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV59 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV59 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV59 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV59),
				'constants', Utils.getArrayReader(this.ModelConstantDataV59),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV59),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV59),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV59),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV59 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV59),
						];

						this.ModelMeshLodDataV59 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV59 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV59 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV59),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV59),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV59 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV59),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV59),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV59 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV59 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV59,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneSymmetryV59 =[
				'boneLeft', Utils.getQWordReader(),
				'boneRight', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV59 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV59),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV59),
						];

						this.ModelMeshBindingDataV59 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV59 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV59 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV59),
				'InitialPlacement', this.ModelTransformDataV59,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV59),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV59),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV59 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV59 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV59 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV59 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V59 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV59 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV59),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV59),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV59),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V59),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV59 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV59),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV59),
						];

						this.ModelObstacleDataV59 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V59),
						];

						this.ModelStreakV59 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV59 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV59 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV59),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV59),
						];

						this.ModelEffectLightV59 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV59 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV59),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV59 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV59 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV59),
						];

						this.ModelClothSoftLockV59 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV59 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV59 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV59),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV59),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV59),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV59),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lockedNormals', Utils.getArrayReader('uint32'),
				'lockedTanegents', Utils.getArrayReader('uint32'),
				'lockedBitangents', Utils.getArrayReader('uint32'),
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
						];

						this.ModelLightningSystemV59 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV59 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV59),
				'fps' , 'float32',
				'frequency' , 'float32',
				'groupMax' , 'uint32',
				'groupMin' , 'uint32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'texOffset' , 'float32',
				'texRange' , ['[]','float32',2],
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thicknessPreset' , 'uint8',
				'thicknessRange' , ['[]','float32',2],
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV59 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV59 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV59),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV59),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV59),
						];

						this.ModelBoneConstraintLinkV59 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV59 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV59),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV59 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV59 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.ModelFixedOffsetDataV59 =[
				'name', Utils.getQWordReader(),
				'parentBone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
						];

						this.__root=this.ModelFileDataV59 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV59),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV59),
				'model', Utils.getPointerReader(this.ModelModelDataV59),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV59),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV59),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV59),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV59),
				'lightData', Utils.getPointerReader(this.ModelLightDataV59),
				'clothData', Utils.getArrayReader(this.ModelClothDataV59),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV59),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV59),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV59),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV59),
				'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV59),
				'modelReference' , Utils.getFileNameReader(),
						];

			},

			// => Version: 58, ReferencedFunction: 0x106CD10
			58:function(){
						this.ModelTextureDataV58 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV58 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV58 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV58 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV58 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV58 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV58),
				'constants', Utils.getArrayReader(this.ModelConstantDataV58),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV58),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV58),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV58),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV58 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV58),
						];

						this.ModelMeshLodDataV58 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV58 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV58 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV58),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV58),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV58 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV58),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV58),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV58 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV58 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV58,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneSymmetryV58 =[
				'boneLeft', Utils.getQWordReader(),
				'boneRight', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV58 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV58),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV58),
						];

						this.ModelMeshBindingDataV58 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV58 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV58 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV58),
				'InitialPlacement', this.ModelTransformDataV58,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV58),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV58),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV58 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV58 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV58 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV58 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V58 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV58 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV58),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV58),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV58),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V58),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV58 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV58),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV58),
						];

						this.ModelObstacleDataV58 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V58),
						];

						this.ModelStreakV58 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV58 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV58 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV58),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV58),
						];

						this.ModelEffectLightV58 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV58 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV58),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV58 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV58 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV58),
						];

						this.ModelClothSoftLockV58 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV58 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV58 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV58),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV58),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV58),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV58),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lockedNormals', Utils.getArrayReader('uint32'),
				'lockedTanegents', Utils.getArrayReader('uint32'),
				'lockedBitangents', Utils.getArrayReader('uint32'),
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
						];

						this.ModelLightningSystemV58 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV58 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV58),
				'fps' , 'float32',
				'frequency' , 'float32',
				'groupMax' , 'uint32',
				'groupMin' , 'uint32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thicknessPreset' , 'uint8',
				'thicknessRange' , ['[]','float32',2],
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV58 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV58 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV58),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV58),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV58),
						];

						this.ModelBoneConstraintLinkV58 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV58 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV58),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV58 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV58 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.ModelFixedOffsetDataV58 =[
				'name', Utils.getQWordReader(),
				'parentBone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
						];

						this.__root=this.ModelFileDataV58 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV58),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV58),
				'model', Utils.getPointerReader(this.ModelModelDataV58),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV58),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV58),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV58),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV58),
				'lightData', Utils.getPointerReader(this.ModelLightDataV58),
				'clothData', Utils.getArrayReader(this.ModelClothDataV58),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV58),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV58),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV58),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV58),
				'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV58),
				'modelReference' , Utils.getFileNameReader(),
						];

			},

			// => Version: 57
			57:function(){
						this.ModelTextureDataV57 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV57 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV57 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV57 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV57 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV57 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV57),
				'constants', Utils.getArrayReader(this.ModelConstantDataV57),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV57),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV57),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV57),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV57 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV57),
						];

						this.ModelMeshLodDataV57 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV57 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV57 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV57),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV57),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV57 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV57),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV57),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV57 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV57 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV57,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneSymmetryV57 =[
				'boneLeft', Utils.getQWordReader(),
				'boneRight', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV57 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV57),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV57),
						];

						this.ModelMeshBindingDataV57 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV57 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV57 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV57),
				'InitialPlacement', this.ModelTransformDataV57,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV57),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV57),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV57 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV57 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV57 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV57 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V57 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV57 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV57),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV57),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV57),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V57),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV57 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV57),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV57),
						];

						this.ModelObstacleDataV57 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V57),
						];

						this.ModelStreakV57 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV57 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV57 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV57),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV57),
						];

						this.ModelEffectLightV57 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV57 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV57),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV57 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV57 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV57),
						];

						this.ModelClothSoftLockV57 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV57 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV57 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV57),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV57),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV57),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV57),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
						];

						this.ModelLightningSystemV57 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV57 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV57 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV57 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV57),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV57),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV57),
						];

						this.ModelBoneConstraintLinkV57 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV57 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV57),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV57 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV57 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.ModelFixedOffsetDataV57 =[
				'name', Utils.getQWordReader(),
				'parentBone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
						];

						this.__root=this.ModelFileDataV57 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV57),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV57),
				'model', Utils.getPointerReader(this.ModelModelDataV57),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV57),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV57),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV57),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV57),
				'lightData', Utils.getPointerReader(this.ModelLightDataV57),
				'clothData', Utils.getArrayReader(this.ModelClothDataV57),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV57),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV57),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV57),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV57),
				'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetDataV57),
				'modelReference' , Utils.getFileNameReader(),
						];

			},

			// => Version: 56
			56:function(){
						this.ModelTextureDataV56 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV56 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV56 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV56 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV56 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV56 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV56),
				'constants', Utils.getArrayReader(this.ModelConstantDataV56),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV56),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV56),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV56),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV56 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV56),
						];

						this.ModelMeshLodDataV56 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV56 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV56 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV56),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV56),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV56 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV56),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV56),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV56 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV56 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV56,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneSymmetryV56 =[
				'boneLeft', Utils.getQWordReader(),
				'boneRight', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV56 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV56),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV56),
						];

						this.ModelMeshBindingDataV56 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV56 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV56 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV56),
				'InitialPlacement', this.ModelTransformDataV56,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV56),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV56),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV56 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV56 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV56 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV56 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V56 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV56 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV56),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV56),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV56),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V56),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV56 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV56),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV56),
						];

						this.ModelObstacleDataV56 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V56),
						];

						this.ModelStreakV56 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV56 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV56 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV56),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV56),
						];

						this.ModelEffectLightV56 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV56 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV56),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV56 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV56 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV56),
						];

						this.ModelClothSoftLockV56 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV56 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV56 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV56),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV56),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV56),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV56),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
						];

						this.ModelLightningSystemV56 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV56 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV56 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV56 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV56),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV56),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV56),
						];

						this.ModelBoneConstraintLinkV56 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV56 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV56),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV56 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV56 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.__root=this.ModelFileDataV56 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV56),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV56),
				'model', Utils.getPointerReader(this.ModelModelDataV56),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV56),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV56),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV56),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV56),
				'lightData', Utils.getPointerReader(this.ModelLightDataV56),
				'clothData', Utils.getArrayReader(this.ModelClothDataV56),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV56),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV56),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV56),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV56),
				'modelReference' , Utils.getFileNameReader(),
						];

			},

			// => Version: 55, ReferencedFunction: 0x106CC30
			55:function(){
						this.ModelTextureDataV55 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV55 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV55 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV55 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV55 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV55 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV55),
				'constants', Utils.getArrayReader(this.ModelConstantDataV55),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV55),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV55),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV55),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV55 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV55),
						];

						this.ModelMeshLodDataV55 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV55 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV55 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV55),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV55),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV55 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV55),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV55),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV55 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV55 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV55,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneSymmetryV55 =[
				'boneLeft', Utils.getQWordReader(),
				'boneRight', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV55 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV55),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV55),
						];

						this.ModelMeshBindingDataV55 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV55 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV55 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV55),
				'InitialPlacement', this.ModelTransformDataV55,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV55),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV55),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV55 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV55 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV55 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV55 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V55 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV55 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV55),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV55),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV55),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V55),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV55 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV55),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV55),
						];

						this.ModelObstacleDataV55 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V55),
						];

						this.ModelStreakV55 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV55 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV55 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV55),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV55),
						];

						this.ModelEffectLightV55 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV55 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV55),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV55 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV55 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV55),
						];

						this.ModelClothSoftLockV55 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV55 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV55 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV55),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV55),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV55),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV55),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
						];

						this.ModelLightningSystemV55 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV55 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV55 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV55 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV55),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV55),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV55),
						];

						this.ModelBoneConstraintLinkV55 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV55 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV55),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV55 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV55 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'boneInverseOffset', ['[]', ['[]','float32',4], 3],
						];

						this.__root=this.ModelFileDataV55 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV55),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV55),
				'model', Utils.getPointerReader(this.ModelModelDataV55),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV55),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV55),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV55),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV55),
				'lightData', Utils.getPointerReader(this.ModelLightDataV55),
				'clothData', Utils.getArrayReader(this.ModelClothDataV55),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV55),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV55),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV55),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV55),
						];

			},

			// => Version: 54
			54:function(){
						this.ModelTextureDataV54 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV54 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV54 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV54 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV54 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV54 =[
				'token', Utils.getQWordReader(),
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV54),
				'constants', Utils.getArrayReader(this.ModelConstantDataV54),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV54),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV54),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV54),
				'texCoordCount' , 'uint8',
						];

						this.ModelPermutationDataV54 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV54),
						];

						this.ModelMeshLodDataV54 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV54 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV54 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV54),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV54),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV54 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV54),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV54),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV54 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV54 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV54,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneSymmetryV54 =[
				'boneLeft', Utils.getQWordReader(),
				'boneRight', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV54 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV54),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV54),
						];

						this.ModelMeshBindingDataV54 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV54 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV54 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV54),
				'InitialPlacement', this.ModelTransformDataV54,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV54),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV54),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV54 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV54 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV54 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV54 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelMatrix43V54 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelParticleEmitterV54 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV54),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV54),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV54),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'transform', Utils.getPointerReader(this.ModelMatrix43V54),
				'windInfluence' , 'uint8',
				'alignmentType' , 'uint8',
				'spawnShape' , 'uint8',
						];

						this.ModelCloudDataV54 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV54),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV54),
						];

						this.ModelObstacleDataV54 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V54),
						];

						this.ModelStreakV54 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV54 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV54 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV54),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV54),
						];

						this.ModelEffectLightV54 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV54 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV54),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV54 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV54 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV54),
						];

						this.ModelClothSoftLockV54 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV54 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV54 =[
				'materialIndex' , 'uint32',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'slack' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV54),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV54),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV54),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV54),
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'lockCount', 'uint16',
				'lod1VertexCount', 'uint16',
				'flags' , 'uint8',
				'rigidness' , 'uint8',
						];

						this.ModelLightningSystemV54 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV54 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV54 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV54 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV54),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV54),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV54),
						];

						this.ModelBoneConstraintLinkV54 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV54 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV54),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV54 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV54 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.__root=this.ModelFileDataV54 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV54),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV54),
				'model', Utils.getPointerReader(this.ModelModelDataV54),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV54),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV54),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV54),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV54),
				'lightData', Utils.getPointerReader(this.ModelLightDataV54),
				'clothData', Utils.getArrayReader(this.ModelClothDataV54),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV54),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV54),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV54),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV54),
						];

			},

			// => Version: 53, ReferencedFunction: 0x106C930
			53:function(){
						this.ModelTextureDataV53 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV53 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV53 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV53 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV53 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV53 =[
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV53),
				'constants', Utils.getArrayReader(this.ModelConstantDataV53),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV53),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV53),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV53),
						];

						this.ModelPermutationDataV53 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV53),
						];

						this.ModelMeshLodDataV53 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV53 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV53 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV53),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV53),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV53 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV53),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV53),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV53 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV53 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV53,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV53 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV53),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV53 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV53 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV53 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV53),
				'InitialPlacement', this.ModelTransformDataV53,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV53),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV53),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV53 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV53 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV53 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV53 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV53 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV53),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV53),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV53),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV53 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV53),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV53),
						];

						this.ModelMatrix43V53 =[
				'x' , ['[]','float32',4],
				'y' , ['[]','float32',4],
				'z' , ['[]','float32',4],
						];

						this.ModelObstacleDataV53 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'response' , 'uint8',
				'flags' , 'uint32',
				'dragCoef' , 'float32',
				'gravityCoef' , 'float32',
				'length' , 'float32',
				'width' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'transform', Utils.getPointerReader(this.ModelMatrix43V53),
						];

						this.ModelStreakV53 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV53 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV53 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV53),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV53),
						];

						this.ModelEffectLightV53 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV53 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV53),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV53 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV53 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV53),
						];

						this.ModelClothSoftLockV53 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV53 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothDataV53 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV53),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV53),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV53),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV53),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelLightningSystemV53 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV53 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV53 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV53 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV53),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV53),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV53),
						];

						this.ModelBoneConstraintLinkV53 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV53 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV53),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV53 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV53 =[
				'bone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.__root=this.ModelFileDataV53 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV53),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV53),
				'model', Utils.getPointerReader(this.ModelModelDataV53),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV53),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV53),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV53),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV53),
				'lightData', Utils.getPointerReader(this.ModelLightDataV53),
				'clothData', Utils.getArrayReader(this.ModelClothDataV53),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV53),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV53),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV53),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV53),
						];

			},

			// => Version: 52, ReferencedFunction: 0x106C7E0
			52:function(){
						this.ModelTextureDataV52 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV52 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV52 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV52 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV52 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV52 =[
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV52),
				'constants', Utils.getArrayReader(this.ModelConstantDataV52),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV52),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV52),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV52),
						];

						this.ModelPermutationDataV52 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV52),
						];

						this.ModelMeshLodDataV52 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV52 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV52 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV52),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV52),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV52 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV52),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV52),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV52 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV52 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV52,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV52 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV52),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV52 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV52 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV52 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV52),
				'InitialPlacement', this.ModelTransformDataV52,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV52),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV52),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV52 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV52 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV52 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV52 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV52 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV52),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV52),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV52),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV52 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV52),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV52),
						];

						this.ModelObstacleDataV52 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV52 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV52 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV52 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV52),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV52),
						];

						this.ModelEffectLightV52 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV52 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV52),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV52 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV52 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV52),
						];

						this.ModelClothSoftLockV52 =[
				'weight' , 'uint8',
				'vertIndex', 'uint16',
						];

						this.ModelClothConstraintV52 =[
				'distance', 'uint16',
				'relationship', 'uint16',
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
						];

						this.ModelClothObstacleV52 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'depth' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'width' , 'float32',
						];

						this.ModelClothDataV52 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'drag' , 'float32',
				'gravity' , 'float32',
				'compressibility' , 'float32',
				'stretchiness' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV52),
				'softLocks', Utils.getArrayReader(this.ModelClothSoftLockV52),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV52),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV52),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV52),
						];

						this.ModelLightningSystemV52 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV52 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV52 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV52 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV52),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV52),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV52),
						];

						this.ModelBoneConstraintLinkV52 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV52 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV52),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV52 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV52 =[
				'bone', Utils.getQWordReader(),
				'offset' , ['[]','float32',3],
						];

						this.__root=this.ModelFileDataV52 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV52),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV52),
				'model', Utils.getPointerReader(this.ModelModelDataV52),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV52),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV52),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV52),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV52),
				'lightData', Utils.getPointerReader(this.ModelLightDataV52),
				'clothData', Utils.getArrayReader(this.ModelClothDataV52),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV52),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV52),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV52),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV52),
						];

			},

			// => Version: 51, ReferencedFunction: 0x106C560
			51:function(){
						this.ModelTextureDataV51 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV51 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV51 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV51 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV51 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV51 =[
				'materialId' , 'uint32',
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV51),
				'constants', Utils.getArrayReader(this.ModelConstantDataV51),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV51),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV51),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV51),
						];

						this.ModelPermutationDataV51 =[
				'token', Utils.getQWordReader(),
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV51),
						];

						this.ModelMeshLodDataV51 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV51 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV51 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV51),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV51),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV51 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV51),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV51),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
						];

						this.ModelTransformDataV51 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV51 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV51,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV51 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV51),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV51 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV51 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV51 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV51),
				'InitialPlacement', this.ModelTransformDataV51,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV51),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV51),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV51 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV51 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV51 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV51 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV51 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV51),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV51),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV51),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV51 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV51),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV51),
						];

						this.ModelObstacleDataV51 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV51 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV51 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV51 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV51),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV51),
						];

						this.ModelEffectLightV51 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV51 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV51),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV51 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV51 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV51),
						];

						this.ModelClothConstraintV51 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV51 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
				'depth' , 'float32',
				'height' , 'float32',
				'radius' , 'float32',
				'width' , 'float32',
						];

						this.ModelClothDataV51 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV51),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV51),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV51),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV51),
						];

						this.ModelLightningSystemV51 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV51 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV51 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , ['[]','float32',2],
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV51 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV51),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV51),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV51),
						];

						this.ModelBoneConstraintLinkV51 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV51 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV51),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV51 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV51 =[
				'bone', Utils.getQWordReader(),
				'offset' , ['[]','float32',3],
						];

						this.__root=this.ModelFileDataV51 =[
				'permutations', Utils.getArrayReader(this.ModelPermutationDataV51),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV51),
				'model', Utils.getPointerReader(this.ModelModelDataV51),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV51),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV51),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV51),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV51),
				'lightData', Utils.getPointerReader(this.ModelLightDataV51),
				'clothData', Utils.getArrayReader(this.ModelClothDataV51),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV51),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV51),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV51),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV51),
						];

			},

			// => Version: 50, ReferencedFunction: 0x106C520
			50:function(){
						this.ModelTextureDataV50 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV50 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV50 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV50 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV50 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV50 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV50),
				'constants', Utils.getArrayReader(this.ModelConstantDataV50),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV50),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV50),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV50),
						];

						this.ModelMeshLodDataV50 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV50 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV50 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV50),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV50),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV50 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV50),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV50),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
						];

						this.ModelTransformDataV50 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV50 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV50,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV50 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV50),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV50 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV50 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV50 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV50),
				'InitialPlacement', this.ModelTransformDataV50,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV50),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV50),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV50 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV50 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV50 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV50 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV50 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV50),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV50),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV50),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV50 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV50),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV50),
						];

						this.ModelObstacleDataV50 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV50 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV50 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV50 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV50),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV50),
						];

						this.ModelEffectLightV50 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV50 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV50),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV50 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV50 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV50),
						];

						this.ModelClothConstraintV50 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV50 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV50 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV50),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV50),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV50),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV50),
						];

						this.ModelLightningSystemV50 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'fvf' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV50 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV50 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV50 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV50),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV50),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV50),
						];

						this.ModelBoneConstraintLinkV50 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV50 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV50),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV50 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV50 =[
				'bone', Utils.getQWordReader(),
				'offset' , ['[]','float32',3],
						];

						this.__root=this.ModelFileDataV50 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV50),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV50),
				'model', Utils.getPointerReader(this.ModelModelDataV50),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV50),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV50),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV50),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV50),
				'lightData', Utils.getPointerReader(this.ModelLightDataV50),
				'clothData', Utils.getArrayReader(this.ModelClothDataV50),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV50),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV50),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV50),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV50),
						];

			},

			// => Version: 49
			49:function(){
						this.ModelTextureDataV49 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV49 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV49 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV49 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV49 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV49 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV49),
				'constants', Utils.getArrayReader(this.ModelConstantDataV49),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV49),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV49),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV49),
						];

						this.ModelMeshLodDataV49 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV49 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV49 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV49),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV49),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV49 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV49),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV49),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
						];

						this.ModelTransformDataV49 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV49 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV49,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV49 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV49),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV49 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV49 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV49 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV49),
				'InitialPlacement', this.ModelTransformDataV49,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV49),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV49),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV49 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV49 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV49 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV49 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV49 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV49),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV49),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV49),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV49 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV49),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV49),
						];

						this.ModelObstacleDataV49 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV49 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV49 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV49 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV49),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV49),
						];

						this.ModelEffectLightV49 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV49 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV49),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV49 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV49 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV49),
						];

						this.ModelClothConstraintV49 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV49 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV49 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV49),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV49),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV49),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV49),
						];

						this.ModelLightningSystemV49 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV49 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV49 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV49 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV49),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV49),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV49),
						];

						this.ModelBoneConstraintLinkV49 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV49 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV49),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV49 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelBoneOffsetDataV49 =[
				'bone', Utils.getQWordReader(),
				'offset' , ['[]','float32',3],
						];

						this.__root=this.ModelFileDataV49 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV49),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV49),
				'model', Utils.getPointerReader(this.ModelModelDataV49),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV49),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV49),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV49),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV49),
				'lightData', Utils.getPointerReader(this.ModelLightDataV49),
				'clothData', Utils.getArrayReader(this.ModelClothDataV49),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV49),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV49),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV49),
				'boneOffsetData', Utils.getArrayReader(this.ModelBoneOffsetDataV49),
						];

			},

			// => Version: 48, ReferencedFunction: 0x106BD20
			48:function(){
						this.ModelTextureDataV48 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV48 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV48 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV48 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV48 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV48 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV48),
				'constants', Utils.getArrayReader(this.ModelConstantDataV48),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV48),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV48),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV48),
						];

						this.ModelMeshLodDataV48 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV48 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV48 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV48),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV48),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.ModelMeshDataV48 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV48),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV48),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
						];

						this.ModelTransformDataV48 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV48 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV48,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV48 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV48),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV48 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV48 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV48 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV48),
				'InitialPlacement', this.ModelTransformDataV48,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV48),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV48),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV48 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV48 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV48 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV48 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV48 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV48),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV48),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV48),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV48 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV48),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV48),
						];

						this.ModelObstacleDataV48 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV48 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV48 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV48 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV48),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV48),
						];

						this.ModelEffectLightV48 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV48 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV48),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV48 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV48 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV48),
						];

						this.ModelClothConstraintV48 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV48 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV48 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV48),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV48),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV48),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV48),
						];

						this.ModelLightningSystemV48 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV48 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV48 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV48 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV48),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV48),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV48),
						];

						this.ModelBoneConstraintLinkV48 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV48 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV48),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV48 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileDataV48 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV48),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV48),
				'model', Utils.getPointerReader(this.ModelModelDataV48),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV48),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV48),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV48),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV48),
				'lightData', Utils.getPointerReader(this.ModelLightDataV48),
				'clothData', Utils.getArrayReader(this.ModelClothDataV48),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV48),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV48),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV48),
						];

			},

			// => Version: 47, ReferencedFunction: 0x106BAA0
			47:function(){
						this.ModelTextureDataV47 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV47 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV47 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV47 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV47 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV47 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV47),
				'constants', Utils.getArrayReader(this.ModelConstantDataV47),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV47),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV47),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV47),
						];

						this.ModelMeshLodDataV47 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphVertV47 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV47 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV47),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV47),
				'mesh', Utils.getQWordReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV47 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV47),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV47),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV47 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV47 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV47,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV47 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV47),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV47 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV47 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV47 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV47),
				'InitialPlacement', this.ModelTransformDataV47,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV47),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV47),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV47 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV47 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV47 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV47 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV47 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV47),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV47),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV47),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV47 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV47),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV47),
						];

						this.ModelObstacleDataV47 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV47 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV47 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV47 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV47),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV47),
						];

						this.ModelEffectLightV47 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV47 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV47),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV47 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV47 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV47),
						];

						this.ModelClothConstraintV47 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV47 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV47 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV47),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV47),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV47),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV47),
						];

						this.ModelLightningSystemV47 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV47 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV47 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV47 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV47),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV47),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV47),
						];

						this.ModelBoneConstraintLinkV47 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV47 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV47),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV47 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileDataV47 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV47),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV47),
				'model', Utils.getPointerReader(this.ModelModelDataV47),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV47),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV47),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV47),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV47),
				'lightData', Utils.getPointerReader(this.ModelLightDataV47),
				'clothData', Utils.getArrayReader(this.ModelClothDataV47),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV47),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV47),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV47),
						];

			},

			// => Version: 46, ReferencedFunction: 0x106BA10
			46:function(){
						this.ModelTextureDataV46 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV46 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV46 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV46 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV46 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV46 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV46),
				'constants', Utils.getArrayReader(this.ModelConstantDataV46),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV46),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV46),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV46),
						];

						this.ModelMeshLodDataV46 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV46 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV46 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV46),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV46),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV46 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV46 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV46,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV46 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV46),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV46 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV46 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV46 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV46),
				'InitialPlacement', this.ModelTransformDataV46,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV46),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV46),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV46 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV46 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV46 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV46 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV46 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV46),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV46),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV46),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV46 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV46),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV46),
						];

						this.ModelObstacleDataV46 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV46 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV46 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV46 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV46),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV46),
						];

						this.ModelEffectLightV46 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV46 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV46),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV46 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV46 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV46),
						];

						this.ModelClothConstraintV46 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV46 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV46 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV46),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV46),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV46),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV46),
						];

						this.ModelLightningSystemV46 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV46 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV46 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV46 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV46),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV46),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV46),
						];

						this.ModelBoneConstraintLinkV46 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV46 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV46),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV46 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileDataV46 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV46),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV46),
				'model', Utils.getPointerReader(this.ModelModelDataV46),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV46),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV46),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV46),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV46),
				'lightData', Utils.getPointerReader(this.ModelLightDataV46),
				'clothData', Utils.getArrayReader(this.ModelClothDataV46),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV46),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV46),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV46),
						];

			},

			// => Version: 45
			45:function(){
						this.ModelTextureDataV45 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV45 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV45 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV45 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialTexTransformV45 =[
				'random' , 'uint8',
				'uvIndex' , 'uint8',
				'columns' , 'uint8',
				'rows' , 'uint8',
				'count', 'uint16',
				'fps' , 'float32',
				'scroll' , ['[]','float32',2],
						];

						this.ModelMaterialDataV45 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV45),
				'constants', Utils.getArrayReader(this.ModelConstantDataV45),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV45),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV45),
				'texTransforms', Utils.getArrayReader(this.ModelMaterialTexTransformV45),
						];

						this.ModelMeshLodDataV45 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV45 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV45 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV45),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV45),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV45 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV45 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV45,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV45 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV45),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV45 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV45 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV45 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV45),
				'InitialPlacement', this.ModelTransformDataV45,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV45),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV45),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV45 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV45 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV45 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV45 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV45 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV45),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV45),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV45),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV45 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV45),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV45),
						];

						this.ModelObstacleDataV45 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV45 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV45 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV45 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV45),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV45),
						];

						this.ModelEffectLightV45 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV45 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV45),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV45 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV45 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV45),
						];

						this.ModelClothConstraintV45 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV45 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV45 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV45),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV45),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV45),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV45),
						];

						this.ModelLightningSystemV45 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV45 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV45 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV45 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV45),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV45),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV45),
						];

						this.ModelBoneConstraintLinkV45 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV45 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV45),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV45 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileDataV45 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV45),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV45),
				'model', Utils.getPointerReader(this.ModelModelDataV45),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV45),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV45),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV45),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV45),
				'lightData', Utils.getPointerReader(this.ModelLightDataV45),
				'clothData', Utils.getArrayReader(this.ModelClothDataV45),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV45),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV45),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV45),
						];

			},

			// => Version: 44, ReferencedFunction: 0x106B850
			44:function(){
						this.ModelTextureDataV44 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV44 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV44 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV44 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV44 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV44),
				'constants', Utils.getArrayReader(this.ModelConstantDataV44),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV44),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV44),
						];

						this.ModelMeshLodDataV44 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV44 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV44 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV44),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV44),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV44 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV44 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV44,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV44 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV44),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV44 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV44 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV44 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV44),
				'InitialPlacement', this.ModelTransformDataV44,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV44),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV44),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV44 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV44 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV44 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV44 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV44 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV44),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV44),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV44),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV44 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV44),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV44),
						];

						this.ModelObstacleDataV44 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV44 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV44 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV44 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV44),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV44),
						];

						this.ModelEffectLightV44 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV44 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV44),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV44 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV44 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV44),
						];

						this.ModelClothConstraintV44 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV44 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV44 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV44),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV44),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV44),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV44),
						];

						this.ModelLightningSystemV44 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV44 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV44 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV44 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV44),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV44),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV44),
						];

						this.ModelBoneConstraintLinkV44 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV44 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV44),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV44 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileDataV44 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV44),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV44),
				'model', Utils.getPointerReader(this.ModelModelDataV44),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV44),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV44),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV44),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV44),
				'lightData', Utils.getPointerReader(this.ModelLightDataV44),
				'clothData', Utils.getArrayReader(this.ModelClothDataV44),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV44),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV44),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV44),
						];

			},

			// => Version: 43
			43:function(){
						this.ModelTextureDataV43 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV43 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV43 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV43 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV43 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV43),
				'constants', Utils.getArrayReader(this.ModelConstantDataV43),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV43),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV43),
						];

						this.ModelMeshLodDataV43 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV43 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV43 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV43),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV43),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV43 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV43 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV43,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV43 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV43),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingDataV43 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV43 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV43 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV43),
				'InitialPlacement', this.ModelTransformDataV43,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV43),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV43),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV43 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV43 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV43 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV43 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV43 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV43),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV43),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV43),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV43 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV43),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV43),
						];

						this.ModelObstacleDataV43 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV43 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV43 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV43 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV43),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV43),
						];

						this.ModelEffectLightV43 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV43 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV43),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV43 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV43 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV43),
						];

						this.ModelClothConstraintV43 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV43 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV43 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV43),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV43),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV43),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV43),
						];

						this.ModelLightningSystemV43 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV43 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV43 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV43 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV43),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV43),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV43),
						];

						this.ModelBoneConstraintLinkV43 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV43 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV43),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV43 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileDataV43 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV43),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV43),
				'model', Utils.getPointerReader(this.ModelModelDataV43),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV43),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV43),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV43),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV43),
				'lightData', Utils.getPointerReader(this.ModelLightDataV43),
				'clothData', Utils.getArrayReader(this.ModelClothDataV43),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV43),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV43),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV43),
						];

			},

			// => Version: 42
			42:function(){
						this.ModelTextureDataV42 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV42 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV42 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV42 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV42 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV42),
				'constants', Utils.getArrayReader(this.ModelConstantDataV42),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV42),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV42),
						];

						this.ModelMeshLodDataV42 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV42 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV42 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV42),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV42),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV42 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV42 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV42,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV42 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV42),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV42 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV42 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV42 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV42),
				'InitialPlacement', this.ModelTransformDataV42,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV42),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV42),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV42 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV42 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV42 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV42 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV42 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV42),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV42),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV42),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV42 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV42),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV42),
						];

						this.ModelObstacleDataV42 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV42 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV42 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV42 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV42),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV42),
						];

						this.ModelEffectLightV42 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV42 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV42),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV42 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV42 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV42),
						];

						this.ModelClothConstraintV42 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV42 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV42 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV42),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV42),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV42),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV42),
						];

						this.ModelLightningSystemV42 =[
				'bone', Utils.getQWordReader(),
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV42 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV42 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV42 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV42),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV42),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV42),
						];

						this.ModelBoneConstraintLinkV42 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV42 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV42),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV42 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileDataV42 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV42),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV42),
				'model', Utils.getPointerReader(this.ModelModelDataV42),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV42),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV42),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV42),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV42),
				'lightData', Utils.getPointerReader(this.ModelLightDataV42),
				'clothData', Utils.getArrayReader(this.ModelClothDataV42),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV42),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV42),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV42),
						];

			},

			// => Version: 41
			41:function(){
						this.ModelTextureDataV41 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV41 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV41 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV41 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV41 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV41),
				'constants', Utils.getArrayReader(this.ModelConstantDataV41),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV41),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV41),
						];

						this.ModelMeshLodDataV41 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV41 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV41 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV41),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV41),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV41 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV41 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV41,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV41 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV41),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV41 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV41 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV41 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV41),
				'InitialPlacement', this.ModelTransformDataV41,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV41),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV41),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV41 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV41 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV41 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV41 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV41 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV41),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV41),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV41),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV41 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV41),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV41),
						];

						this.ModelObstacleDataV41 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV41 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV41 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV41 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV41),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV41),
						];

						this.ModelEffectLightV41 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV41 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV41),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV41 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV41 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV41),
						];

						this.ModelClothConstraintV41 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV41 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV41 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV41),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV41),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV41),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV41),
						];

						this.ModelLightningSystemV41 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV41 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV41 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV41 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV41),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV41),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV41),
						];

						this.ModelBoneConstraintLinkV41 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV41 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV41),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelSoftBodyDataV41 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint32',
				'vertexFvf' , 'uint32',
				'vertBytes', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileDataV41 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV41),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV41),
				'model', Utils.getPointerReader(this.ModelModelDataV41),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV41),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV41),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV41),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV41),
				'lightData', Utils.getPointerReader(this.ModelLightDataV41),
				'clothData', Utils.getArrayReader(this.ModelClothDataV41),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV41),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV41),
				'softBodyData', Utils.getArrayReader(this.ModelSoftBodyDataV41),
						];

			},

			// => Version: 40, ReferencedFunction: 0x106B800
			40:function(){
						this.ModelTextureDataV40 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV40 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV40 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV40 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV40 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV40),
				'constants', Utils.getArrayReader(this.ModelConstantDataV40),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV40),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV40),
						];

						this.ModelMeshLodDataV40 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV40 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV40 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV40),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV40),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV40 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV40 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV40,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV40 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV40),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV40 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV40 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV40 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV40),
				'InitialPlacement', this.ModelTransformDataV40,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV40),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV40),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV40 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV40 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'fvf' , 'uint32',
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV40 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV40 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV40 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'offset' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV40),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV40),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV40),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'velocityInherit' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV40 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV40),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV40),
						];

						this.ModelObstacleDataV40 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV40 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV40 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV40 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV40),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV40),
						];

						this.ModelEffectLightV40 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV40 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV40),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV40 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV40 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV40),
						];

						this.ModelClothConstraintV40 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV40 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV40 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV40),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV40),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV40),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV40),
						];

						this.ModelLightningSystemV40 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV40 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV40 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV40 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV40),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV40),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV40),
						];

						this.ModelBoneConstraintLinkV40 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV40 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV40),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.__root=this.ModelFileDataV40 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV40),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV40),
				'model', Utils.getPointerReader(this.ModelModelDataV40),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV40),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV40),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV40),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV40),
				'lightData', Utils.getPointerReader(this.ModelLightDataV40),
				'clothData', Utils.getArrayReader(this.ModelClothDataV40),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV40),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV40),
						];

			},

			// => Version: 39, ReferencedFunction: 0x106B750
			39:function(){
						this.ModelTextureDataV39 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV39 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV39 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV39 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV39 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV39),
				'constants', Utils.getArrayReader(this.ModelConstantDataV39),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV39),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV39),
						];

						this.ModelMeshLodDataV39 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV39 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV39 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV39),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV39),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV39 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV39 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV39,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV39 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV39),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV39 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV39 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV39 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV39),
				'InitialPlacement', this.ModelTransformDataV39,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV39),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV39),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV39 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV39 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV39 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV39 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV39 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV39),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV39),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV39),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV39 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV39),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV39),
						];

						this.ModelObstacleDataV39 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV39 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV39 =[
				'bone', Utils.getQWordReader(),
				'colorStart' , 'uint32',
				'colorEnd' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV39 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV39),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV39),
						];

						this.ModelEffectLightV39 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV39 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV39),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV39 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV39 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV39),
						];

						this.ModelClothConstraintV39 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV39 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV39 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV39),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV39),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV39),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV39),
						];

						this.ModelLightningSystemV39 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV39 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV39 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV39 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV39),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV39),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV39),
						];

						this.ModelBoneConstraintLinkV39 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV39 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV39),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.__root=this.ModelFileDataV39 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV39),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV39),
				'model', Utils.getPointerReader(this.ModelModelDataV39),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV39),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV39),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV39),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV39),
				'lightData', Utils.getPointerReader(this.ModelLightDataV39),
				'clothData', Utils.getArrayReader(this.ModelClothDataV39),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV39),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV39),
						];

			},

			// => Version: 38, ReferencedFunction: 0x106B5D0
			38:function(){
						this.ModelTextureDataV38 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV38 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV38 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV38 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV38 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV38),
				'constants', Utils.getArrayReader(this.ModelConstantDataV38),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV38),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV38),
						];

						this.ModelMeshLodDataV38 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV38 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV38 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV38),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV38),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV38 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV38 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV38,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV38 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV38),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV38 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV38 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV38 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV38),
				'InitialPlacement', this.ModelTransformDataV38,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV38),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV38),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV38 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV38 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV38 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV38 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV38 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV38),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV38),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV38),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV38 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV38),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV38),
						];

						this.ModelObstacleDataV38 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV38 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV38 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV38 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV38),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV38),
						];

						this.ModelEffectLightV38 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV38 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV38),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV38 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV38 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV38),
						];

						this.ModelClothConstraintV38 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV38 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV38 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV38),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV38),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV38),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV38),
						];

						this.ModelLightningSystemV38 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV38 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV38 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV38 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV38),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV38),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV38),
						];

						this.ModelBoneConstraintLinkV38 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV38 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV38),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.__root=this.ModelFileDataV38 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV38),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV38),
				'model', Utils.getPointerReader(this.ModelModelDataV38),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV38),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV38),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV38),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV38),
				'lightData', Utils.getPointerReader(this.ModelLightDataV38),
				'clothData', Utils.getArrayReader(this.ModelClothDataV38),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV38),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV38),
						];

			},

			// => Version: 37
			37:function(){
						this.ModelTextureDataV37 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV37 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV37 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV37 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV37 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV37),
				'constants', Utils.getArrayReader(this.ModelConstantDataV37),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV37),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV37),
						];

						this.ModelMeshLodDataV37 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV37 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV37 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV37),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV37),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV37 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV37 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV37,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV37 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV37),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV37 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV37 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV37 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV37),
				'InitialPlacement', this.ModelTransformDataV37,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV37),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV37),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV37 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV37 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV37 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV37 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV37 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV37),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV37),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV37),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV37 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV37),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV37),
						];

						this.ModelObstacleDataV37 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV37 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV37 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV37 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV37),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV37),
						];

						this.ModelEffectLightV37 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV37 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV37),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV37 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV37 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV37),
						];

						this.ModelClothConstraintV37 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV37 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV37 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV37),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV37),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV37),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV37),
						];

						this.ModelLightningSystemV37 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV37 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV37 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV37 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV37),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV37),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV37),
						];

						this.ModelBoneConstraintLinkV37 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV37 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV37),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.__root=this.ModelFileDataV37 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV37),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV37),
				'model', Utils.getPointerReader(this.ModelModelDataV37),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV37),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV37),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV37),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV37),
				'lightData', Utils.getPointerReader(this.ModelLightDataV37),
				'clothData', Utils.getArrayReader(this.ModelClothDataV37),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV37),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV37),
						];

			},

			// => Version: 36, ReferencedFunction: 0x106B490
			36:function(){
						this.ModelTextureDataV36 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV36 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV36 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV36 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV36 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV36),
				'constants', Utils.getArrayReader(this.ModelConstantDataV36),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV36),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV36),
						];

						this.ModelMeshLodDataV36 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV36 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV36 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV36),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV36),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV36 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV36 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV36,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV36 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV36),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV36 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV36 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV36 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV36),
				'InitialPlacement', this.ModelTransformDataV36,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV36),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV36),
				'skeletonHash', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV36 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV36 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV36 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV36 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV36 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV36),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV36),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV36),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV36 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV36),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV36),
						];

						this.ModelObstacleDataV36 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV36 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV36 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV36 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV36),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV36),
						];

						this.ModelEffectLightV36 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV36 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV36),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV36 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV36 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV36),
						];

						this.ModelClothConstraintV36 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV36 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV36 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV36),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV36),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV36),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV36),
						];

						this.ModelLightningSystemV36 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV36 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV36 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV36 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV36),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV36),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV36),
						];

						this.ModelBoneConstraintLinkV36 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV36 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV36),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.__root=this.ModelFileDataV36 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV36),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV36),
				'model', Utils.getPointerReader(this.ModelModelDataV36),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV36),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV36),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV36),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV36),
				'lightData', Utils.getPointerReader(this.ModelLightDataV36),
				'clothData', Utils.getArrayReader(this.ModelClothDataV36),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV36),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV36),
						];

			},

			// => Version: 35, ReferencedFunction: 0x106B330
			35:function(){
						this.ModelTextureDataV35 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV35 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV35 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV35 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV35 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV35),
				'constants', Utils.getArrayReader(this.ModelConstantDataV35),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV35),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV35),
						];

						this.ModelMeshLodDataV35 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV35 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV35 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV35),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV35),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV35 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV35 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV35,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV35 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV35),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV35 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV35 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV35 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV35),
				'InitialPlacement', this.ModelTransformDataV35,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV35),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV35),
				'skeletonHash', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV35 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV35 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV35 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV35 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV35 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV35),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV35),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV35),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV35 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV35),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV35),
						];

						this.ModelObstacleDataV35 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV35 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV35 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV35 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV35),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV35),
						];

						this.ModelEffectLightV35 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV35 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV35),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV35 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV35 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV35),
						];

						this.ModelClothConstraintV35 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV35 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV35 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV35),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV35),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV35),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV35),
						];

						this.ModelLightningSystemV35 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV35 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin', ['[]', 'uint32', 3],
				'colorEnd', ['[]', 'uint32', 3],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'opacity' , ['[]','float32',2],
				'opacityPreset' , 'uint8',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV35 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'updatePos' , 'float32',
						];

						this.ModelLightningDataV35 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV35),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV35),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV35),
						];

						this.ModelBoneConstraintV35 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'uint8',
				'drag' , 'uint8',
				'ellipseRatio' , 'float32',
				'gravity' , 'uint8',
				'collisionRadius' , 'float32',
				'wind' , 'uint8',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'uint8',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'uint8',
				'distanceInnerType' , 'uint8',
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'uint8',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'uint8',
				'twistType' , 'uint8',
						];

						this.__root=this.ModelFileDataV35 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV35),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV35),
				'model', Utils.getPointerReader(this.ModelModelDataV35),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV35),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV35),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV35),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV35),
				'lightData', Utils.getPointerReader(this.ModelLightDataV35),
				'clothData', Utils.getArrayReader(this.ModelClothDataV35),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV35),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV35),
						];

			},

			// => Version: 34, ReferencedFunction: 0x106B230
			34:function(){
						this.ModelTextureDataV34 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV34 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV34 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV34 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV34 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV34),
				'constants', Utils.getArrayReader(this.ModelConstantDataV34),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV34),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV34),
						];

						this.ModelMeshLodDataV34 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV34 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV34 =[
				'visBone', Utils.getQWordReader(),
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV34),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV34),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV34 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV34 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV34,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV34 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV34),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV34 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV34 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV34 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV34),
				'InitialPlacement', this.ModelTransformDataV34,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV34),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV34),
				'skeletonHash', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV34 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV34 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV34 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV34 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV34 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV34),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV34),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV34),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV34 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV34),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV34),
						];

						this.ModelObstacleDataV34 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelStreakV34 =[
				'acceleration' , ['[]','float32',3],
				'velocity' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV34 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV34 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV34),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV34),
						];

						this.ModelEffectLightV34 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
						];

						this.ModelLightDataV34 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV34),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV34 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV34 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV34),
						];

						this.ModelClothConstraintV34 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV34 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV34 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV34),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV34),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV34),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV34),
						];

						this.ModelLightningSystemV34 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV34 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin' , 'uint32',
				'colorEnd' , 'uint32',
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV34 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
						];

						this.ModelLightningDataV34 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV34),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV34),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV34),
						];

						this.ModelBoneConstraintV34 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'uint8',
				'drag' , 'uint8',
				'ellipseRatio' , 'float32',
				'gravity' , 'uint8',
				'collisionRadius' , 'float32',
				'wind' , 'uint8',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'uint8',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'uint8',
				'distanceInnerType' , 'uint8',
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'uint8',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'uint8',
				'twistType' , 'uint8',
						];

						this.__root=this.ModelFileDataV34 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV34),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV34),
				'model', Utils.getPointerReader(this.ModelModelDataV34),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV34),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV34),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV34),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV34),
				'lightData', Utils.getPointerReader(this.ModelLightDataV34),
				'clothData', Utils.getArrayReader(this.ModelClothDataV34),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV34),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV34),
						];

			},

			// => Version: 33
			33:function(){
						this.ModelTextureDataV33 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV33 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV33 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV33 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV33 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV33),
				'constants', Utils.getArrayReader(this.ModelConstantDataV33),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV33),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV33),
						];

						this.ModelMeshLodDataV33 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV33 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV33 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV33),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV33),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV33 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV33 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV33,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV33 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV33),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV33 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV33 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV33 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV33),
				'InitialPlacement', this.ModelTransformDataV33,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV33),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV33),
				'skeletonHash', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV33 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV33 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV33 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV33 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV33 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV33),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV33),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV33),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV33 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV33),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV33),
						];

						this.ModelObstacleDataV33 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV33 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV33 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV33 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV33),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV33),
						];

						this.ModelEffectLightV33 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV33 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV33),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV33 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV33 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV33),
						];

						this.ModelClothConstraintV33 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV33 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV33 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV33),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV33),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV33),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV33),
						];

						this.ModelLightningSystemV33 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV33 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin' , 'uint32',
				'colorEnd' , 'uint32',
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV33 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightningDataV33 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV33),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV33),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV33),
						];

						this.ModelBoneConstraintV33 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'uint8',
				'drag' , 'uint8',
				'ellipseRatio' , 'float32',
				'gravity' , 'uint8',
				'collisionRadius' , 'float32',
				'wind' , 'uint8',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'uint8',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'uint8',
				'distanceInnerType' , 'uint8',
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'uint8',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'uint8',
				'twistType' , 'uint8',
						];

						this.__root=this.ModelFileDataV33 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV33),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV33),
				'model', Utils.getPointerReader(this.ModelModelDataV33),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV33),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV33),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV33),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV33),
				'lightData', Utils.getPointerReader(this.ModelLightDataV33),
				'clothData', Utils.getArrayReader(this.ModelClothDataV33),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV33),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV33),
						];

			},

			// => Version: 32
			32:function(){
						this.ModelTextureDataV32 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV32 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV32 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV32 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV32 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV32),
				'constants', Utils.getArrayReader(this.ModelConstantDataV32),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV32),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV32),
						];

						this.ModelMeshLodDataV32 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV32 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV32 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV32),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV32),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV32 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV32 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV32,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV32 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV32),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV32 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV32 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV32 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV32),
				'InitialPlacement', this.ModelTransformDataV32,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV32),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV32),
				'skeletonHash', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV32 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV32 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV32 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV32 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV32 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV32),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV32),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV32),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV32 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV32),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV32),
						];

						this.ModelObstacleDataV32 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV32 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV32 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV32 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV32),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV32),
						];

						this.ModelEffectLightV32 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV32 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV32),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV32 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV32 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV32),
						];

						this.ModelClothConstraintV32 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV32 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV32 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV32),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV32),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV32),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV32),
						];

						this.ModelLightningSystemV32 =[
				'boltIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
						];

						this.ModelLightningBoltV32 =[
				'bone', Utils.getQWordReader(),
				'nodeIndices', Utils.getArrayReader('uint16'),
				'colorBegin' , 'uint32',
				'colorEnd' , 'uint32',
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'flags' , 'uint32',
				'fps' , 'float32',
				'probability' , 'float32',
				'lifetime' , ['[]','float32',2],
				'numSegments', 'uint16',
				'period' , 'float32',
				'texOffset' , 'float32',
				'texScale' , 'float32',
				'texSpeed' , 'float32',
				'thickness' , 'float32',
				'thicknessPreset' , 'uint8',
				'type' , 'uint8',
				'variance' , 'float32',
				'variancePreset' , 'uint8',
				'noise' , 'float32',
						];

						this.ModelLightningNodeV32 =[
				'bone', Utils.getQWordReader(),
				'childrenIndices', Utils.getArrayReader('uint16'),
				'flags' , 'uint32',
				'probability' , 'float32',
				'radius' , 'float32',
				'shape' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightningDataV32 =[
				'systems', Utils.getArrayReader(this.ModelLightningSystemV32),
				'bolts', Utils.getArrayReader(this.ModelLightningBoltV32),
				'nodes', Utils.getArrayReader(this.ModelLightningNodeV32),
						];

						this.__root=this.ModelFileDataV32 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV32),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV32),
				'model', Utils.getPointerReader(this.ModelModelDataV32),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV32),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV32),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV32),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV32),
				'lightData', Utils.getPointerReader(this.ModelLightDataV32),
				'clothData', Utils.getArrayReader(this.ModelClothDataV32),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
				'lightningData', Utils.getPointerReader(this.ModelLightningDataV32),
						];

			},

			// => Version: 31
			31:function(){
						this.ModelTextureDataV31 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV31 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV31 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV31 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV31 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV31),
				'constants', Utils.getArrayReader(this.ModelConstantDataV31),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV31),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV31),
						];

						this.ModelMeshLodDataV31 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV31 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV31 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV31),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV31),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV31 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV31 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV31,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV31 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV31),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV31 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV31 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV31 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV31),
				'InitialPlacement', this.ModelTransformDataV31,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV31),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV31),
				'skeletonHash', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV31 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV31 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV31 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV31 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV31 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV31),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV31),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV31),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV31 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV31),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV31),
						];

						this.ModelObstacleDataV31 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV31 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV31 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
				'flags' , 'uint32',
				'texV' , 'float32',
						];

						this.ModelStreakDataV31 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV31),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV31),
						];

						this.ModelEffectLightV31 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV31 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV31),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV31 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV31 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV31),
						];

						this.ModelClothConstraintV31 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV31 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV31 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV31),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV31),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV31),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV31),
						];

						this.__root=this.ModelFileDataV31 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV31),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV31),
				'model', Utils.getPointerReader(this.ModelModelDataV31),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV31),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV31),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV31),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV31),
				'lightData', Utils.getPointerReader(this.ModelLightDataV31),
				'clothData', Utils.getArrayReader(this.ModelClothDataV31),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 30
			30:function(){
						this.ModelTextureDataV30 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV30 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV30 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV30 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV30 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV30),
				'constants', Utils.getArrayReader(this.ModelConstantDataV30),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV30),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV30),
						];

						this.ModelMeshLodDataV30 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV30 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV30 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV30),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV30),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV30 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV30 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV30,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV30 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV30),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV30 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV30 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV30 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV30),
				'InitialPlacement', this.ModelTransformDataV30,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV30),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV30),
				'skeletonHash', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV30 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV30 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV30 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV30 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV30 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV30),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV30),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV30),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV30 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV30),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV30),
						];

						this.ModelObstacleDataV30 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV30 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV30 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV30 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV30),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV30),
						];

						this.ModelEffectLightV30 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV30 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV30),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV30 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV30 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV30),
						];

						this.ModelClothConstraintV30 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV30 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV30 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV30),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV30),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV30),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV30),
						];

						this.__root=this.ModelFileDataV30 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV30),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV30),
				'model', Utils.getPointerReader(this.ModelModelDataV30),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV30),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV30),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV30),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV30),
				'lightData', Utils.getPointerReader(this.ModelLightDataV30),
				'clothData', Utils.getArrayReader(this.ModelClothDataV30),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 29, ReferencedFunction: 0x106B180
			29:function(){
						this.ModelTextureDataV29 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV29 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMatConstLinkV29 =[
				'linkToken', Utils.getQWordReader(),
				'constantToken' , 'uint32',
						];

						this.ModelUVTransLinkV29 =[
				'linkToken', Utils.getQWordReader(),
				'uvAnimId' , 'uint32',
				'type' , 'uint8',
						];

						this.ModelMaterialDataV29 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV29),
				'constants', Utils.getArrayReader(this.ModelConstantDataV29),
				'matConstLinks', Utils.getArrayReader(this.ModelMatConstLinkV29),
				'uvTransLinks', Utils.getArrayReader(this.ModelUVTransLinkV29),
						];

						this.ModelMeshLodDataV29 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV29 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV29 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV29),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV29),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV29 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV29 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV29,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV29 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV29),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV29 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV29 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV29 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV29),
				'InitialPlacement', this.ModelTransformDataV29,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV29),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV29),
				'skeletonHash', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV29 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV29 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV29 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV29 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV29 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV29),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV29),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV29),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV29 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV29),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV29),
						];

						this.ModelObstacleDataV29 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV29 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV29 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV29 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV29),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV29),
						];

						this.ModelEffectLightV29 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV29 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV29),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV29 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV29 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV29),
						];

						this.ModelClothConstraintV29 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothObstacleV29 =[
				'bone', Utils.getQWordReader(),
				'type' , 'uint8',
						];

						this.ModelClothDataV29 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV29),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV29),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV29),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
				'obstacles', Utils.getArrayReader(this.ModelClothObstacleV29),
						];

						this.__root=this.ModelFileDataV29 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV29),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV29),
				'model', Utils.getPointerReader(this.ModelModelDataV29),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV29),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV29),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV29),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV29),
				'lightData', Utils.getPointerReader(this.ModelLightDataV29),
				'clothData', Utils.getArrayReader(this.ModelClothDataV29),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 28
			28:function(){
						this.ModelTextureDataV28 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV28 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV28 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV28),
				'constants', Utils.getArrayReader(this.ModelConstantDataV28),
						];

						this.ModelMeshLodDataV28 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV28 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV28 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV28),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV28),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
						];

						this.ModelTransformDataV28 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV28 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV28,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV28 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV28),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV28 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV28 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV28 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV28),
				'InitialPlacement', this.ModelTransformDataV28,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV28),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV28),
				'skeletonHash', Utils.getArrayReader('uint8'),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelPropertyDataV28 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV28 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV28 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV28 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV28 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV28),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV28),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV28),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV28 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV28),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV28),
						];

						this.ModelObstacleDataV28 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV28 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV28 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV28 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV28),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV28),
						];

						this.ModelEffectLightV28 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV28 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV28),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV28 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV28 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV28),
						];

						this.ModelClothConstraintV28 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV28 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV28),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV28),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV28),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV28 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV28),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV28),
				'model', Utils.getPointerReader(this.ModelModelDataV28),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV28),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV28),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV28),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV28),
				'lightData', Utils.getPointerReader(this.ModelLightDataV28),
				'clothData', Utils.getArrayReader(this.ModelClothDataV28),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 27
			27:function(){
						this.ModelTextureDataV27 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV27 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV27 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV27),
				'constants', Utils.getArrayReader(this.ModelConstantDataV27),
						];

						this.ModelMeshLodDataV27 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV27 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV27 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV27),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV27),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
						];

						this.ModelTransformDataV27 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV27 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV27,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV27 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV27),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV27 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV27 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV27 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV27),
				'InitialPlacement', this.ModelTransformDataV27,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV27),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV27),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelPropertyDataV27 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV27 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV27 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV27 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV27 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV27),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV27),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV27),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV27 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV27),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV27),
						];

						this.ModelObstacleDataV27 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV27 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV27 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV27 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV27),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV27),
						];

						this.ModelEffectLightV27 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV27 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV27),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV27 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV27 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV27),
						];

						this.ModelClothConstraintV27 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV27 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV27),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV27),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV27),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV27 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV27),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV27),
				'model', Utils.getPointerReader(this.ModelModelDataV27),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV27),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV27),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV27),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV27),
				'lightData', Utils.getPointerReader(this.ModelLightDataV27),
				'clothData', Utils.getArrayReader(this.ModelClothDataV27),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 26, ReferencedFunction: 0x106ADD0
			26:function(){
						this.ModelTextureDataV26 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV26 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV26 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV26),
				'constants', Utils.getArrayReader(this.ModelConstantDataV26),
						];

						this.ModelMeshLodDataV26 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV26 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV26 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV26),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV26),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV26 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV26 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV26,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV26 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV26),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV26 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV26 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV26 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV26),
				'InitialPlacement', this.ModelTransformDataV26,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV26),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV26),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelPropertyDataV26 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelParticleCloudV26 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV26 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV26 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV26 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV26),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV26),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV26),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV26 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV26),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV26),
						];

						this.ModelObstacleDataV26 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV26 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV26 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV26 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV26),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV26),
						];

						this.ModelEffectLightV26 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV26 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV26),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV26 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV26 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV26),
						];

						this.ModelClothConstraintV26 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV26 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV26),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV26),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV26),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV26 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV26),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV26),
				'model', Utils.getPointerReader(this.ModelModelDataV26),
				'properties', Utils.getArrayReader(this.ModelPropertyDataV26),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV26),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV26),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV26),
				'lightData', Utils.getPointerReader(this.ModelLightDataV26),
				'clothData', Utils.getArrayReader(this.ModelClothDataV26),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 25, ReferencedFunction: 0x106AC30
			25:function(){
						this.ModelTextureDataV25 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV25 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV25 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV25),
				'constants', Utils.getArrayReader(this.ModelConstantDataV25),
						];

						this.ModelMeshLodDataV25 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV25 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV25 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV25),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV25),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV25 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV25 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV25,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV25 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV25),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV25 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV25 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV25 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV25),
				'InitialPlacement', this.ModelTransformDataV25,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV25),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV25),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelFloatPropertyDataV25 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV25 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV25),
						];

						this.ModelParticleCloudV25 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV25 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV25 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'float32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV25 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV25),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV25),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV25),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV25 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV25),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV25),
						];

						this.ModelObstacleDataV25 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV25 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'jitter' , 'float32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV25 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV25 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV25),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV25),
						];

						this.ModelEffectLightV25 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV25 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV25),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV25 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV25 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV25),
						];

						this.ModelClothConstraintV25 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV25 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV25),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV25),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV25),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV25 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV25),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV25),
				'model', Utils.getPointerReader(this.ModelModelDataV25),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV25),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV25),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV25),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV25),
				'lightData', Utils.getPointerReader(this.ModelLightDataV25),
				'clothData', Utils.getArrayReader(this.ModelClothDataV25),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 24, ReferencedFunction: 0x106ABD0
			24:function(){
						this.ModelTextureDataV24 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV24 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV24 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV24),
				'constants', Utils.getArrayReader(this.ModelConstantDataV24),
						];

						this.ModelMeshLodDataV24 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV24 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV24 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV24),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV24),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV24 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV24 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV24,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV24 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV24),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV24 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV24 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV24 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV24),
				'InitialPlacement', this.ModelTransformDataV24,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV24),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV24),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelFloatPropertyDataV24 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV24 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV24),
						];

						this.ModelParticleCloudV24 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV24 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV24 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV24 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'emitterFlags' , 'uint32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV24),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV24),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV24),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV24 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV24),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV24),
						];

						this.ModelObstacleDataV24 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV24 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV24 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV24 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV24),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV24),
						];

						this.ModelEffectLightV24 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV24 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV24),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV24 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV24 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV24),
						];

						this.ModelClothConstraintV24 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV24 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV24),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV24),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV24),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV24 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV24),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV24),
				'model', Utils.getPointerReader(this.ModelModelDataV24),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV24),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV24),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV24),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV24),
				'lightData', Utils.getPointerReader(this.ModelLightDataV24),
				'clothData', Utils.getArrayReader(this.ModelClothDataV24),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 23, ReferencedFunction: 0x106AB60
			23:function(){
						this.ModelTextureDataV23 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV23 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV23 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV23),
				'constants', Utils.getArrayReader(this.ModelConstantDataV23),
						];

						this.ModelMeshLodDataV23 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV23 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV23 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV23),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV23),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV23 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV23 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV23,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV23 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV23),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV23 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV23 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV23 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV23),
				'InitialPlacement', this.ModelTransformDataV23,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV23),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV23),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelFloatPropertyDataV23 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV23 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV23),
						];

						this.ModelParticleCloudV23 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV23 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV23 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV23 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV23),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV23),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV23),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelCloudDataV23 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV23),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV23),
						];

						this.ModelObstacleDataV23 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakV23 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV23 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV23 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV23),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV23),
						];

						this.ModelEffectLightV23 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV23 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV23),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV23 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV23 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV23),
						];

						this.ModelClothConstraintV23 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV23 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV23),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV23),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV23),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV23 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV23),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV23),
				'model', Utils.getPointerReader(this.ModelModelDataV23),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV23),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV23),
				'obstacles', Utils.getArrayReader(this.ModelObstacleDataV23),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV23),
				'lightData', Utils.getPointerReader(this.ModelLightDataV23),
				'clothData', Utils.getArrayReader(this.ModelClothDataV23),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 22
			22:function(){
						this.ModelTextureDataV22 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV22 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV22 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV22),
				'constants', Utils.getArrayReader(this.ModelConstantDataV22),
						];

						this.ModelMeshLodDataV22 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV22 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV22 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV22),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV22),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV22 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV22 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV22,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV22 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV22),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV22 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV22 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV22 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV22),
				'InitialPlacement', this.ModelTransformDataV22,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV22),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV22),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelFloatPropertyDataV22 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV22 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV22),
						];

						this.ModelParticleCloudV22 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV22 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV22 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV22 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV22),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV22),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV22),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelParticleObstacleV22 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV22 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV22),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV22),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV22),
						];

						this.ModelStreakV22 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV22 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV22 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV22),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV22),
						];

						this.ModelEffectLightV22 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV22 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV22),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV22 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV22 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV22),
						];

						this.ModelClothConstraintV22 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV22 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV22),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV22),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV22),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV22 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV22),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV22),
				'model', Utils.getPointerReader(this.ModelModelDataV22),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV22),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV22),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV22),
				'lightData', Utils.getPointerReader(this.ModelLightDataV22),
				'clothData', Utils.getArrayReader(this.ModelClothDataV22),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 21, ReferencedFunction: 0x106AAA0
			21:function(){
						this.ModelTextureDataV21 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV21 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV21 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV21),
				'constants', Utils.getArrayReader(this.ModelConstantDataV21),
						];

						this.ModelMeshLodDataV21 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV21 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV21 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV21),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV21),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV21 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV21 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV21,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV21 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV21),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV21 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV21 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV21 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV21),
				'InitialPlacement', this.ModelTransformDataV21,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV21),
				'boneFlags', Utils.getArrayReader('uint32'),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV21),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelFloatPropertyDataV21 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV21 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV21),
						];

						this.ModelParticleCloudV21 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'velocity' , ['[]','float32',3],
						];

						this.ModelParticleCurveV21 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV21 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV21 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'alignmentType' , 'uint8',
				'alignmentDir' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , 'float32',
				'colorFalloff' , ['[]','float32',2],
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV21),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV21),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV21),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
				'windInfluence' , 'uint8',
						];

						this.ModelParticleObstacleV21 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV21 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV21),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV21),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV21),
						];

						this.ModelStreakV21 =[
				'acceleration' , ['[]','float32',3],
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'noise' , 'float32',
				'spawnDist' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
				'wind' , 'float32',
						];

						this.ModelStreakAnchorV21 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV21 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV21),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV21),
						];

						this.ModelEffectLightV21 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV21 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV21),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV21 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV21 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV21),
						];

						this.ModelClothConstraintV21 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV21 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV21),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV21),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV21),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV21 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV21),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV21),
				'model', Utils.getPointerReader(this.ModelModelDataV21),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV21),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV21),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV21),
				'lightData', Utils.getPointerReader(this.ModelLightDataV21),
				'clothData', Utils.getArrayReader(this.ModelClothDataV21),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 20, ReferencedFunction: 0x106A8F0
			20:function(){
						this.ModelTextureDataV20 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV20 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV20 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV20),
				'constants', Utils.getArrayReader(this.ModelConstantDataV20),
						];

						this.ModelMeshLodDataV20 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV20 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV20 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV20),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV20),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV20 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV20 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV20,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV20 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV20),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV20 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV20 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV20 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV20),
				'InitialPlacement', this.ModelTransformDataV20,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV20),
				'boneFlags', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV20),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelFloatPropertyDataV20 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV20 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV20),
						];

						this.ModelParticleCloudV20 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV20 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV20 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV20 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV20),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV20),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV20),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV20 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV20 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV20),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV20),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV20),
						];

						this.ModelStreakV20 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV20 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV20 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV20),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV20),
						];

						this.ModelEffectLightV20 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV20 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV20),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV20 =[
				'token', Utils.getQWordReader(),
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV20 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV20),
						];

						this.ModelClothConstraintV20 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV20 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV20),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV20),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV20),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV20 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV20),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV20),
				'model', Utils.getPointerReader(this.ModelModelDataV20),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV20),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV20),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV20),
				'lightData', Utils.getPointerReader(this.ModelLightDataV20),
				'clothData', Utils.getArrayReader(this.ModelClothDataV20),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 19
			19:function(){
						this.ModelTextureDataV19 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV19 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV19 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV19),
				'constants', Utils.getArrayReader(this.ModelConstantDataV19),
						];

						this.ModelMeshLodDataV19 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV19 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV19 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV19),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV19),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV19 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV19 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV19,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV19 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV19),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV19 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV19 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV19 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV19),
				'InitialPlacement', this.ModelTransformDataV19,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV19),
				'boneFlags', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV19),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelFloatPropertyDataV19 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV19 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV19),
						];

						this.ModelParticleCloudV19 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV19 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV19 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV19 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV19),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV19),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV19),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV19 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV19 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV19),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV19),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV19),
						];

						this.ModelStreakV19 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV19 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV19 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV19),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV19),
						];

						this.ModelEffectLightV19 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV19 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV19),
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelClothBoneWeightV19 =[
				'index', 'uint16',
				'weight' , 'uint8',
						];

						this.ModelClothMeshGroupV19 =[
				'weights', Utils.getArrayReader(this.ModelClothBoneWeightV19),
						];

						this.ModelClothConstraintV19 =[
				'vertIndexA', 'uint16',
				'vertIndexB', 'uint16',
				'distance' , 'float32',
						];

						this.ModelClothDataV19 =[
				'materialIndex' , 'uint32',
				'flags' , 'uint8',
				'gravity' , 'float32',
				'weight' , 'float32',
				'wind' , 'float32',
				'rigidness' , 'uint8',
				'mesh', this.PackVertexType,
				'indices', Utils.getArrayReader('uint16'),
				'lockCount', 'uint16',
				'groups', Utils.getArrayReader(this.ModelClothMeshGroupV19),
				'softLocks', Utils.getArrayReader('uint8'),
				'lod0Constraints', Utils.getArrayReader(this.ModelClothConstraintV19),
				'lod1Constraints', Utils.getArrayReader(this.ModelClothConstraintV19),
				'lod1VertexCount', 'uint16',
				'lod1Indices', Utils.getArrayReader('uint16'),
				'barycentricCoords', Utils.getArrayReader(['[]','float32',3]),
				'barycentricIndices', Utils.getArrayReader('uint16'),
						];

						this.__root=this.ModelFileDataV19 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV19),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV19),
				'model', Utils.getPointerReader(this.ModelModelDataV19),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV19),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV19),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV19),
				'lightData', Utils.getPointerReader(this.ModelLightDataV19),
				'clothData', Utils.getArrayReader(this.ModelClothDataV19),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 18
			18:function(){
						this.ModelTextureDataV18 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV18 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV18 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV18),
				'constants', Utils.getArrayReader(this.ModelConstantDataV18),
						];

						this.ModelMeshLodDataV18 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV18 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
				'meshName', Utils.getStringReader(),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV18 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV18),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV18),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV18 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV18 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV18,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV18 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV18),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV18 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV18 =[
				'trackMask', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelModelDataV18 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV18),
				'InitialPlacement', this.ModelTransformDataV18,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV18),
				'boneFlags', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV18),
				'skeletonHash', Utils.getArrayReader('uint8'),
						];

						this.ModelFloatPropertyDataV18 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV18 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV18),
						];

						this.ModelParticleCloudV18 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV18 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV18 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV18 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV18),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV18),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV18),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV18 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV18 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV18),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV18),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV18),
						];

						this.ModelStreakV18 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV18 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV18 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV18),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV18),
						];

						this.ModelEffectLightV18 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 3],
				'farDistance' , 'float32',
				'intensity' , 'float32',
				'nearDistance' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelLightDataV18 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV18),
						];

						this.__root=this.ModelFileDataV18 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV18),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV18),
				'model', Utils.getPointerReader(this.ModelModelDataV18),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV18),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV18),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV18),
				'lightData', Utils.getPointerReader(this.ModelLightDataV18),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 17
			17:function(){
						this.ModelTextureDataV17 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV17 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV17 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV17),
				'constants', Utils.getArrayReader(this.ModelConstantDataV17),
						];

						this.ModelMeshLodDataV17 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshMorphTargetV17 =[
				'positionIndices', Utils.getArrayReader('uint16'),
				'positions', Utils.getArrayReader(['[]','float32',3]),
				'normalIndices', Utils.getArrayReader('uint16'),
				'normals', Utils.getArrayReader(['[]','float32',3]),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV17 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV17),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV17),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV17 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV17 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV17,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV17 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV17),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV17 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV17 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV17),
				'InitialPlacement', this.ModelTransformDataV17,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV17),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV17 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV17 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV17),
						];

						this.ModelParticleCloudV17 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV17 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV17 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV17 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV17),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV17),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV17),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV17 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV17 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV17),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV17),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV17),
						];

						this.ModelStreakV17 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV17 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV17 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV17),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV17),
						];

						this.ModelEffectLightV17 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 4],
				'ranges' , ['[]','float32',2],
						];

						this.ModelLightDataV17 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV17),
						];

						this.__root=this.ModelFileDataV17 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV17),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV17),
				'model', Utils.getPointerReader(this.ModelModelDataV17),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV17),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV17),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV17),
				'lightData', Utils.getPointerReader(this.ModelLightDataV17),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
				'soundScript' , Utils.getFileNameReader(),
						];

			},

			// => Version: 16
			16:function(){
						this.ModelTextureDataV16 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV16 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV16 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV16),
				'constants', Utils.getArrayReader(this.ModelConstantDataV16),
						];

						this.ModelMeshLodDataV16 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV16 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV16),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV16 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV16 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV16,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV16 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV16),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV16 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV16 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV16),
				'InitialPlacement', this.ModelTransformDataV16,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV16),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV16 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV16 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV16),
						];

						this.ModelParticleCloudV16 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV16 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV16 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV16 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV16),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV16),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV16),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV16 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV16 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV16),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV16),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV16),
						];

						this.ModelStreakV16 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV16 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV16 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV16),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV16),
						];

						this.ModelEffectLightV16 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 4],
				'ranges' , ['[]','float32',2],
						];

						this.ModelLightDataV16 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV16),
						];

						this.__root=this.ModelFileDataV16 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV16),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV16),
				'model', Utils.getPointerReader(this.ModelModelDataV16),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV16),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV16),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV16),
				'lightData', Utils.getPointerReader(this.ModelLightDataV16),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
				'lodOverride', ['[]', 'float32', 2],
						];

			},

			// => Version: 15
			15:function(){
						this.ModelTextureDataV15 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV15 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV15 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV15),
				'constants', Utils.getArrayReader(this.ModelConstantDataV15),
						];

						this.ModelMeshLodDataV15 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV15 =[
				'lods', Utils.getArrayReader(this.ModelMeshLodDataV15),
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV15 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV15 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV15,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV15 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV15),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV15 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV15 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV15),
				'InitialPlacement', this.ModelTransformDataV15,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV15),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV15 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV15 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV15),
						];

						this.ModelParticleCloudV15 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV15 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV15 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV15 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV15),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV15),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV15),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV15 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV15 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV15),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV15),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV15),
						];

						this.ModelStreakV15 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV15 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV15 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV15),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV15),
						];

						this.ModelEffectLightV15 =[
				'bone', Utils.getQWordReader(),
				'color', ['[]', 'uint8', 4],
				'ranges' , ['[]','float32',2],
						];

						this.ModelLightDataV15 =[
				'effectLights', Utils.getArrayReader(this.ModelEffectLightV15),
						];

						this.__root=this.ModelFileDataV15 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV15),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV15),
				'model', Utils.getPointerReader(this.ModelModelDataV15),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV15),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV15),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV15),
				'lightData', Utils.getPointerReader(this.ModelLightDataV15),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
						];

			},

			// => Version: 14
			14:function(){
						this.ModelTextureDataV14 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV14 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV14 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV14),
				'constants', Utils.getArrayReader(this.ModelConstantDataV14),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV14 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'actionOffsetNames', Utils.getArrayReader(Utils.getQWordReader()),
				'actionOffsets', Utils.getArrayReader(['[]','float32',3]),
						];

						this.ModelTransformDataV14 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV14 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV14,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV14 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV14),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV14 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV14 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV14),
				'InitialPlacement', this.ModelTransformDataV14,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV14),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV14 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV14 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV14),
						];

						this.ModelParticleCloudV14 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV14 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV14 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV14 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV14),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV14),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV14),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV14 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV14 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV14),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV14),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV14),
						];

						this.ModelStreakV14 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV14 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV14 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV14),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV14),
						];

						this.__root=this.ModelFileDataV14 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV14),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV14),
				'model', Utils.getPointerReader(this.ModelModelDataV14),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV14),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV14),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV14),
						];

			},

			// => Version: 13
			13:function(){
						this.ModelTextureDataV13 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV13 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV13 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV13),
				'constants', Utils.getArrayReader(this.ModelConstantDataV13),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV13 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV13 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV13 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV13,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV13 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV13),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV13 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV13 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV13),
				'InitialPlacement', this.ModelTransformDataV13,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV13),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV13 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV13 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV13),
						];

						this.ModelParticleCloudV13 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV13 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV13 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV13 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV13),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV13),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV13),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV13 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV13 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV13),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV13),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV13),
						];

						this.ModelStreakV13 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV13 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV13 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV13),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV13),
						];

						this.__root=this.ModelFileDataV13 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV13),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV13),
				'model', Utils.getPointerReader(this.ModelModelDataV13),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV13),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV13),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV13),
						];

			},

			// => Version: 12
			12:function(){
						this.ModelTextureDataV12 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV12 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV12 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV12),
				'constants', Utils.getArrayReader(this.ModelConstantDataV12),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV12 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
				'seamVertIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV12 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV12 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV12,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV12 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV12),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV12 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV12 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV12),
				'InitialPlacement', this.ModelTransformDataV12,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV12),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV12 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV12 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV12),
						];

						this.ModelParticleCloudV12 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV12 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV12 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV12 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV12),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV12),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV12),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV12 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV12 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV12),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV12),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV12),
						];

						this.ModelStreakV12 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV12 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV12 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV12),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV12),
						];

						this.__root=this.ModelFileDataV12 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV12),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV12),
				'model', Utils.getPointerReader(this.ModelModelDataV12),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV12),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV12),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV12),
						];

			},

			// => Version: 11, ReferencedFunction: 0x106A6B0
			11:function(){
						this.ModelTextureDataV11 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV11 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV11 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV11),
				'constants', Utils.getArrayReader(this.ModelConstantDataV11),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV11 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV11 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV11 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV11,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV11 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV11),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV11 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV11 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV11),
				'InitialPlacement', this.ModelTransformDataV11,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV11),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV11 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV11 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV11),
						];

						this.ModelParticleCloudV11 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelParticleCurveV11 =[
				'curveType' , 'uint8',
				'keys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleFlipbookV11 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleEmitterV11 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'accelerationDistRange' , ['[]','float32',2],
				'accelerationDistSpeed' , ['[]','float32',2],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'colorFalloff' , 'float32',
				'drag' , 'float32',
				'opacityCurve', Utils.getPointerReader(this.ModelParticleCurveV11),
				'opacityCurvePreset' , 'uint32',
				'flags' , 'uint32',
				'flipbook', Utils.getPointerReader(this.ModelParticleFlipbookV11),
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationDrag' , 'float32',
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'scaleCurve', Utils.getPointerReader(this.ModelParticleCurveV11),
				'scaleCurvePreset' , 'uint32',
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'spawnWindEmit' , ['[]','float32',2],
				'spawnWindSpeed' , ['[]','float32',2],
				'texCoordRect' , ['[]','float32',4],
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV11 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV11 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV11),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV11),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV11),
						];

						this.ModelStreakV11 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV11 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV11 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV11),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV11),
						];

						this.__root=this.ModelFileDataV11 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV11),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV11),
				'model', Utils.getPointerReader(this.ModelModelDataV11),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV11),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV11),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV11),
						];

			},

			// => Version: 10
			10:function(){
						this.ModelTextureDataV10 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV10 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV10 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV10),
				'constants', Utils.getArrayReader(this.ModelConstantDataV10),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV10 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV10 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV10 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV10,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV10 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV10),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV10 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV10 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV10),
				'InitialPlacement', this.ModelTransformDataV10,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV10),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV10 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV10 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV10),
						];

						this.ModelParticleFlipbookV10 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleCloudV10 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV10),
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'opacityCurveType' , 'uint8',
				'opacityKeys', Utils.getArrayReader(['[]','float32',2]),
				'scaleCurveType' , 'uint8',
				'scaleKeys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleEmitterV10 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'flags' , 'uint32',
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV10 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV10 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV10),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV10),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV10),
						];

						this.ModelStreakV10 =[
				'anchorIndices', Utils.getArrayReader('uint32'),
				'bone', Utils.getQWordReader(),
				'flags' , 'uint32',
				'materialIndex' , 'uint32',
				'spawnFreq' , 'float32',
				'stretchDist' , 'float32',
				'texScale' , 'float32',
				'visBoneIndex' , 'uint32',
						];

						this.ModelStreakAnchorV10 =[
				'bone', Utils.getQWordReader(),
				'color' , 'uint32',
				'falloff' , 'float32',
				'lifetime' , 'float32',
						];

						this.ModelStreakDataV10 =[
				'streaks', Utils.getArrayReader(this.ModelStreakV10),
				'anchors', Utils.getArrayReader(this.ModelStreakAnchorV10),
						];

						this.__root=this.ModelFileDataV10 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV10),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV10),
				'model', Utils.getPointerReader(this.ModelModelDataV10),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV10),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV10),
				'streakData', Utils.getPointerReader(this.ModelStreakDataV10),
						];

			},

			// => Version: 9
			9:function(){
						this.ModelTextureDataV9 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV9 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV9 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'texCoordCount' , 'uint8',
				'textures', Utils.getArrayReader(this.ModelTextureDataV9),
				'constants', Utils.getArrayReader(this.ModelConstantDataV9),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV9 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV9 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV9 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV9,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV9 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV9),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV9 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV9 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV9),
				'InitialPlacement', this.ModelTransformDataV9,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV9),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV9 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV9 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV9),
						];

						this.ModelParticleFlipbookV9 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleCloudV9 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV9),
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'opacityCurveType' , 'uint8',
				'opacityKeys', Utils.getArrayReader(['[]','float32',2]),
				'scaleCurveType' , 'uint8',
				'scaleKeys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleEmitterV9 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'flags' , 'uint32',
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV9 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV9 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV9),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV9),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV9),
						];

						this.__root=this.ModelFileDataV9 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV9),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV9),
				'model', Utils.getPointerReader(this.ModelModelDataV9),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV9),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV9),
						];

			},

			// => Version: 8, ReferencedFunction: 0x106D750
			8:function(){
						this.ModelTextureDataV8 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
				'uvAnimId' , 'uint8',
				'uvPSInputIndex' , 'uint8',
						];

						this.ModelConstantDataV8 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV8 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV8),
				'constants', Utils.getArrayReader(this.ModelConstantDataV8),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV8 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
						];

						this.ModelTransformDataV8 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV8 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV8,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV8 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV8),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV8 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV8 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV8),
				'InitialPlacement', this.ModelTransformDataV8,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV8),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV8 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV8 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV8),
						];

						this.ModelParticleFlipbookV8 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleCloudV8 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV8),
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'opacityCurveType' , 'uint8',
				'opacityKeys', Utils.getArrayReader(['[]','float32',2]),
				'scaleCurveType' , 'uint8',
				'scaleKeys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleEmitterV8 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'flags' , 'uint32',
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV8 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV8 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV8),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV8),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV8),
						];

						this.__root=this.ModelFileDataV8 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV8),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV8),
				'model', Utils.getPointerReader(this.ModelModelDataV8),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV8),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV8),
						];

			},

			// => Version: 7
			7:function(){
						this.ModelTextureDataV7 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
						];

						this.ModelConstantDataV7 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV7 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV7),
				'constants', Utils.getArrayReader(this.ModelConstantDataV7),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV7 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV7 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelAnimationDataV7 =[
				'token', Utils.getQWordReader(),
				'animation', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV7),
						];

						this.ModelAnimationImportDataV7 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelTransformDataV7 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV7 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV7,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV7 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV7),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV7 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV7 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV7),
				'InitialPlacement', this.ModelTransformDataV7,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV7),
				'boneFlags', Utils.getArrayReader('uint32'),
						];

						this.ModelFloatPropertyDataV7 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV7 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV7),
						];

						this.ModelCollisionMeshV7 =[
				'animationSequence', Utils.getQWordReader(),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionCloudV7 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelCollisionCubeV7 =[
				'transform', ['[]', ['[]','float32',4], 3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV7 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV7 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelCollisionDataV7 =[
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV7),
				'clouds', Utils.getArrayReader(this.ModelCollisionCloudV7),
				'cubes', Utils.getArrayReader(this.ModelCollisionCubeV7),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV7),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV7),
						];

						this.ModelParticleFlipbookV7 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleCloudV7 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV7),
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'opacityCurveType' , 'uint8',
				'opacityKeys', Utils.getArrayReader(['[]','float32',2]),
				'scaleCurveType' , 'uint8',
				'scaleKeys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleEmitterV7 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'flags' , 'uint32',
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV7 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV7 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV7),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV7),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV7),
						];

						this.__root=this.ModelFileDataV7 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV7),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV7),
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV7),
				'animationFallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'animationImports', Utils.getArrayReader(this.ModelAnimationImportDataV7),
				'model', Utils.getPointerReader(this.ModelModelDataV7),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV7),
				'collisionData', Utils.getPointerReader(this.ModelCollisionDataV7),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV7),
						];

			},

			// => Version: 6, ReferencedFunction: 0x106CE90
			6:function(){
						this.ModelTextureDataV6 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
						];

						this.ModelConstantDataV6 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV6 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV6),
				'constants', Utils.getArrayReader(this.ModelConstantDataV6),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV6 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visBoneIndices', Utils.getArrayReader('uint32'),
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV6 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelAnimationDataV6 =[
				'token', Utils.getQWordReader(),
				'animation', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV6),
						];

						this.ModelAnimationImportDataV6 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelTransformDataV6 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV6 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV6,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV6 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV6),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV6 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV6 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV6),
				'InitialPlacement', this.ModelTransformDataV6,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV6),
						];

						this.ModelFloatPropertyDataV6 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV6 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV6),
						];

						this.ModelCollisionMeshV6 =[
				'animationSequence', Utils.getQWordReader(),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionCloudV6 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelCollisionCubeV6 =[
				'transform', ['[]', ['[]','float32',4], 3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV6 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV6 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelCollisionDataV6 =[
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV6),
				'clouds', Utils.getArrayReader(this.ModelCollisionCloudV6),
				'cubes', Utils.getArrayReader(this.ModelCollisionCubeV6),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV6),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV6),
						];

						this.ModelParticleFlipbookV6 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleCloudV6 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV6),
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'opacityCurveType' , 'uint8',
				'opacityKeys', Utils.getArrayReader(['[]','float32',2]),
				'scaleCurveType' , 'uint8',
				'scaleKeys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleEmitterV6 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'flags' , 'uint32',
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelParticleObstacleV6 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
				'visBoneIndex' , 'uint32',
						];

						this.ModelCloudDataV6 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV6),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV6),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV6),
						];

						this.__root=this.ModelFileDataV6 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV6),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV6),
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV6),
				'animationFallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'animationImports', Utils.getArrayReader(this.ModelAnimationImportDataV6),
				'model', Utils.getPointerReader(this.ModelModelDataV6),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV6),
				'collisionData', Utils.getPointerReader(this.ModelCollisionDataV6),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV6),
						];

			},

			// => Version: 5
			5:function(){
						this.ModelTextureDataV5 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
						];

						this.ModelConstantDataV5 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV5 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV5),
				'constants', Utils.getArrayReader(this.ModelConstantDataV5),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV5 =[
				'mesh', this.PackGrannyMeshType,
				'flags' , 'uint32',
				'visTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV5 =[
				'token', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelAnimationDataV5 =[
				'token', Utils.getQWordReader(),
				'animation', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV5),
						];

						this.ModelTransformDataV5 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV5 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV5,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV5 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV5),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV5 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV5 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV5),
				'InitialPlacement', this.ModelTransformDataV5,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV5),
						];

						this.ModelFloatPropertyDataV5 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV5 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV5),
						];

						this.ModelCollisionMeshV5 =[
				'animationSequence', Utils.getQWordReader(),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionCloudV5 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelCollisionCubeV5 =[
				'transform', ['[]', ['[]','float32',4], 3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV5 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV5 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelCollisionDataV5 =[
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV5),
				'clouds', Utils.getArrayReader(this.ModelCollisionCloudV5),
				'cubes', Utils.getArrayReader(this.ModelCollisionCubeV5),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV5),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV5),
						];

						this.ModelParticleFlipbookV5 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleCloudV5 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flags' , 'uint32',
				'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV5),
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'opacityCurveType' , 'uint8',
				'opacityKeys', Utils.getArrayReader(['[]','float32',2]),
				'scaleCurveType' , 'uint8',
				'scaleKeys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleEmitterV5 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'flags' , 'uint32',
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
						];

						this.ModelParticleObstacleV5 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelCloudDataV5 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV5),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV5),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV5),
						];

						this.__root=this.ModelFileDataV5 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV5),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV5),
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV5),
				'model', Utils.getPointerReader(this.ModelModelDataV5),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV5),
				'collisionData', Utils.getPointerReader(this.ModelCollisionDataV5),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV5),
						];

			},

			// => Version: 4
			4:function(){
						this.ModelTextureDataV4 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
						];

						this.ModelConstantDataV4 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV4 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV4),
				'constants', Utils.getArrayReader(this.ModelConstantDataV4),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV4 =[
				'mesh', this.PackGrannyMeshType,
				'visTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV4 =[
				'token', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelAnimationDataV4 =[
				'token', Utils.getQWordReader(),
				'animation', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV4),
						];

						this.ModelTransformDataV4 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV4 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV4,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV4 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV4),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV4 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV4 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV4),
				'InitialPlacement', this.ModelTransformDataV4,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV4),
						];

						this.ModelFloatPropertyDataV4 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV4 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV4),
						];

						this.ModelCollisionMeshV4 =[
				'animationSequence', Utils.getQWordReader(),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionCloudV4 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelCollisionCubeV4 =[
				'transform', ['[]', ['[]','float32',4], 3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV4 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV4 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelCollisionDataV4 =[
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV4),
				'clouds', Utils.getArrayReader(this.ModelCollisionCloudV4),
				'cubes', Utils.getArrayReader(this.ModelCollisionCubeV4),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV4),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV4),
						];

						this.ModelParticleFlipbookV4 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleCloudV4 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV4),
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'opacityCurveType' , 'uint8',
				'opacityKeys', Utils.getArrayReader(['[]','float32',2]),
				'scaleCurveType' , 'uint8',
				'scaleKeys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleEmitterV4 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'flags' , 'uint32',
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
						];

						this.ModelParticleObstacleV4 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelCloudDataV4 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV4),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV4),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV4),
						];

						this.__root=this.ModelFileDataV4 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV4),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV4),
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV4),
				'model', Utils.getPointerReader(this.ModelModelDataV4),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV4),
				'collisionData', Utils.getPointerReader(this.ModelCollisionDataV4),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV4),
						];

			},

			// => Version: 3
			3:function(){
						this.ModelTextureDataV3 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
						];

						this.ModelConstantDataV3 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV3 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV3),
				'constants', Utils.getArrayReader(this.ModelConstantDataV3),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV3 =[
				'mesh', this.PackGrannyMeshType,
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelAnimationDataV3 =[
				'token', Utils.getQWordReader(),
				'animation', this.PackGrannyAnimationTypeV0,
						];

						this.ModelTransformDataV3 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV3 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV3,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV3 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV3),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV3 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV3 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV3),
				'InitialPlacement', this.ModelTransformDataV3,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV3),
						];

						this.ModelFloatPropertyDataV3 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV3 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV3),
						];

						this.ModelCollisionMeshV3 =[
				'animationSequence', Utils.getQWordReader(),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionCloudV3 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelCollisionCubeV3 =[
				'transform', ['[]', ['[]','float32',4], 3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV3 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV3 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelCollisionDataV3 =[
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV3),
				'clouds', Utils.getArrayReader(this.ModelCollisionCloudV3),
				'cubes', Utils.getArrayReader(this.ModelCollisionCubeV3),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV3),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV3),
						];

						this.ModelParticleFlipbookV3 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleCloudV3 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV3),
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'opacityCurveType' , 'uint8',
				'opacityKeys', Utils.getArrayReader(['[]','float32',2]),
				'scaleCurveType' , 'uint8',
				'scaleKeys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleEmitterV3 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'flags' , 'uint32',
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
						];

						this.ModelParticleObstacleV3 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelCloudDataV3 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV3),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV3),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV3),
						];

						this.__root=this.ModelFileDataV3 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV3),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV3),
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV3),
				'model', Utils.getPointerReader(this.ModelModelDataV3),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV3),
				'collisionData', Utils.getPointerReader(this.ModelCollisionDataV3),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV3),
						];

			},

			// => Version: 2
			2:function(){
						this.ModelTextureDataV2 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
						];

						this.ModelConstantDataV2 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV2 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV2),
				'constants', Utils.getArrayReader(this.ModelConstantDataV2),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV2 =[
				'mesh', this.PackGrannyMeshType,
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelAnimationDataV2 =[
				'token', Utils.getQWordReader(),
				'animation', this.PackGrannyAnimationTypeV0,
						];

						this.ModelTransformDataV2 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV2 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV2,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV2 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV2),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV2 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV2 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV2),
				'InitialPlacement', this.ModelTransformDataV2,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV2),
						];

						this.ModelFloatPropertyDataV2 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV2 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV2),
						];

						this.ModelCollisionMeshV2 =[
				'animationSequence', Utils.getQWordReader(),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionCloudV2 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV2 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelCollisionDataV2 =[
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV2),
				'clouds', Utils.getArrayReader(this.ModelCollisionCloudV2),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV2),
						];

						this.ModelParticleFlipbookV2 =[
				'columns' , 'uint8',
				'count' , 'uint8',
				'flags' , 'uint8',
				'fps' , 'uint32',
				'rows' , 'uint8',
				'start' , 'uint8',
						];

						this.ModelParticleCloudV2 =[
				'acceleration' , ['[]','float32',3],
				'bone', Utils.getQWordReader(),
				'drag' , 'float32',
				'emitterIndices', Utils.getArrayReader('uint32'),
				'flipbook', Utils.getArrayReader(this.ModelParticleFlipbookV2),
				'materialIndex' , 'uint32',
				'obstacleIndices', Utils.getArrayReader('uint32'),
				'opacityCurveType' , 'uint8',
				'opacityKeys', Utils.getArrayReader(['[]','float32',2]),
				'scaleCurveType' , 'uint8',
				'scaleKeys', Utils.getArrayReader(['[]','float32',2]),
						];

						this.ModelParticleEmitterV2 =[
				'acceleration', ['[]', ['[]','float32',2], 4],
				'bone', Utils.getQWordReader(),
				'colorBegin' , ['[]','float32',4],
				'colorEnd' , ['[]','float32',4],
				'colorPeriod' , ['[]','float32',2],
				'flags' , 'uint32',
				'lifetime' , ['[]','float32',2],
				'rotationChange' , ['[]','float32',2],
				'rotationInitial' , ['[]','float32',2],
				'scaleChange', ['[]', ['[]','float32',2], 2],
				'scaleInitial', ['[]', ['[]','float32',2], 2],
				'velocity', ['[]', ['[]','float32',2], 4],
				'velocityDistRange' , ['[]','float32',2],
				'velocityDistSpeed' , ['[]','float32',2],
				'spawnGroupSize' , ['[]','float32',2],
				'spawnPeriod' , 'float32',
				'spawnProbability' , 'float32',
				'spawnRadius' , ['[]','float32',2],
				'spawnShape' , 'uint8',
						];

						this.ModelParticleObstacleV2 =[
				'bone', Utils.getQWordReader(),
				'dragCoef' , 'float32',
				'flags' , 'uint32',
				'geoData' , ['[]','float32',3],
				'gravityCoef' , 'float32',
				'response' , 'uint8',
				'type' , 'uint8',
						];

						this.ModelCloudDataV2 =[
				'clouds', Utils.getArrayReader(this.ModelParticleCloudV2),
				'emitters', Utils.getArrayReader(this.ModelParticleEmitterV2),
				'obstacles', Utils.getArrayReader(this.ModelParticleObstacleV2),
						];

						this.__root=this.ModelFileDataV2 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV2),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV2),
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV2),
				'model', Utils.getPointerReader(this.ModelModelDataV2),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV2),
				'collisionData', Utils.getPointerReader(this.ModelCollisionDataV2),
				'cloudData', Utils.getPointerReader(this.ModelCloudDataV2),
						];

			},

			// => Version: 1
			1:function(){
						this.ModelTextureDataV1 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
						];

						this.ModelConstantDataV1 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV1 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV1),
				'constants', Utils.getArrayReader(this.ModelConstantDataV1),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV1 =[
				'mesh', this.PackGrannyMeshType,
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelAnimationDataV1 =[
				'token', Utils.getQWordReader(),
				'animation', this.PackGrannyAnimationTypeV0,
						];

						this.ModelTransformDataV1 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV1 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV1,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV1 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV1),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV1 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV1 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV1),
				'InitialPlacement', this.ModelTransformDataV1,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV1),
						];

						this.ModelFloatPropertyDataV1 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV1 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV1),
						];

						this.ModelChunkCollisionMeshV1 =[
				'animationSequence', Utils.getQWordReader(),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelChunkCollisionCloudV1 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelChunkCollisionSurfaceV1 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelChunkCollisionDataV1 =[
				'meshes', Utils.getArrayReader(this.ModelChunkCollisionMeshV1),
				'clouds', Utils.getArrayReader(this.ModelChunkCollisionCloudV1),
				'surfaces', Utils.getArrayReader(this.ModelChunkCollisionSurfaceV1),
						];

						this.__root=this.ModelFileDataV1 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV1),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV1),
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV1),
				'model', Utils.getPointerReader(this.ModelModelDataV1),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV1),
				'collisionData', Utils.getPointerReader(this.ModelChunkCollisionDataV1),
						];

			},

			// => Version: 0
			0:function(){
						this.ModelTextureDataV0 =[
				'filename' , Utils.getFileNameReader(),
				'textureFlags' , 'uint32',
				'token', Utils.getQWordReader(),
				'blitId', Utils.getQWordReader(),
						];

						this.ModelConstantDataV0 =[
				'name' , 'uint32',
				'value' , ['[]','float32',4],
				'constantFlags' , 'uint32',
						];

						this.ModelMaterialDataV0 =[
				'filename' , Utils.getFileNameReader(),
				'materialFlags' , 'uint32',
				'sortOrder' , 'uint32',
				'textures', Utils.getArrayReader(this.ModelTextureDataV0),
				'constants', Utils.getArrayReader(this.ModelConstantDataV0),
						];

						this.PackGrannyMeshType =[
				'mesh', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshDataV0 =[
				'mesh', this.PackGrannyMeshType,
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelAnimationDataV0 =[
				'token', Utils.getQWordReader(),
				'animation', this.PackGrannyAnimationTypeV0,
						];

						this.ModelTransformDataV0 =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneDataV0 =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformDataV0,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelSkeletonDataV0 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneDataV0),
				'LODType' , 'uint32',
						];

						this.ModelMeshBindingDataV0 =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelModelDataV0 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelSkeletonDataV0),
				'InitialPlacement', this.ModelTransformDataV0,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingDataV0),
						];

						this.ModelFloatPropertyDataV0 =[
				'token', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.ModelPropertyDataV0 =[
				'boolTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'floatValues', Utils.getArrayReader(this.ModelFloatPropertyDataV0),
						];

						this.__root=this.ModelFileDataV0 =[
				'materials', Utils.getRefArrayReader(this.ModelMaterialDataV0),
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV0),
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV0),
				'model', Utils.getPointerReader(this.ModelModelDataV0),
				'properties', Utils.getPointerReader(this.ModelPropertyDataV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: ANIM, versions: 26, strucTab: 0x15D0220 
	///==================================================
	{
		name:'ANIM',
		versions:{


			// => Version: 25, ReferencedFunction: 0x10685D0
			25:function(){
						this.PackGrannyAnimationTypeV1 =[
				'animation', Utils.getArrayReader('uint8'),
				'pointers', Utils.getArrayReader('uint32'),
						];

						this.ModelAnimationLodV25 =[
				'data', this.PackGrannyAnimationTypeV1,
				'fileFull' , Utils.getFileNameReader(),
						];

						this.ModelVisTrackDataV33 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV25 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV25 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV25),
						];

						this.ModelCloudAnimV25 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),
						];

						this.ModelMatConstAnimV25 =[
				'materialId' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV25 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),
						];

						this.ModelAnimPropertyDataV25 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV25 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV25 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),
						];

						this.ModelAnchorAnimV25 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),
						];

						this.ModelStreakAnimV25 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV25),
						];

						this.ModelLightningAnimV25 =[
				'bone', Utils.getQWordReader(),
				'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),
						];

						this.ModelWindAnimationV25 =[
				'bone', Utils.getQWordReader(),
				'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV25),
						];

						this.ModelAnimationDataV33 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV1,
				'animLod', Utils.getPointerReader(this.ModelAnimationLodV25),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV33),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV25),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV25),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV25),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV25),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV25),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV25),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV25),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV25),
				'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV25),
				'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV25),
						];

						this.ModelCompoundAnimationDataV25 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportSequenceV25 =[
				'name', Utils.getQWordReader(),
				'duration' , 'float32',
						];

						this.ModelAnimationImportDataV33 =[
				'filename' , Utils.getFileNameReader(),
				'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV25),
						];

						this.ModelFileAnimationBankV25 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV33),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV25),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV33),
						];

						this.__root=this.ModelFileAnimationV25 =[
				'bank', Utils.getPointerReader(this.ModelFileAnimationBankV25),
				'anim', this.PackGrannyAnimationTypeV1,
						];

			},

			// => Version: 24, ReferencedFunction: 0x10683E0
			24:function(){
						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelAnimationLodV24 =[
				'data', this.PackGrannyAnimationTypeV0,
				'fileFull' , Utils.getFileNameReader(),
						];

						this.ModelVisTrackDataV32 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV24 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV24 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV24),
						];

						this.ModelCloudAnimV24 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),
						];

						this.ModelMatConstAnimV24 =[
				'materialId' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV24 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),
						];

						this.ModelAnimPropertyDataV24 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV24 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV24 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),
						];

						this.ModelAnchorAnimV24 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),
						];

						this.ModelStreakAnimV24 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV24),
						];

						this.ModelLightningAnimV24 =[
				'bone', Utils.getQWordReader(),
				'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),
						];

						this.ModelWindAnimationV24 =[
				'bone', Utils.getQWordReader(),
				'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV24),
						];

						this.ModelAnimationDataV32 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV0,
				'animLod', Utils.getPointerReader(this.ModelAnimationLodV24),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV32),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV24),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV24),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV24),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV24),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV24),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV24),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV24),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV24),
				'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV24),
				'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV24),
						];

						this.ModelCompoundAnimationDataV24 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportSequenceV24 =[
				'name', Utils.getQWordReader(),
				'duration' , 'float32',
						];

						this.ModelAnimationImportDataV32 =[
				'filename' , Utils.getFileNameReader(),
				'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV24),
						];

						this.ModelFileAnimationBankV24 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV32),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV24),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV32),
						];

						this.__root=this.ModelFileAnimationV24 =[
				'bank', Utils.getPointerReader(this.ModelFileAnimationBankV24),
				'anim', this.PackGrannyAnimationTypeV0,
						];

			},

			// => Version: 23, ReferencedFunction: 0x1068240
			23:function(){
						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV31 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV23 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV23 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV23),
						];

						this.ModelCloudAnimV23 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),
						];

						this.ModelMatConstAnimV23 =[
				'materialId' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV23 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),
						];

						this.ModelAnimPropertyDataV23 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV23 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV23 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),
						];

						this.ModelAnchorAnimV23 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),
						];

						this.ModelStreakAnimV23 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV23),
						];

						this.ModelLightningAnimV23 =[
				'bone', Utils.getQWordReader(),
				'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),
						];

						this.ModelWindAnimationV23 =[
				'bone', Utils.getQWordReader(),
				'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV23),
						];

						this.ModelAnimationDataV31 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV31),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV23),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV23),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV23),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV23),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV23),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV23),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV23),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV23),
				'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV23),
				'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV23),
						];

						this.ModelCompoundAnimationDataV23 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportSequenceV23 =[
				'name', Utils.getQWordReader(),
				'duration' , 'float32',
						];

						this.ModelAnimationImportDataV31 =[
				'filename' , Utils.getFileNameReader(),
				'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV23),
						];

						this.__root=this.ModelFileAnimationBankV23 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV31),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV23),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV31),
						];

			},

			// => Version: 22
			22:function(){
						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV30 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV22 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV22 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV22),
						];

						this.ModelCloudAnimV22 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),
						];

						this.ModelMatConstAnimV22 =[
				'materialId' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV22 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),
						];

						this.ModelAnimPropertyDataV22 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV22 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV22 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),
						];

						this.ModelAnchorAnimV22 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),
						];

						this.ModelStreakAnimV22 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV22),
						];

						this.ModelLightningAnimV22 =[
				'bone', Utils.getQWordReader(),
				'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),
						];

						this.ModelWindAnimationV22 =[
				'bone', Utils.getQWordReader(),
				'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV22),
						];

						this.ModelAnimationDataV30 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV30),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV22),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV22),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV22),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV22),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV22),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV22),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV22),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV22),
				'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV22),
				'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV22),
						];

						this.ModelCompoundAnimationDataV22 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportSequenceV22 =[
				'name', Utils.getQWordReader(),
				'duration' , 'float32',
						];

						this.ModelAnimationImportDataV30 =[
				'filename' , Utils.getFileNameReader(),
				'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV22),
						];

						this.__root=this.ModelFileAnimationBankV22 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV30),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV22),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV30),
						];

			},

			// => Version: 21
			21:function(){
						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV29 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV21 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV21 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV21),
						];

						this.ModelCloudAnimV21 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),
						];

						this.ModelMatConstAnimV21 =[
				'materialId' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV21 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),
						];

						this.ModelAnimPropertyDataV21 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV21 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV21 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),
						];

						this.ModelAnchorAnimV21 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),
						];

						this.ModelStreakAnimV21 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV21),
						];

						this.ModelLightningAnimV21 =[
				'bone', Utils.getQWordReader(),
				'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),
						];

						this.ModelWindAnimationV21 =[
				'bone', Utils.getQWordReader(),
				'windTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV21),
						];

						this.ModelAnimationDataV29 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV29),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV21),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV21),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV21),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV21),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV21),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV21),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV21),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV21),
				'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV21),
				'windAnimData', Utils.getArrayReader(this.ModelWindAnimationV21),
						];

						this.ModelCompoundAnimationDataV21 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportSequenceV21 =[
				'name', Utils.getQWordReader(),
				'duration' , 'float32',
						];

						this.ModelAnimationImportDataV29 =[
				'filename' , Utils.getFileNameReader(),
				'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV21),
						];

						this.__root=this.ModelFileAnimationBankV21 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV29),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV21),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV29),
				'modelReference' , Utils.getFileNameReader(),
						];

			},

			// => Version: 20
			20:function(){
						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV28 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV20 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV20 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV20),
						];

						this.ModelCloudAnimV20 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),
						];

						this.ModelMatConstAnimV20 =[
				'materialId' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV20 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),
						];

						this.ModelAnimPropertyDataV20 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV20 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV20 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),
						];

						this.ModelAnchorAnimV20 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),
						];

						this.ModelStreakAnimV20 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV20),
						];

						this.ModelLightningAnimV20 =[
				'bone', Utils.getQWordReader(),
				'lightningTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV20),
						];

						this.ModelAnimationDataV28 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV28),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV20),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV20),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV20),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV20),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV20),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV20),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV20),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV20),
				'lightningAnim', Utils.getArrayReader(this.ModelLightningAnimV20),
						];

						this.ModelCompoundAnimationDataV20 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportSequenceV20 =[
				'name', Utils.getQWordReader(),
				'duration' , 'float32',
						];

						this.ModelAnimationImportDataV28 =[
				'filename' , Utils.getFileNameReader(),
				'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV20),
						];

						this.__root=this.ModelFileAnimationBankV20 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV28),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV20),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV28),
				'modelReference' , Utils.getFileNameReader(),
						];

			},

			// => Version: 19
			19:function(){
						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV27 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV19 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV19 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV19),
						];

						this.ModelCloudAnimV19 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV19),
						];

						this.ModelMatConstAnimV19 =[
				'materialId' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV19 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV19),
						];

						this.ModelAnimPropertyDataV19 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV19 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV19 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV19),
						];

						this.ModelAnchorAnimV19 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV19),
						];

						this.ModelStreakAnimV19 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV19),
						];

						this.ModelAnimationDataV27 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV27),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV19),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV19),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV19),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV19),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV19),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV19),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV19),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV19),
						];

						this.ModelCompoundAnimationDataV19 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportSequenceV19 =[
				'name', Utils.getQWordReader(),
				'duration' , 'float32',
						];

						this.ModelAnimationImportDataV27 =[
				'filename' , Utils.getFileNameReader(),
				'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV19),
						];

						this.__root=this.ModelFileAnimationBankV19 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV27),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV19),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV27),
				'modelReference' , Utils.getFileNameReader(),
						];

			},

			// => Version: 18, ReferencedFunction: 0x1068190
			18:function(){
						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV26 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV18 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV18 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV18),
						];

						this.ModelCloudAnimV18 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV18),
						];

						this.ModelMatConstAnimV18 =[
				'materialId' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV18 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV18),
						];

						this.ModelAnimPropertyDataV18 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV18 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV18 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV18),
						];

						this.ModelAnchorAnimV18 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV18),
						];

						this.ModelStreakAnimV18 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV18),
						];

						this.ModelAnimationDataV26 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV26),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV18),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV18),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV18),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV18),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV18),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV18),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV18),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV18),
						];

						this.ModelCompoundAnimationDataV18 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportSequenceV18 =[
				'name', Utils.getQWordReader(),
				'duration' , 'float32',
						];

						this.ModelAnimationImportDataV26 =[
				'filename' , Utils.getFileNameReader(),
				'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV18),
						];

						this.__root=this.ModelFileAnimationBankV18 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV26),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV18),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV26),
						];

			},

			// => Version: 17, ReferencedFunction: 0x1067C30
			17:function(){
						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV25 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV17 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV17 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV17),
						];

						this.ModelCloudAnimV17 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV17),
						];

						this.ModelMatConstAnimV17 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV17 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV17),
						];

						this.ModelAnimPropertyDataV17 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV17 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV17 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV17),
						];

						this.ModelAnchorAnimV17 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV17),
						];

						this.ModelStreakAnimV17 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV17),
						];

						this.ModelAnimationDataV25 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV25),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV17),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV17),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV17),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV17),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV17),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV17),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV17),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV17),
						];

						this.ModelCompoundAnimationDataV17 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportSequenceV17 =[
				'name', Utils.getQWordReader(),
				'duration' , 'float32',
						];

						this.ModelAnimationImportDataV25 =[
				'filename' , Utils.getFileNameReader(),
				'sequences', Utils.getArrayReader(this.ModelAnimationImportSequenceV17),
						];

						this.__root=this.ModelFileAnimationBankV17 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV25),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV17),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV25),
						];

			},

			// => Version: 16
			16:function(){
						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelVisTrackDataV24 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV16 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV16 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV16),
						];

						this.ModelCloudAnimV16 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV16),
						];

						this.ModelMatConstAnimV16 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV16 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV16),
						];

						this.ModelAnimPropertyDataV16 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV16 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV16 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV16),
						];

						this.ModelAnchorAnimV16 =[
				'bone', Utils.getQWordReader(),
				'anchorTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV16),
						];

						this.ModelStreakAnimV16 =[
				'bone', Utils.getQWordReader(),
				'anchorAnim', Utils.getArrayReader(this.ModelAnchorAnimV16),
						];

						this.ModelAnimationDataV24 =[
				'token', Utils.getQWordReader(),
				'data', this.PackGrannyAnimationTypeV0,
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV24),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV16),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV16),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV16),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV16),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV16),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV16),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV16),
				'streakAnim', Utils.getArrayReader(this.ModelStreakAnimV16),
						];

						this.ModelCompoundAnimationDataV16 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV24 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV16 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV24),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV16),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV24),
						];

			},

			// => Version: 15
			15:function(){
						this.ModelVisTrackDataV23 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV15 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV15 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV15),
						];

						this.ModelCloudAnimV15 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV15),
						];

						this.ModelMatConstAnimV15 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV15 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV15),
						];

						this.ModelAnimPropertyDataV15 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV15 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelBoneConstraintAnimV15 =[
				'bone', Utils.getQWordReader(),
				'bcTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV15),
						];

						this.ModelAnimationDataV23 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV23),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV15),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV15),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV15),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV15),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV15),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV15),
				'bcAnim', Utils.getArrayReader(this.ModelBoneConstraintAnimV15),
						];

						this.ModelCompoundAnimationDataV15 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV23 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV15 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV23),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV15),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV23),
						];

			},

			// => Version: 14, ReferencedFunction: 0x10679E0
			14:function(){
						this.ModelVisTrackDataV22 =[
				'boneToken', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV14 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV14 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV14),
						];

						this.ModelCloudAnimV14 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV14),
						];

						this.ModelMatConstAnimV14 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV14 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV14),
						];

						this.ModelAnimPropertyDataV14 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV14 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelAnimationDataV22 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV22),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV14),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV14),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV14),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV14),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV14),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV14),
						];

						this.ModelCompoundAnimationDataV14 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV22 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV14 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV22),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV14),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV22),
						];

			},

			// => Version: 13
			13:function(){
						this.ModelVisTrackDataV21 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV13 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV13 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV13),
						];

						this.ModelCloudAnimV13 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV13),
						];

						this.ModelMatConstAnimV13 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV13 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV13),
						];

						this.ModelAnimPropertyDataV13 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV13 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelAnimationDataV21 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV21),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV13),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV13),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV13),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV13),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV13),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV13),
						];

						this.ModelCompoundAnimationDataV13 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV21 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV13 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV21),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV13),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV21),
						];

			},

			// => Version: 12, ReferencedFunction: 0x1067930
			12:function(){
						this.ModelVisTrackDataV20 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV12 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV12 =[
				'uvAnimId' , 'uint32',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV12),
						];

						this.ModelCloudAnimV12 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV12),
						];

						this.ModelMatConstAnimV12 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV12 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV12),
						];

						this.ModelAnimPropertyDataV12 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelTokenMapAnimV12 =[
				'linkToken', Utils.getQWordReader(),
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelAnimationDataV20 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV20),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV12),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV12),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV12),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV12),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV12),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
				'tokenMapAnims', Utils.getArrayReader(this.ModelTokenMapAnimV12),
						];

						this.ModelCompoundAnimationDataV12 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV20 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV12 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV20),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV12),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV20),
						];

			},

			// => Version: 11
			11:function(){
						this.ModelVisTrackDataV19 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV11 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV11 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV11),
						];

						this.ModelCloudAnimV11 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV11),
						];

						this.ModelMatConstAnimV11 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV11 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV11),
						];

						this.ModelAnimPropertyDataV11 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelAnimationDataV19 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV19),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV11),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV11),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV11),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV11),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV11),
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ModelCompoundAnimationDataV11 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV19 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV11 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV19),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV11),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV19),
						];

			},

			// => Version: 10
			10:function(){
						this.ModelVisTrackDataV18 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV10 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV10 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV10),
						];

						this.ModelCloudAnimV10 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV10),
						];

						this.ModelMatConstAnimV10 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV10 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV10),
						];

						this.ModelAnimPropertyDataV10 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.ModelAnimationDataV18 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV18),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV10),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV10),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV10),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV10),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
				'properties', Utils.getArrayReader(this.ModelAnimPropertyDataV10),
						];

						this.ModelCompoundAnimationDataV10 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV18 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV10 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV18),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV10),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV18),
						];

			},

			// => Version: 9
			9:function(){
						this.ModelVisTrackDataV17 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV9 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelUVAnimationV9 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV9),
						];

						this.ModelCloudAnimV9 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV9),
						];

						this.ModelMatConstAnimV9 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
				'initialValue' , ['[]','float32',4],
						];

						this.ModelLightAnimationV9 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV9),
						];

						this.ModelAnimationDataV17 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV17),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV9),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV9),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV9),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV9),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
						];

						this.ModelCompoundAnimationDataV9 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV17 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV9 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV17),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV9),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV17),
						];

			},

			// => Version: 8
			8:function(){
						this.ModelVisTrackDataV16 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV8 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelUVAnimationV8 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV8),
						];

						this.ModelCloudAnimV8 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV8),
						];

						this.ModelMatConstAnimV8 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelLightAnimationV8 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV8),
						];

						this.ModelAnimationDataV16 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV16),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV8),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV8),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV8),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV8),
				'isAdditive' , 'uint32',
				'variantCount' , 'uint32',
				'variantIndices', ['[]', 'uint32', 3],
						];

						this.ModelCompoundAnimationDataV8 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV16 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV8 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV16),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV8),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV16),
						];

			},

			// => Version: 7
			7:function(){
						this.ModelVisTrackDataV15 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV7 =[
				'type' , 'uint8',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelUVAnimationV7 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV7),
						];

						this.ModelCloudAnimV7 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV7),
						];

						this.ModelMatConstAnimV7 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'trackGroupIndex' , 'uint32',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelLightAnimationV7 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV7),
						];

						this.ModelAnimationDataV15 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV15),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV7),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV7),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV7),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV7),
				'isAdditive' , 'uint32',
						];

						this.ModelCompoundAnimationDataV7 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV15 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV7 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV15),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV7),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV15),
						];

			},

			// => Version: 6
			6:function(){
						this.ModelVisTrackDataV14 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV6 =[
				'type' , 'uint8',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelUVAnimationV6 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV6),
						];

						this.ModelCloudAnimV6 =[
				'bone', Utils.getQWordReader(),
				'cloudTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV6),
						];

						this.ModelMatConstAnimV6 =[
				'matIndex' , 'uint32',
				'constToken' , 'uint32',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelLightAnimationV6 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV6),
						];

						this.ModelAnimationDataV14 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV14),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV6),
				'cloudAnim', Utils.getArrayReader(this.ModelCloudAnimV6),
				'matConstAnim', Utils.getArrayReader(this.ModelMatConstAnimV6),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV6),
				'isAdditive' , 'uint32',
						];

						this.ModelCompoundAnimationDataV6 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV14 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV6 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV14),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV6),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV14),
						];

			},

			// => Version: 5
			5:function(){
						this.ModelVisTrackDataV13 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV5 =[
				'type' , 'uint8',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelUVAnimationV5 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV5),
						];

						this.ModelLightAnimationV5 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV5),
						];

						this.ModelAnimationDataV13 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV13),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV5),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV5),
				'isAdditive' , 'uint32',
						];

						this.ModelCompoundAnimationDataV5 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV13 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV5 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV13),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV5),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV13),
						];

			},

			// => Version: 4
			4:function(){
						this.ModelVisTrackDataV12 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV4 =[
				'type' , 'uint8',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelUVAnimationV4 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV4),
						];

						this.ModelLightAnimationV4 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV4),
						];

						this.ModelAnimationDataV12 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV12),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV4),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV4),
				'isAdditive' , 'uint32',
						];

						this.ModelCompoundAnimationDataV4 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV12 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV4 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV12),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV4),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV12),
						];

			},

			// => Version: 3
			3:function(){
						this.ModelVisTrackDataV11 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelTrackTypeDataV3 =[
				'type' , 'uint8',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelUVAnimationV3 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelTrackTypeDataV3),
						];

						this.ModelLightAnimationV3 =[
				'bone', Utils.getQWordReader(),
				'lightTrackData', Utils.getArrayReader(this.ModelTrackTypeDataV3),
						];

						this.ModelAnimationDataV11 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV11),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV3),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'lightAnimData', Utils.getArrayReader(this.ModelLightAnimationV3),
						];

						this.ModelCompoundAnimationDataV3 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV11 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV3 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV11),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV3),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV11),
						];

			},

			// => Version: 2
			2:function(){
						this.ModelVisTrackDataV10 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelUVTransformV2 =[
				'type' , 'uint8',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelUVAnimationV2 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelUVTransformV2),
						];

						this.ModelAnimationDataV10 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV10),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV2),
				'morphTrackGroups', Utils.getArrayReader('uint16'),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelCompoundAnimationDataV2 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV10 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationBankV2 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV10),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV2),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV10),
						];

			},

			// => Version: 1
			1:function(){
						this.ModelVisTrackDataV9 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelUVTransformV1 =[
				'type' , 'uint8',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelUVAnimationV1 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelUVTransformV1),
						];

						this.ModelAnimationDataV9 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV9),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV1),
				'triggerTimes', Utils.getArrayReader('float32'),
				'triggerTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.ModelCompoundAnimationDataV1 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV9 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationV1 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV9),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV1),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV9),
						];

			},

			// => Version: 0
			0:function(){
						this.ModelVisTrackDataV8 =[
				'boneIndex' , 'uint32',
				'keys', Utils.getArrayReader('float32'),
						];

						this.ModelUVTransformV0 =[
				'type' , 'uint8',
				'vectorTrackIndex' , 'uint32',
						];

						this.ModelUVAnimationV0 =[
				'uvAnimId' , 'uint8',
				'uvTransformData', Utils.getArrayReader(this.ModelUVTransformV0),
						];

						this.ModelAnimationDataV8 =[
				'token', Utils.getQWordReader(),
				'data', Utils.getArrayReader('uint8'),
				'moveSpeed' , 'float32',
				'visTrackData', Utils.getArrayReader(this.ModelVisTrackDataV8),
				'uvAnimData', Utils.getArrayReader(this.ModelUVAnimationV0),
						];

						this.ModelCompoundAnimationDataV0 =[
				'token', Utils.getQWordReader(),
				'start', Utils.getQWordReader(),
				'loop', Utils.getQWordReader(),
				'end', Utils.getQWordReader(),
						];

						this.ModelAnimationImportDataV8 =[
				'filename' , Utils.getFileNameReader(),
				'sequenceTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileAnimationV0 =[
				'animations', Utils.getRefArrayReader(this.ModelAnimationDataV8),
				'compoundAnimations', Utils.getArrayReader(this.ModelCompoundAnimationDataV0),
				'fallbacks', Utils.getArrayReader(Utils.getQWordReader()),
				'imports', Utils.getArrayReader(this.ModelAnimationImportDataV8),
						];

			},
		}
	},

	///==================================================
	/// Chunk: COLL, versions: 5, strucTab: 0x15D03A8 
	///==================================================
	{
		name:'COLL',
		versions:{


			// => Version: 4
			4:function(){
						this.ModelCollisionKeyFrameV10 =[
				'time' , 'float32',
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',4],
						];

						this.ModelCollisionAnimatedObjectV10 =[
				'shapeIndices', Utils.getArrayReader('uint32'),
				'keyFrames', Utils.getArrayReader(this.ModelCollisionKeyFrameV10),
						];

						this.ModelCollisionAnimationV10 =[
				'animation', Utils.getQWordReader(),
				'objects', Utils.getArrayReader(this.ModelCollisionAnimatedObjectV10),
				'targetPoints', Utils.getArrayReader(['[]','float32',3]),
						];

						this.ModelCollisionMeshV10 =[
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
				'navSeedPoints', Utils.getArrayReader(['[]','float32',3]),
						];

						this.ModelCollisionBoxV10 =[
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV10 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionCapsuleV10 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV10 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileCollisionV10 =[
				'animations', Utils.getArrayReader(this.ModelCollisionAnimationV10),
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV10),
				'boxes', Utils.getArrayReader(this.ModelCollisionBoxV10),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV10),
				'capsules', Utils.getArrayReader(this.ModelCollisionCapsuleV10),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV10),
						];

			},

			// => Version: 3, ReferencedFunction: 0x1068760
			3:function(){
						this.ModelCollisionKeyFrameV9 =[
				'time' , 'float32',
				'position' , ['[]','float32',3],
				'orientation' , ['[]','float32',4],
						];

						this.ModelCollisionAnimatedObjectV9 =[
				'shapeIndices', Utils.getArrayReader('uint32'),
				'keyFrames', Utils.getArrayReader(this.ModelCollisionKeyFrameV9),
						];

						this.ModelCollisionAnimationV9 =[
				'animation', Utils.getQWordReader(),
				'objects', Utils.getArrayReader(this.ModelCollisionAnimatedObjectV9),
						];

						this.ModelCollisionMeshV9 =[
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionBoxV9 =[
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV9 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionCapsuleV9 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV9 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileCollisionV9 =[
				'animations', Utils.getArrayReader(this.ModelCollisionAnimationV9),
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV9),
				'boxes', Utils.getArrayReader(this.ModelCollisionBoxV9),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV9),
				'capsules', Utils.getArrayReader(this.ModelCollisionCapsuleV9),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV9),
						];

			},

			// => Version: 2
			2:function(){
						this.ModelCollisionMeshV8 =[
				'animationSequences', Utils.getArrayReader(Utils.getQWordReader()),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionCloudV8 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelCollisionCubeV8 =[
				'transform', ['[]', ['[]','float32',4], 3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV8 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionCapsuleV8 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV8 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileCollisionV8 =[
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV8),
				'clouds', Utils.getArrayReader(this.ModelCollisionCloudV8),
				'cubes', Utils.getArrayReader(this.ModelCollisionCubeV8),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV8),
				'capsules', Utils.getArrayReader(this.ModelCollisionCapsuleV8),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV8),
						];

			},

			// => Version: 1
			1:function(){
						this.ModelCollisionMeshV1 =[
				'animationSequences', Utils.getArrayReader(Utils.getQWordReader()),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionCloudV1 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelCollisionCubeV1 =[
				'transform', ['[]', ['[]','float32',4], 3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV1 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV1 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileCollisionV1 =[
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV1),
				'clouds', Utils.getArrayReader(this.ModelCollisionCloudV1),
				'cubes', Utils.getArrayReader(this.ModelCollisionCubeV1),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV1),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV1),
						];

			},

			// => Version: 0
			0:function(){
						this.ModelCollisionMeshV0 =[
				'animationSequence', Utils.getQWordReader(),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'indices', Utils.getArrayReader('uint16'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.ModelCollisionCloudV0 =[
				'animationSequence', Utils.getQWordReader(),
				'points', Utils.getArrayReader(['[]','float32',3]),
				'surface' , 'uint8',
						];

						this.ModelCollisionCubeV0 =[
				'transform', ['[]', ['[]','float32',4], 3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSphereV0 =[
				'radius' , 'float32',
				'position' , ['[]','float32',3],
				'surface' , 'uint8',
						];

						this.ModelCollisionSurfaceV0 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.ModelFileCollisionV0 =[
				'meshes', Utils.getArrayReader(this.ModelCollisionMeshV0),
				'clouds', Utils.getArrayReader(this.ModelCollisionCloudV0),
				'cubes', Utils.getArrayReader(this.ModelCollisionCubeV0),
				'spheres', Utils.getArrayReader(this.ModelCollisionSphereV0),
				'surfaces', Utils.getArrayReader(this.ModelCollisionSurfaceV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: GR2S, versions: 5, strucTab: 0x15D03E4 
	///==================================================
	{
		name:'GR2S',
		versions:{


			// => Version: 4, ReferencedFunction: 0x1069BD0
			4:function(){
						this.ModelGr2DataV4 =[
				'filename', Utils.getString16Reader(),
				'flags' , 'uint32',
				'data', Utils.getArrayReader('uint8'),
						];

						this.__root=this.ModelFileGr2sV4 =[
				'gr2Data', Utils.getArrayReader(this.ModelGr2DataV4),
						];

			},

			// => Version: 3, ReferencedFunction: 0x1069840
			3:function(){
						this.ModelGr2DataV3 =[
				'filename', Utils.getString16Reader(),
				'flags' , 'uint32',
				'data', Utils.getArrayReader('uint8'),
						];

						this.__root=this.ModelFileGr2sV3 =[
				'gr2Data', Utils.getArrayReader(this.ModelGr2DataV3),
						];

			},

			// => Version: 2, ReferencedFunction: 0x10692C0
			2:function(){
						this.ModelGr2DataV2 =[
				'filename', Utils.getString16Reader(),
				'flags' , 'uint32',
				'data', Utils.getArrayReader('uint8'),
						];

						this.__root=this.ModelFileGr2sV2 =[
				'gr2Data', Utils.getArrayReader(this.ModelGr2DataV2),
						];

			},

			// => Version: 1
			1:function(){
						this.ModelGr2DataV1 =[
				'filename', Utils.getString16Reader(),
				'flags' , 'uint32',
				'data', Utils.getArrayReader('uint8'),
						];

						this.__root=this.ModelFileGr2sV1 =[
				'gr2Data', Utils.getArrayReader(this.ModelGr2DataV1),
						];

			},

			// => Version: 0
			0:function(){
						this.ModelGr2DataV0 =[
				'data', Utils.getArrayReader('uint8'),
						];

						this.__root=this.ModelFileGr2sV0 =[
				'gr2Data', Utils.getArrayReader(this.ModelGr2DataV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: TOOL, versions: 17, strucTab: 0x15D0520 
	///==================================================
	{
		name:'TOOL',
		versions:{


			// => Version: 16, ReferencedFunction: 0x106A400
			16:function(){
						this.ModelToolCloudV16 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV16 =[
				'blitId', Utils.getQWordReader(),
				'filename', Utils.getFileNameReader(),
						];

						this.ModelToolStreakV16 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV16 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.PackGrannyAnimationTypeV1 =[
				'animation', Utils.getArrayReader('uint8'),
				'pointers', Utils.getArrayReader('uint32'),
						];

						this.ModelToolAnimationV16 =[
				'name', Utils.getQWordReader(),
				'filename', Utils.getString16Reader(),
				'data', this.PackGrannyAnimationTypeV1,
						];

						this.ModelSequenceCompressionInfoV16 =[
				'animToken', Utils.getQWordReader(),
				'cmpGroup', Utils.getString16Reader(),
				'cmpType', Utils.getString16Reader(),
						];

						this.__root=this.ModelFileToolV16 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV16),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV16),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV16),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV16),
				'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV16),
				'compressionInfos', Utils.getArrayReader(this.ModelSequenceCompressionInfoV16),
				'region', Utils.getStringReader(),
						];

			},

			// => Version: 15
			15:function(){
						this.ModelToolCloudV15 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV15 =[
				'blitId', Utils.getQWordReader(),
				'filename', Utils.getFileNameReader(),
						];

						this.ModelToolStreakV15 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV15 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelToolAnimationV15 =[
				'name', Utils.getQWordReader(),
				'filename', Utils.getString16Reader(),
				'data', this.PackGrannyAnimationTypeV0,
						];

						this.ModelSequenceCompressionInfoV15 =[
				'animToken', Utils.getQWordReader(),
				'cmpGroup', Utils.getString16Reader(),
				'cmpType', Utils.getString16Reader(),
						];

						this.__root=this.ModelFileToolV15 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV15),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV15),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV15),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV15),
				'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV15),
				'compressionInfos', Utils.getArrayReader(this.ModelSequenceCompressionInfoV15),
				'region', Utils.getStringReader(),
						];

			},

			// => Version: 14
			14:function(){
						this.ModelToolCloudV14 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV14 =[
				'blitId', Utils.getQWordReader(),
				'filename', Utils.getFileNameReader(),
						];

						this.ModelToolStreakV14 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV14 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelToolAnimationV14 =[
				'name', Utils.getQWordReader(),
				'filename', Utils.getString16Reader(),
				'data', this.PackGrannyAnimationTypeV0,
						];

						this.ModelSequenceCompressionInfoV14 =[
				'animToken', Utils.getQWordReader(),
				'cmpGroup', Utils.getString16Reader(),
				'cmpType', Utils.getString16Reader(),
						];

						this.__root=this.ModelFileToolV14 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV14),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV14),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV14),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV14),
				'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV14),
				'compressionInfos', Utils.getArrayReader(this.ModelSequenceCompressionInfoV14),
						];

			},

			// => Version: 13
			13:function(){
						this.ModelToolCloudV13 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV13 =[
				'blitId', Utils.getQWordReader(),
				'filename', Utils.getFileNameReader(),
						];

						this.ModelToolStreakV13 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV13 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelToolAnimationV13 =[
				'name', Utils.getQWordReader(),
				'filename', Utils.getString16Reader(),
				'data', this.PackGrannyAnimationTypeV0,
						];

						this.__root=this.ModelFileToolV13 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV13),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV13),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV13),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV13),
				'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV13),
						];

			},

			// => Version: 12
			12:function(){
						this.ModelToolCloudV12 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV12 =[
				'blitId', Utils.getQWordReader(),
				'filename', Utils.getFileNameReader(),
						];

						this.ModelToolStreakV12 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV12 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.PackGrannyAnimationTypeV0 =[
				'animation', Utils.getArrayReader('uint8'),
						];

						this.ModelToolAnimationV12 =[
				'name', Utils.getQWordReader(),
				'filename', Utils.getString16Reader(),
				'data', this.PackGrannyAnimationTypeV0,
						];

						this.__root=this.ModelFileToolV12 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV12),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV12),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV12),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV12),
				'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'highLodAnimations', Utils.getArrayReader(this.ModelToolAnimationV12),
						];

			},

			// => Version: 11, ReferencedFunction: 0x106A3E0
			11:function(){
						this.ModelToolCloudV11 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV11 =[
				'blitId', Utils.getQWordReader(),
				'filename', Utils.getFileNameReader(),
						];

						this.ModelToolStreakV11 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV11 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.__root=this.ModelFileToolV11 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV11),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV11),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV11),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV11),
				'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},

			// => Version: 10, ReferencedFunction: 0x106A5A0
			10:function(){
						this.ModelToolCloudV10 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV10 =[
				'blitId', Utils.getQWordReader(),
				'filename' , Utils.getFileNameReader(),
						];

						this.ModelToolStreakV10 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV10 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.__root=this.ModelFileToolV10 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV10),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV10),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV10),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV10),
				'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},

			// => Version: 9
			9:function(){
						this.ModelToolCloudV9 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV9 =[
				'blitId', Utils.getQWordReader(),
				'filename' , Utils.getFileNameReader(),
						];

						this.ModelToolStreakV9 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV9 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolPropertyDataV9 =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.__root=this.ModelFileToolV9 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV9),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV9),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV9),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV9),
				'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),
				'properties', Utils.getArrayReader(this.ModelToolPropertyDataV9),
						];

			},

			// => Version: 8
			8:function(){
						this.ModelToolCloudV8 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV8 =[
				'blitId', Utils.getQWordReader(),
				'filename' , Utils.getFileNameReader(),
						];

						this.ModelToolStreakV8 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV8 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.__root=this.ModelFileToolV8 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV8),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV8),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV8),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV8),
				'permutationTokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

			},

			// => Version: 7
			7:function(){
						this.ModelToolCloudV7 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV7 =[
				'blitId', Utils.getQWordReader(),
				'filename' , Utils.getFileNameReader(),
						];

						this.ModelToolStreakV7 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolLightningV7 =[
				'systemNames', Utils.getArrayReader(Utils.getStringReader()),
				'boltNames', Utils.getArrayReader(Utils.getStringReader()),
				'nodeNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.__root=this.ModelFileToolV7 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV7),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV7),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV7),
				'lightningData', Utils.getPointerReader(this.ModelToolLightningV7),
						];

			},

			// => Version: 6, ReferencedFunction: 0x106A560
			6:function(){
						this.ModelToolCloudV6 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolBlitTextureV6 =[
				'blitId', Utils.getQWordReader(),
				'filename' , Utils.getFileNameReader(),
						];

						this.ModelToolStreakV6 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.__root=this.ModelFileToolV6 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV6),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV6),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV6),
						];

			},

			// => Version: 5, ReferencedFunction: 0x106A530
			5:function(){
						this.ModelToolCloudV5 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolMotionV5 =[
				'sequence', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
				'values', Utils.getArrayReader(['[]','float32',3]),
						];

						this.ModelToolBlitTextureV5 =[
				'blitId', Utils.getQWordReader(),
				'filename' , Utils.getFileNameReader(),
						];

						this.ModelToolStreakV5 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.__root=this.ModelFileToolV5 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV5),
				'motions', Utils.getArrayReader(this.ModelToolMotionV5),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV5),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV5),
						];

			},

			// => Version: 4
			4:function(){
						this.ModelToolCloudV4 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolMotionV4 =[
				'sequence', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
				'values', Utils.getArrayReader(['[]','float32',3]),
						];

						this.ModelToolBlitTextureV4 =[
				'blitId', Utils.getQWordReader(),
				'filename' , Utils.getFileNameReader(),
						];

						this.ModelToolStreakV4 =[
				'streakNames', Utils.getArrayReader(Utils.getStringReader()),
				'anchorNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.__root=this.ModelFileToolV4 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV4),
				'motions', Utils.getArrayReader(this.ModelToolMotionV4),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV4),
				'streakData', Utils.getPointerReader(this.ModelToolStreakV4),
						];

			},

			// => Version: 3
			3:function(){
						this.ModelToolCloudV3 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolMotionV3 =[
				'sequence', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
				'values', Utils.getArrayReader(['[]','float32',3]),
						];

						this.ModelToolBlitTextureV3 =[
				'blitId', Utils.getQWordReader(),
				'filename' , Utils.getFileNameReader(),
						];

						this.__root=this.ModelFileToolV3 =[
				'modelType', Utils.getQWordReader(),
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV3),
				'motions', Utils.getArrayReader(this.ModelToolMotionV3),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV3),
						];

			},

			// => Version: 2
			2:function(){
						this.ModelToolCloudV2 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolMotionV2 =[
				'sequence', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
				'values', Utils.getArrayReader(['[]','float32',3]),
						];

						this.ModelToolBlitTextureV2 =[
				'blitId', Utils.getQWordReader(),
				'filename' , Utils.getFileNameReader(),
						];

						this.__root=this.ModelFileToolV2 =[
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV2),
				'motions', Utils.getArrayReader(this.ModelToolMotionV2),
				'blitTextures', Utils.getArrayReader(this.ModelToolBlitTextureV2),
						];

			},

			// => Version: 1
			1:function(){
						this.ModelToolCloudV1 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.ModelToolMotionV1 =[
				'sequence', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
				'values', Utils.getArrayReader(['[]','float32',3]),
						];

						this.__root=this.ModelFileToolV1 =[
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV1),
				'motions', Utils.getArrayReader(this.ModelToolMotionV1),
						];

			},

			// => Version: 0
			0:function(){
						this.ModelToolCloudV0 =[
				'cloudNames', Utils.getArrayReader(Utils.getStringReader()),
				'emitterNames', Utils.getArrayReader(Utils.getStringReader()),
				'obstacleNames', Utils.getArrayReader(Utils.getStringReader()),
						];

						this.__root=this.ModelFileToolV0 =[
				'materialNames', Utils.getArrayReader(Utils.getStringReader()),
				'cloudData', Utils.getPointerReader(this.ModelToolCloudV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: ROOT, versions: 2, strucTab: 0x15D0638 
	///==================================================
	{
		name:'ROOT',
		versions:{


			// => Version: 1, ReferencedFunction: 0x106A040
			1:function(){
						this.ModelRootMotionV1 =[
				'sequence', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
				'posValues', Utils.getArrayReader(['[]','float32',3]),
				'quatValues', Utils.getArrayReader(['[]','float32',4]),
						];

						this.__root=this.ModelFileRootMotionV1 =[
				'rootMotions', Utils.getArrayReader(this.ModelRootMotionV1),
						];

			},

			// => Version: 0
			0:function(){
						this.ModelRootMotionV0 =[
				'sequence', Utils.getQWordReader(),
				'keys', Utils.getArrayReader('float32'),
				'values', Utils.getArrayReader(['[]','float32',3]),
						];

						this.__root=this.ModelFileRootMotionV0 =[
				'rootMotions', Utils.getArrayReader(this.ModelRootMotionV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: GAME, versions: 1, strucTab: 0x15D05EC 
	///==================================================
	{
		name:'GAME',
		versions:{


			// => Version: 0
			0:function(){
						this.__root=this.ModelFileGame =[
				'gameData', Utils.getArrayReader('uint8'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: ICON, versions: 1, strucTab: 0x15D06A0 
	///==================================================
	{
		name:'ICON',
		versions:{


			// => Version: 0
			0:function(){
						this.__root=this.ModelFileIcon =[
				'jpgData', Utils.getArrayReader('uint8'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: SKEL, versions: 2, strucTab: 0x15D06AC 
	///==================================================
	{
		name:'SKEL',
		versions:{


			// => Version: 1, ReferencedFunction: 0x106A090
			1:function(){
						this.ModelTransformData =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneData =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformData,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelGrannySkeletonV1 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneData),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingData =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelGrannyModelV1 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelGrannySkeletonV1),
				'InitialPlacement', this.ModelTransformData,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingData),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneConstraintLinkV63 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV63 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV63),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.PackGrannyMirrorSpecType =[
				'mirrorSpec', Utils.getArrayReader('uint8'),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV63 =[
				'data', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV63 =[
				'grannyModel', Utils.getPointerReader(this.ModelGrannyModelV1),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV63),
				'boneFlags', Utils.getArrayReader('uint32'),
				'mirrorSpec', this.PackGrannyMirrorSpecType,
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV63),
						];

						this.ModelSkeletonOverridesV1 =[
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV63),
						];

						this.__root=this.ModelFileSkeletonV1 =[
				'skeletonData', Utils.getPointerReader(this.ModelSkeletonDataV63),
				'fileReference' , Utils.getFileNameReader(),
				'overrides', Utils.getPointerReader(this.ModelSkeletonOverridesV1),
						];

			},

			// => Version: 0
			0:function(){
						this.ModelTransformData =[
				'Flags' , 'uint32',
				'Position' , ['[]','float32',3],
				'Orientation' , ['[]','float32',4],
				'ScaleShear', ['[]', ['[]','float32',3], 3],
						];

						this.ModelBoneData =[
				'Name', Utils.getStringReader(),
				'ParentIndex' , 'uint32',
				'LocalTransform', this.ModelTransformData,
				'InverseWorld4x4', ['[]', ['[]','float32',4], 4],
				'LODError' , 'float32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelGrannySkeletonV0 =[
				'Name', Utils.getStringReader(),
				'Bones', Utils.getArrayReader(this.ModelBoneData),
				'LODType' , 'uint32',
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelMeshBindingData =[
				'Mesh', Utils.getPointerReader('uint8'),
						];

						this.ModelGrannyModelV0 =[
				'Name', Utils.getStringReader(),
				'Skeleton', Utils.getPointerReader(this.ModelGrannySkeletonV0),
				'InitialPlacement', this.ModelTransformData,
				'MeshBindings', Utils.getArrayReader(this.ModelMeshBindingData),
				'ExtendedData.Type', Utils.getPointerReader('uint8'),
				'ExtendedData.Object', Utils.getPointerReader('uint8'),
						];

						this.ModelBoneConstraintLinkV62 =[
				'angle' , 'float32',
				'azimuth' , 'float32',
				'distance' , ['[]','float32',2],
				'token', Utils.getQWordReader(),
						];

						this.ModelBoneConstraintV62 =[
				'token', Utils.getQWordReader(),
				'flags', 'uint16',
				'twistOffset' , 'float32',
				'animBlend' , 'float32',
				'drag' , 'float32',
				'ellipseRatio' , 'float32',
				'gravity' , 'float32',
				'collisionRadius' , 'float32',
				'wind' , 'float32',
				'angle' , ['[]','float32',2],
				'angleStrength' , 'float32',
				'angleType' , 'uint8',
				'distanceInner' , ['[]','float32',2],
				'distanceInnerStrength' , 'float32',
				'distanceInnerType' , 'uint8',
				'links', Utils.getArrayReader(this.ModelBoneConstraintLinkV62),
				'distanceOuter' , ['[]','float32',2],
				'distanceOuterStrength' , 'float32',
				'distanceOuterType' , 'uint8',
				'twist' , ['[]','float32',2],
				'twistStrength' , 'float32',
				'twistType' , 'uint8',
						];

						this.ModelBoneSymmetryV62 =[
				'boneLeft', Utils.getQWordReader(),
				'boneRight', Utils.getQWordReader(),
						];

						this.PackGrannyTrackMaskType =[
				'trackMask', Utils.getArrayReader('uint8'),
						];

						this.ModelTrackMaskV62 =[
				'data', this.PackGrannyTrackMaskType,
				'token', Utils.getQWordReader(),
						];

						this.ModelSkeletonDataV62 =[
				'grannyModel', Utils.getPointerReader(this.ModelGrannyModelV0),
				'boneConstraints', Utils.getArrayReader(this.ModelBoneConstraintV62),
				'boneFlags', Utils.getArrayReader('uint32'),
				'boneSymmetries', Utils.getArrayReader(this.ModelBoneSymmetryV62),
				'emitterBones', Utils.getArrayReader('uint32'),
				'trackMasks', Utils.getArrayReader(this.ModelTrackMaskV62),
						];

						this.__root=this.ModelFileSkeletonV0 =[
				'skeletonData', Utils.getPointerReader(this.ModelSkeletonDataV62),
				'fileReference' , Utils.getFileNameReader(),
						];

			},
		}
	},

	///==================================================
	/// Chunk: PRPS, versions: 1, strucTab: 0x15D06C4 
	///==================================================
	{
		name:'PRPS',
		versions:{


			// => Version: 0
			0:function(){
						this.ModelFixedOffsetData =[
				'name', Utils.getQWordReader(),
				'parentBone', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
						];

						this.ModelPropertyData =[
				'id', Utils.getQWordReader(),
				'type' , 'uint32',
				'mergeIndex' , 'uint32',
				'time' , 'float32',
				'val', Utils.getQWordReader(),
				'strVal' , Utils.getFileNameReader(),
						];

						this.__root=this.ModelFileProperties =[
				'fixedOffsetData', Utils.getArrayReader(this.ModelFixedOffsetData),
				'properties', Utils.getArrayReader(this.ModelPropertyData),
						];

			},
		}
	},

	///==================================================
	/// Chunk: GEOM, versions: 2, strucTab: 0x15D06D0 
	///==================================================
	{
		name:'GEOM',
		versions:{


			// => Version: 1, ReferencedFunction: 0x1069000
			1:function(){
						this.ModelMeshMorphVertV66 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV66 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV66),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV66),
				'mesh', Utils.getQWordReader(),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshVertexDataV1 =[
				'vertexCount' , 'uint32',
				'mesh', this.PackVertexType,
						];

						this.ModelMeshIndexDataV1 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshGeometryV1 =[
				'verts', this.ModelMeshVertexDataV1,
				'indices', this.ModelMeshIndexDataV1,
				'lods', Utils.getArrayReader(this.ModelMeshIndexDataV1),
				'transforms', Utils.getArrayReader('uint32'),
						];

						this.ModelMeshDataV66 =[
				'visBone', Utils.getQWordReader(),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV66),
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
				'boneBindings', Utils.getArrayReader(Utils.getQWordReader()),
				'geometry', Utils.getPointerReader(this.ModelMeshGeometryV1),
						];

						this.__root=this.ModelFileGeometryV1 =[
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV66),
						];

			},

			// => Version: 0
			0:function(){
						this.ModelMeshMorphVertV65 =[
				'index', 'uint16',
				'vector' , ['[]','float32',3],
						];

						this.ModelMeshMorphTargetV65 =[
				'positions', Utils.getArrayReader(this.ModelMeshMorphVertV65),
				'normals', Utils.getArrayReader(this.ModelMeshMorphVertV65),
				'mesh', Utils.getQWordReader(),
						];

						this.GrBoundData =[
				'center' , ['[]','float32',3],
				'boxExtent' , ['[]','float32',3],
				'sphereRadius' , 'float32',
						];

						this.PackVertexType =[
				'fvf' , 'uint32',
				'vertices', Utils.getArrayReader('uint8'),
						];

						this.ModelMeshVertexDataV0 =[
				'vertexCount' , 'uint32',
				'mesh', this.PackVertexType,
						];

						this.ModelMeshIndexDataV0 =[
				'indices', Utils.getArrayReader('uint16'),
						];

						this.ModelMeshGeometryV0 =[
				'verts', this.ModelMeshVertexDataV0,
				'indices', this.ModelMeshIndexDataV0,
				'lods', Utils.getArrayReader(this.ModelMeshIndexDataV0),
						];

						this.ModelMeshDataV65 =[
				'visBone', Utils.getQWordReader(),
				'morphTargets', Utils.getArrayReader(this.ModelMeshMorphTargetV65),
				'flags' , 'uint32',
				'seamVertIndices', Utils.getArrayReader('uint32'),
				'meshName', Utils.getQWordReader(),
				'minBound' , ['[]','float32',3],
				'maxBound' , ['[]','float32',3],
				'bounds', Utils.getArrayReader(this.GrBoundData),
				'materialIndex' , 'uint32',
				'materialName', Utils.getStringReader(),
				'boneNames', Utils.getArrayReader(Utils.getStringReader()),
				'geometry', Utils.getPointerReader(this.ModelMeshGeometryV0),
						];

						this.__root=this.ModelFileGeometryV0 =[
				'meshes', Utils.getRefArrayReader(this.ModelMeshDataV65),
						];

			},
		}
	},

	///==================================================
	/// Chunk: EXPA, versions: 4, strucTab: 0x15D06E8 
	///==================================================
	{
		name:'EXPA',
		versions:{


			// => Version: 3
			3:function(){
						this.ModelFileSnapPointV3 =[
				'bone', Utils.getQWordReader(),
				'shape', Utils.getQWordReader(),
				'flags' , 'uint32',
						];

						this.ModelExpansionEmitterV3 =[
				'curl' , 'float32',
				'vortexSize' , 'float32',
				'curlQuality' , 'uint32',
				'curlFlags' , 'uint32',
				'fieldScale' , 'float32',
						];

						this.__root=this.ModelFileExpansionV3 =[
				'snapPoints', Utils.getArrayReader(this.ModelFileSnapPointV3),
				'snapPointPriority' , 'float32',
				'emitters', Utils.getArrayReader(this.ModelExpansionEmitterV3),
						];

			},

			// => Version: 2
			2:function(){
						this.ModelFileSnapPointV2 =[
				'bone', Utils.getQWordReader(),
				'shape', Utils.getQWordReader(),
						];

						this.ModelExpansionEmitterV2 =[
				'curl' , 'float32',
				'vortexSize' , 'float32',
				'curlQuality' , 'uint32',
				'curlFlags' , 'uint32',
				'fieldScale' , 'float32',
						];

						this.__root=this.ModelFileExpansionV2 =[
				'snapPoints', Utils.getArrayReader(this.ModelFileSnapPointV2),
				'snapPointPriority' , 'float32',
				'emitters', Utils.getArrayReader(this.ModelExpansionEmitterV2),
						];

			},

			// => Version: 1
			1:function(){
						this.ModelFileSnapPointV1 =[
				'bone', Utils.getQWordReader(),
						];

						this.ModelExpansionEmitterV1 =[
				'curl' , 'float32',
				'vortexSize' , 'float32',
				'curlQuality' , 'uint32',
				'curlFlags' , 'uint32',
				'fieldScale' , 'float32',
						];

						this.__root=this.ModelFileExpansionV1 =[
				'snapPoints', Utils.getArrayReader(this.ModelFileSnapPointV1),
				'snapPointPriority' , 'float32',
				'emitters', Utils.getArrayReader(this.ModelExpansionEmitterV1),
						];

			},

			// => Version: 0
			0:function(){
						this.ModelFileSnapPointV0 =[
				'bone', Utils.getQWordReader(),
						];

						this.ModelExpansionEmitterV0 =[
				'curl' , 'float32',
				'vortexSize' , 'float32',
						];

						this.__root=this.ModelFileExpansionV0 =[
				'snapPoints', Utils.getArrayReader(this.ModelFileSnapPointV0),
				'snapPointPriority' , 'float32',
				'emitters', Utils.getArrayReader(this.ModelExpansionEmitterV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: PHYS, versions: 9, strucTab: 0x168D668 
	///==================================================
	{
		name:'PHYS',
		versions:{


			// => Version: 8
			8:function(){
						this.SceneBoxShapeV8 =[
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneSphereShapeV8 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneCapsuleShapeV8 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneMeshShapeV8 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.SceneSurfaceV8 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.SceneFilePhysicsV8 =[
				'boxes', Utils.getArrayReader(this.SceneBoxShapeV8),
				'spheres', Utils.getArrayReader(this.SceneSphereShapeV8),
				'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV8),
				'meshes', Utils.getArrayReader(this.SceneMeshShapeV8),
				'surfaces', Utils.getArrayReader(this.SceneSurfaceV8),
						];

			},

			// => Version: 7
			7:function(){
						this.SceneBoxShapeV7 =[
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneSphereShapeV7 =[
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneCapsuleShapeV7 =[
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneMeshShapeV7 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.__root=this.SceneFilePhysicsV7 =[
				'boxes', Utils.getArrayReader(this.SceneBoxShapeV7),
				'spheres', Utils.getArrayReader(this.SceneSphereShapeV7),
				'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV7),
				'meshes', Utils.getArrayReader(this.SceneMeshShapeV7),
						];

			},

			// => Version: 6
			6:function(){
						this.SceneShapeSurfaceV6 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.SceneBoxShapeV6 =[
				'surface' , 'uint8',
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneSphereShapeV6 =[
				'surface' , 'uint8',
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneCapsuleShapeV6 =[
				'surface' , 'uint8',
				'p0' , ['[]','float32',3],
				'p1' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneMeshShapeV6 =[
				'surfaces', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.SceneCollisionShapeV6 =[
				'shapeIndex' , 'uint32',
						];

						this.SceneTriggerShapeV6 =[
				'shapeIndex' , 'uint32',
				'flags' , 'uint32',
						];

						this.SceneNamedShapeV6 =[
				'shapeIndex' , 'uint32',
						];

						this.__root=this.SceneFilePhysicsV6 =[
				'surfaces', Utils.getArrayReader(this.SceneShapeSurfaceV6),
				'boxes', Utils.getArrayReader(this.SceneBoxShapeV6),
				'spheres', Utils.getArrayReader(this.SceneSphereShapeV6),
				'capsules', Utils.getArrayReader(this.SceneCapsuleShapeV6),
				'meshes', Utils.getArrayReader(this.SceneMeshShapeV6),
				'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV6),
				'triggerShapes', Utils.getArrayReader(this.SceneTriggerShapeV6),
				'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV6),
						];

			},

			// => Version: 5
			5:function(){
						this.SceneShapeSurfaceV5 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.SceneBoxShapeV5 =[
				'surface' , 'uint8',
				'dimensions' , ['[]','float32',3],
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneSphereShapeV5 =[
				'surface' , 'uint8',
				'center' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.SceneMeshShapeV5 =[
				'surfaces', Utils.getArrayReader('uint8'),
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.SceneCollisionShapeV5 =[
				'shapeIndex' , 'uint32',
						];

						this.SceneTriggerShapeV5 =[
				'shapeIndex' , 'uint32',
				'flags' , 'uint32',
						];

						this.SceneNamedShapeV5 =[
				'shapeIndex' , 'uint32',
						];

						this.__root=this.SceneFilePhysicsV5 =[
				'surfaces', Utils.getArrayReader(this.SceneShapeSurfaceV5),
				'boxes', Utils.getArrayReader(this.SceneBoxShapeV5),
				'spheres', Utils.getArrayReader(this.SceneSphereShapeV5),
				'meshes', Utils.getArrayReader(this.SceneMeshShapeV5),
				'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV5),
				'triggerShapes', Utils.getArrayReader(this.SceneTriggerShapeV5),
				'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV5),
						];

			},

			// => Version: 4
			4:function(){
						this.SceneShapeV4 =[
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.SceneShapeSurfaceV4 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.SceneCollisionShapeV4 =[
				'shapeIndex' , 'uint32',
						];

						this.SceneTriggerShapeV4 =[
				'shapeIndex' , 'uint32',
				'flags' , 'uint32',
						];

						this.SceneNamedShapeV4 =[
				'shapeIndex' , 'uint32',
						];

						this.__root=this.SceneFilePhysicsV4 =[
				'shapeData', Utils.getArrayReader('uint8'),
				'shapes', Utils.getArrayReader(this.SceneShapeV4),
				'surfaces', Utils.getArrayReader(this.SceneShapeSurfaceV4),
				'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV4),
				'triggerShapes', Utils.getArrayReader(this.SceneTriggerShapeV4),
				'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV4),
						];

			},

			// => Version: 3
			3:function(){
						this.SceneShapeV3 =[
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.SceneShapeSurfaceV3 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.SceneCollisionShapeV3 =[
				'shapeIndex' , 'uint32',
						];

						this.SceneTriggerShapeV3 =[
				'shapeIndex' , 'uint32',
				'flags' , 'uint32',
						];

						this.SceneNamedShapeV3 =[
				'shapeIndex' , 'uint32',
						];

						this.ScenePathPhysicsV3 =[
				'pathData', Utils.getArrayReader(['[]','float32',4]),
						];

						this.__root=this.SceneFilePhysicsV3 =[
				'shapeData', Utils.getArrayReader('uint8'),
				'shapes', Utils.getArrayReader(this.SceneShapeV3),
				'surfaces', Utils.getArrayReader(this.SceneShapeSurfaceV3),
				'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV3),
				'triggerShapes', Utils.getArrayReader(this.SceneTriggerShapeV3),
				'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV3),
				'paths', Utils.getArrayReader(this.ScenePathPhysicsV3),
						];

			},

			// => Version: 2
			2:function(){
						this.SceneShapeV2 =[
				'shapeOffset' , 'uint32',
						];

						this.SceneCollisionShapeV2 =[
				'shapeIndex' , 'uint32',
						];

						this.SceneQueryShapeV2 =[
				'shapeIndex' , 'uint32',
						];

						this.SceneNamedShapeV2 =[
				'shapeIndex' , 'uint32',
						];

						this.ScenePathPhysicsV2 =[
				'pathData', Utils.getArrayReader(['[]','float32',4]),
						];

						this.__root=this.SceneFilePhysicsV2 =[
				'shapeData', Utils.getArrayReader('uint8'),
				'shapes', Utils.getArrayReader(this.SceneShapeV2),
				'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV2),
				'queryShapes', Utils.getArrayReader(this.SceneQueryShapeV2),
				'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV2),
				'paths', Utils.getArrayReader(this.ScenePathPhysicsV2),
						];

			},

			// => Version: 1
			1:function(){
						this.SceneShapeV1 =[
				'shapeOffset' , 'uint32',
						];

						this.SceneCollisionShapeV1 =[
				'shapeIndex' , 'uint32',
						];

						this.SceneNamedShapeV1 =[
				'shapeIndex' , 'uint32',
						];

						this.ScenePathPhysicsV1 =[
				'pathData', Utils.getArrayReader(['[]','float32',4]),
						];

						this.__root=this.SceneFilePhysicsV1 =[
				'shapeData', Utils.getArrayReader('uint8'),
				'shapes', Utils.getArrayReader(this.SceneShapeV1),
				'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV1),
				'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV1),
				'paths', Utils.getArrayReader(this.ScenePathPhysicsV1),
						];

			},

			// => Version: 0
			0:function(){
						this.SceneShapeV0 =[
				'shapeOffset' , 'uint32',
						];

						this.SceneCollisionShapeV0 =[
				'shapeIndex' , 'uint32',
						];

						this.SceneNamedShapeV0 =[
				'shapeIndex' , 'uint32',
						];

						this.__root=this.SceneFilePhysicsV0 =[
				'shapeData', Utils.getArrayReader('uint8'),
				'shapes', Utils.getArrayReader(this.SceneShapeV0),
				'collisionShapes', Utils.getArrayReader(this.SceneCollisionShapeV0),
				'namedShapes', Utils.getArrayReader(this.SceneNamedShapeV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: ANIM, versions: 3, strucTab: 0x168D6D4 
	///==================================================
	{
		name:'ANIM',
		versions:{


			// => Version: 2
			2:function(){
						this.SceneKeyframeV2 =[
				'time' , 'float32',
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneMotionV2 =[
				'keys', Utils.getArrayReader(this.SceneKeyframeV2),
						];

						this.SceneActionPointV2 =[
				'name', Utils.getQWordReader(),
				'motion', this.SceneMotionV2,
						];

						this.SceneAnimationEventV2 =[
				'name', Utils.getQWordReader(),
				'time' , 'float32',
						];

						this.SceneAnimationV2 =[
				'name', Utils.getQWordReader(),
				'motion', this.SceneMotionV2,
				'actionPoints', Utils.getArrayReader(this.SceneActionPointV2),
				'events', Utils.getArrayReader(this.SceneAnimationEventV2),
						];

						this.SceneTransformV2 =[
				'name', Utils.getQWordReader(),
				'translation' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.ScenePoseV2 =[
				'name', Utils.getQWordReader(),
				'transforms', Utils.getArrayReader(this.SceneTransformV2),
						];

						this.SceneImportSequenceV2 =[
				'name', Utils.getQWordReader(),
						];

						this.SceneAnimationImportV2 =[
				'filename' , Utils.getFileNameReader(),
				'animNames', Utils.getArrayReader(this.SceneImportSequenceV2),
				'flags' , 'uint32',
						];

						this.__root=this.SceneFileAnimationV2 =[
				'animations', Utils.getArrayReader(this.SceneAnimationV2),
				'poses', Utils.getArrayReader(this.ScenePoseV2),
				'imports', Utils.getArrayReader(this.SceneAnimationImportV2),
						];

			},

			// => Version: 1
			1:function(){
						this.SceneKeyframeV1 =[
				'time' , 'float32',
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneMotionV1 =[
				'keys', Utils.getArrayReader(this.SceneKeyframeV1),
						];

						this.SceneActionPointV1 =[
				'name', Utils.getQWordReader(),
				'motion', this.SceneMotionV1,
						];

						this.SceneAnimationEventV1 =[
				'name', Utils.getQWordReader(),
				'time' , 'float32',
						];

						this.SceneAnimationV1 =[
				'name', Utils.getQWordReader(),
				'motion', this.SceneMotionV1,
				'actionPoints', Utils.getArrayReader(this.SceneActionPointV1),
				'events', Utils.getArrayReader(this.SceneAnimationEventV1),
						];

						this.SceneAnimationImportV1 =[
				'filename' , Utils.getFileNameReader(),
				'animNames', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.SceneFileAnimationV1 =[
				'animations', Utils.getArrayReader(this.SceneAnimationV1),
				'imports', Utils.getArrayReader(this.SceneAnimationImportV1),
						];

			},

			// => Version: 0
			0:function(){
						this.SceneKeyframeV0 =[
				'time' , 'float32',
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
						];

						this.SceneMotionV0 =[
				'keys', Utils.getArrayReader(this.SceneKeyframeV0),
						];

						this.SceneActionPointV0 =[
				'name', Utils.getQWordReader(),
				'motion', this.SceneMotionV0,
						];

						this.SceneAnimationV0 =[
				'name', Utils.getQWordReader(),
				'motion', this.SceneMotionV0,
				'actionPoints', Utils.getArrayReader(this.SceneActionPointV0),
						];

						this.SceneAnimationImportV0 =[
				'filename' , Utils.getFileNameReader(),
				'animNames', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.SceneFileAnimationV0 =[
				'animations', Utils.getArrayReader(this.SceneAnimationV0),
				'imports', Utils.getArrayReader(this.SceneAnimationImportV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: GAME, versions: 7, strucTab: 0x168D6F8 
	///==================================================
	{
		name:'GAME',
		versions:{


			// => Version: 6
			6:function(){
						this.ScenePathNodeV6 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'flags' , 'uint32',
				'smoothing' , 'float32',
				'singlesided' , 'uint8',
						];

						this.ScenePathV6 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV6),
				'closed' , 'uint8',
						];

						this.SceneEdgeV6 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV6 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV6),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaces', Utils.getArrayReader('uint8'),
						];

						this.SceneGameSurfaceV6 =[
				'tokens', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.SceneFileGameV6 =[
				'paths', Utils.getArrayReader(this.ScenePathV6),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV6),
				'surfaces', Utils.getArrayReader(this.SceneGameSurfaceV6),
						];

			},

			// => Version: 5
			5:function(){
						this.ScenePathNodeV5 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
				'singlesided' , 'uint8',
						];

						this.ScenePathV5 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV5),
				'closed' , 'uint8',
						];

						this.SceneEdgeV5 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV5 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV5),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaceFlags', Utils.getArrayReader('uint32'),
						];

						this.__root=this.SceneFileGameV5 =[
				'paths', Utils.getArrayReader(this.ScenePathV5),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV5),
						];

			},

			// => Version: 4
			4:function(){
						this.ScenePathNodeV4 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
				'singlesided' , 'uint8',
						];

						this.ScenePathV4 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV4),
				'closed' , 'uint8',
						];

						this.SceneEdgeV4 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV4 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV4),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaceFlags', Utils.getArrayReader('uint32'),
						];

						this.SceneGrabNodeV4 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
						];

						this.__root=this.SceneFileGameV4 =[
				'paths', Utils.getArrayReader(this.ScenePathV4),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV4),
				'grabPoints', Utils.getArrayReader(this.SceneGrabNodeV4),
						];

			},

			// => Version: 3
			3:function(){
						this.ScenePathNodeV3 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
						];

						this.ScenePathV3 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV3),
				'closed' , 'uint8',
						];

						this.SceneEdgeV3 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV3 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV3),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
				'surfaceFlags', Utils.getArrayReader('uint32'),
						];

						this.SceneGrabNodeV3 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
						];

						this.__root=this.SceneFileGameV3 =[
				'paths', Utils.getArrayReader(this.ScenePathV3),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV3),
				'grabPoints', Utils.getArrayReader(this.SceneGrabNodeV3),
						];

			},

			// => Version: 2
			2:function(){
						this.ScenePathNodeV2 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
						];

						this.ScenePathV2 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV2),
				'closed' , 'uint8',
						];

						this.SceneEdgeV2 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV2 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV2),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.SceneGrabNodeV2 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
						];

						this.__root=this.SceneFileGameV2 =[
				'paths', Utils.getArrayReader(this.ScenePathV2),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV2),
				'grabPoints', Utils.getArrayReader(this.SceneGrabNodeV2),
						];

			},

			// => Version: 1
			1:function(){
						this.ScenePathNodeV1 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
				'smoothing' , 'float32',
						];

						this.ScenePathV1 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV1),
				'closed' , 'uint8',
						];

						this.SceneEdgeV1 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV1 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV1),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.__root=this.SceneFileGameV1 =[
				'paths', Utils.getArrayReader(this.ScenePathV1),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV1),
						];

			},

			// => Version: 0
			0:function(){
						this.ScenePathNodeV0 =[
				'position' , ['[]','float32',3],
				'rotation' , ['[]','float32',4],
				'radius' , 'float32',
				'flags' , 'uint32',
						];

						this.ScenePathV0 =[
				'properties', Utils.getArrayReader(Utils.getQWordReader()),
				'points', Utils.getArrayReader(this.ScenePathNodeV0),
				'closed' , 'uint8',
						];

						this.SceneEdgeV0 =[
				'indices', ['[]', 'uint32', 2],
				'triangles', Utils.getArrayReader('uint32'),
						];

						this.SceneGameMeshV0 =[
				'indices', Utils.getArrayReader('uint16'),
				'vertices', Utils.getArrayReader(['[]','float32',3]),
				'edges', Utils.getArrayReader(this.SceneEdgeV0),
				'moppInfo' , ['[]','float32',4],
				'moppBytes', Utils.getArrayReader('uint8'),
						];

						this.__root=this.SceneFileGameV0 =[
				'paths', Utils.getArrayReader(this.ScenePathV0),
				'meshes', Utils.getArrayReader(this.SceneGameMeshV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: SKEL, versions: 4, strucTab: 0x168D74C 
	///==================================================
	{
		name:'SKEL',
		versions:{


			// => Version: 3
			3:function(){
						this.SceneBoneV3 =[
				'vertexA' , ['[]','float32',3],
				'vertexB' , ['[]','float32',3],
				'radius' , 'float32',
				'mass' , 'float32',
				'name', Utils.getQWordReader(),
						];

						this.SceneJointV3 =[
				'bones', ['[]', 'uint32', 2],
				'pivots', ['[]', ['[]','float32',3], 2],
				'twists', ['[]', ['[]','float32',3], 2],
				'planes', ['[]', ['[]','float32',3], 2],
				'coneLimit' , 'float32',
				'planeMin' , 'float32',
				'planeMax' , 'float32',
				'twistMin' , 'float32',
				'twistMax' , 'float32',
						];

						this.SceneHingeJointV3 =[
				'bones', ['[]', 'uint32', 2],
				'pivots', ['[]', ['[]','float32',3], 2],
				'hinges', ['[]', ['[]','float32',3], 2],
				'normals', ['[]', ['[]','float32',3], 2],
				'limitMin' , 'float32',
				'limitMax' , 'float32',
						];

						this.__root=this.SceneFileSkeletonV3 =[
				'bones', Utils.getArrayReader(this.SceneBoneV3),
				'joints', Utils.getArrayReader(this.SceneJointV3),
				'hingeJoints', Utils.getArrayReader(this.SceneHingeJointV3),
				'ragdollToModel', Utils.getArrayReader('uint32'),
						];

			},

			// => Version: 2
			2:function(){
						this.SceneBoneV2 =[
				'vertexA' , ['[]','float32',3],
				'vertexB' , ['[]','float32',3],
				'radius' , 'float32',
				'mass' , 'float32',
						];

						this.SceneJointV2 =[
				'bones', ['[]', 'uint32', 2],
				'pivots', ['[]', ['[]','float32',3], 2],
				'twists', ['[]', ['[]','float32',3], 2],
				'planes', ['[]', ['[]','float32',3], 2],
				'coneLimit' , 'float32',
				'planeMin' , 'float32',
				'planeMax' , 'float32',
				'twistMin' , 'float32',
				'twistMax' , 'float32',
						];

						this.SceneHingeJointV2 =[
				'bones', ['[]', 'uint32', 2],
				'pivots', ['[]', ['[]','float32',3], 2],
				'hinges', ['[]', ['[]','float32',3], 2],
				'normals', ['[]', ['[]','float32',3], 2],
				'limitMin' , 'float32',
				'limitMax' , 'float32',
						];

						this.__root=this.SceneFileSkeletonV2 =[
				'bones', Utils.getArrayReader(this.SceneBoneV2),
				'joints', Utils.getArrayReader(this.SceneJointV2),
				'hingeJoints', Utils.getArrayReader(this.SceneHingeJointV2),
				'ragdollToModel', Utils.getArrayReader('uint32'),
						];

			},

			// => Version: 1
			1:function(){
						this.SceneBoneV1 =[
				'vertexA' , ['[]','float32',3],
				'vertexB' , ['[]','float32',3],
				'radius' , 'float32',
				'mass' , 'float32',
						];

						this.SceneJointV1 =[
				'bones', ['[]', 'uint32', 2],
				'pivots', ['[]', ['[]','float32',3], 2],
				'twists', ['[]', ['[]','float32',3], 2],
				'planes', ['[]', ['[]','float32',3], 2],
				'coneLimit' , 'float32',
				'planeMin' , 'float32',
				'planeMax' , 'float32',
				'twistMin' , 'float32',
				'twistMax' , 'float32',
						];

						this.SceneHingeJointV1 =[
				'bones', ['[]', 'uint32', 2],
				'pivots', ['[]', ['[]','float32',3], 2],
				'hinges', ['[]', ['[]','float32',3], 2],
				'normals', ['[]', ['[]','float32',3], 2],
				'limitMin' , 'float32',
				'limitMax' , 'float32',
						];

						this.SceneUnmappedBoneV1 =[
				'modelBoneIndex' , 'uint32',
				'sceneBoneIndex' , 'uint32',
				'localPose', ['[]', ['[]','float32',4], 3],
						];

						this.__root=this.SceneFileSkeletonV1 =[
				'bones', Utils.getArrayReader(this.SceneBoneV1),
				'joints', Utils.getArrayReader(this.SceneJointV1),
				'hingeJoints', Utils.getArrayReader(this.SceneHingeJointV1),
				'unmappedBones', Utils.getArrayReader(this.SceneUnmappedBoneV1),
				'ragdollToModel', Utils.getArrayReader('uint32'),
				'modelToRagdoll', Utils.getArrayReader('uint32'),
						];

			},

			// => Version: 0
			0:function(){
						this.SceneBoneV0 =[
				'vertexA' , ['[]','float32',3],
				'vertexB' , ['[]','float32',3],
				'radius' , 'float32',
				'mass' , 'float32',
						];

						this.SceneJointV0 =[
				'bones', ['[]', 'uint32', 2],
				'pivots', ['[]', ['[]','float32',3], 2],
				'twists', ['[]', ['[]','float32',3], 2],
				'planes', ['[]', ['[]','float32',3], 2],
				'coneLimit' , 'float32',
				'planeMin' , 'float32',
				'planeMax' , 'float32',
				'twistMin' , 'float32',
				'twistMax' , 'float32',
						];

						this.SceneUnmappedBoneV0 =[
				'modelBoneIndex' , 'uint32',
				'sceneBoneIndex' , 'uint32',
				'localPose', ['[]', ['[]','float32',4], 3],
						];

						this.__root=this.SceneFileSkeletonV0 =[
				'bones', Utils.getArrayReader(this.SceneBoneV0),
				'joints', Utils.getArrayReader(this.SceneJointV0),
				'unmappedBones', Utils.getArrayReader(this.SceneUnmappedBoneV0),
				'ragdollToModel', Utils.getArrayReader('uint32'),
				'modelToRagdoll', Utils.getArrayReader('uint32'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: MFST, versions: 7, strucTab: 0x1691408 
	///==================================================
	{
		name:'MFST',
		versions:{


			// => Version: 6
			6:function(){
						this.PackAssetManifestRecord =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
				'flags' , 'uint32',
						];

						this.PackAssetManifestStream =[
				'parentBaseId' , 'uint32',
				'streamBaseId' , 'uint32',
						];

						this.PackAssetManifestProperty =[
				'type' , 'uint8',
				'data', Utils.getArrayReader('uint8'),
						];

						this.PackAssetManifestPropertyIndex =[
				'baseId' , 'uint32',
				'properyIndex' , 'uint32',
						];

						this.__root=this.PackAssetManifest =[
				'buildId' , 'uint32',
				'totalRecordSize', Utils.getQWordReader(),
				'records', Utils.getArrayReader(this.PackAssetManifestRecord),
				'streams', Utils.getArrayReader(this.PackAssetManifestStream),
				'properties', Utils.getArrayReader(this.PackAssetManifestProperty),
				'propertyTable', Utils.getArrayReader(this.PackAssetManifestPropertyIndex),
						];

			},

			// => Version: 5
			5:function(){
						this.PackAssetManifestRecordV5 =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
				'flags' , 'uint32',
						];

						this.PackAssetManifestStreamV5 =[
				'parentBaseId' , 'uint32',
				'streamBaseId' , 'uint32',
						];

						this.PackAssetManifestPropertyV5 =[
				'type' , 'uint8',
				'data', Utils.getArrayReader('uint8'),
						];

						this.PackAssetManifestPropertyIndexV5 =[
				'baseId' , 'uint32',
				'properyIndex' , 'uint32',
						];

						this.__root=this.PackAssetManifestV5 =[
				'buildId' , 'uint32',
				'records', Utils.getArrayReader(this.PackAssetManifestRecordV5),
				'streams', Utils.getArrayReader(this.PackAssetManifestStreamV5),
				'properties', Utils.getArrayReader(this.PackAssetManifestPropertyV5),
				'propertyTable', Utils.getArrayReader(this.PackAssetManifestPropertyIndexV5),
						];

			},

			// => Version: 4
			4:function(){
						this.PackAssetManifestRecordV4 =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
				'flags' , 'uint32',
						];

						this.PackAssetManifestStreamV4 =[
				'parentBaseId' , 'uint32',
				'streamBaseId' , 'uint32',
						];

						this.PackAssetManifestOptionsV4 =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'flags' , 'uint32',
						];

						this.PackAssetManifestPropertyV4 =[
				'type' , 'uint8',
				'data', Utils.getArrayReader('uint8'),
						];

						this.PackAssetManifestPropertyIndexV4 =[
				'baseId' , 'uint32',
				'properyIndex' , 'uint32',
						];

						this.__root=this.PackAssetManifestV4 =[
				'buildId' , 'uint32',
				'records', Utils.getArrayReader(this.PackAssetManifestRecordV4),
				'streams', Utils.getArrayReader(this.PackAssetManifestStreamV4),
				'options', Utils.getArrayReader(this.PackAssetManifestOptionsV4),
				'properties', Utils.getArrayReader(this.PackAssetManifestPropertyV4),
				'propertyTable', Utils.getArrayReader(this.PackAssetManifestPropertyIndexV4),
						];

			},

			// => Version: 3
			3:function(){
						this.PackAssetManifestRecordV3 =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
						];

						this.PackAssetManifestStreamV3 =[
				'parentBaseId' , 'uint32',
				'streamBaseId' , 'uint32',
						];

						this.PackAssetManifestOptionsV3 =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'flags' , 'uint32',
						];

						this.__root=this.PackAssetManifestV3 =[
				'buildId' , 'uint32',
				'records', Utils.getArrayReader(this.PackAssetManifestRecordV3),
				'streams', Utils.getArrayReader(this.PackAssetManifestStreamV3),
				'options', Utils.getArrayReader(this.PackAssetManifestOptionsV3),
						];

			},

			// => Version: 2
			2:function(){
						this.PackAssetManifestRecordV2 =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
						];

						this.PackAssetManifestStreamV2 =[
				'parentBaseId' , 'uint32',
				'streamBaseId' , 'uint32',
						];

						this.__root=this.PackAssetManifestV2 =[
				'buildId' , 'uint32',
				'records', Utils.getArrayReader(this.PackAssetManifestRecordV2),
				'streams', Utils.getArrayReader(this.PackAssetManifestStreamV2),
				'noDeltaRecords', Utils.getArrayReader(this.PackAssetManifestRecordV2),
						];

			},

			// => Version: 1
			1:function(){
						this.PackAssetManifestRecordV1 =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
						];

						this.PackAssetManifestStreamV1 =[
				'parentBaseId' , 'uint32',
				'streamBaseId' , 'uint32',
						];

						this.__root=this.PackAssetManifestV1 =[
				'buildId' , 'uint32',
				'records', Utils.getArrayReader(this.PackAssetManifestRecordV1),
				'streams', Utils.getArrayReader(this.PackAssetManifestStreamV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PackAssetManifestRecordV0 =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
						];

						this.__root=this.PackAssetManifestV0 =[
				'buildId' , 'uint32',
				'records', Utils.getArrayReader(this.PackAssetManifestRecordV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: ARMF, versions: 2, strucTab: 0x1691468 
	///==================================================
	{
		name:'ARMF',
		versions:{


			// => Version: 1
			1:function(){
						this.PackAssetManifestFile =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
				'flags' , 'uint32',
				'name', Utils.getString16Reader(),
						];

						this.PackAssetExtraFile =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
				'fileType' , 'uint32',
						];

						this.__root=this.PackAssetRootManifest =[
				'buildId' , 'uint32',
				'manifests', Utils.getArrayReader(this.PackAssetManifestFile),
				'extraFiles', Utils.getArrayReader(this.PackAssetExtraFile),
						];

			},

			// => Version: 0
			0:function(){
						this.PackAssetExtraFile =[
				'baseId' , 'uint32',
				'fileId' , 'uint32',
				'size' , 'uint32',
				'fileType' , 'uint32',
						];

						this.__root=this.PackAssetRootManifestV0 =[
				'buildId' , 'uint32',
				'extraFiles', Utils.getArrayReader(this.PackAssetExtraFile),
						];

			},
		}
	},

	///==================================================
	/// Chunk: TKAC, versions: 1, strucTab: 0x16923B8 
	///==================================================
	{
		name:'TKAC',
		versions:{


			// => Version: 0
			0:function(){
						this.KeyEntry =[
				'assetType' , 'uint32',
				'assetId' , 'uint32',
				'key', Utils.getQWordReader(),
						];

						this.__root=this.KeyTableData =[
				'keyEntryArr', Utils.getArrayReader(this.KeyEntry),
						];

			},
		}
	},

	///==================================================
	/// Chunk: main, versions: 1, strucTab: 0x16E3B90 
	///==================================================
	{
		name:'main',
		versions:{


			// => Version: 0
			0:function(){
						this.CollideNavMeshChunkRef =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkFilename' , Utils.getFileNameReader(),
						];

						this.__root=this.CollideNavMesh =[
				'boundsMin' , ['[]','float32',3],
				'boundsMax' , ['[]','float32',3],
				'chunkDims', ['[]', 'uint32', 2],
				'chunkRefArray', Utils.getArrayReader(this.CollideNavMeshChunkRef),
						];

			},
		}
	},

	///==================================================
	/// Chunk: main, versions: 1, strucTab: 0x16E3BA8 
	///==================================================
	{
		name:'main',
		versions:{


			// => Version: 0
			0:function(){
						this.__root=this.CollideNavMeshChunk =[
				'navMeshData', Utils.getArrayReader('uint8'),
				'coarseGraphData', Utils.getArrayReader('uint8'),
				'queryMediatorMoppData', Utils.getArrayReader('uint8'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: main, versions: 2, strucTab: 0x16E3BC0 
	///==================================================
	{
		name:'main',
		versions:{


			// => Version: 1
			1:function(){
						this.CollideModelManifestFile =[
				'modelFileStr', Utils.getString16Reader(),
				'modelFile', Utils.getFileNameReader(),
				'collisionFile', Utils.getFileNameReader(),
				'scales', Utils.getArrayReader('float32'),
						];

						this.__root=this.CollideModelManifest =[
				'files', Utils.getArrayReader(this.CollideModelManifestFile),
						];

			},

			// => Version: 0
			0:function(){
						this.CollideModelManifestFile =[
				'modelFile', Utils.getFileNameReader(),
				'collisionFile', Utils.getFileNameReader(),
				'scales', Utils.getArrayReader('float32'),
						];

						this.__root=this.CollideModelManifest =[
				'files', Utils.getArrayReader(this.CollideModelManifestFile),
						];

			},
		}
	},

	///==================================================
	/// Chunk: comp, versions: 19, strucTab: 0x16E8D38 
	///==================================================
	{
		name:'comp',
		versions:{


			// => Version: 18
			18:function(){
						this.PackCompositeBlitRectSetV18 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeBoneScaleParamV18 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint8',
				'max' , 'float32',
				'min' , 'float32',
				'rotate' , ['[]','float32',3],
				'scale' , ['[]','float32',3],
				'translate' , ['[]','float32',3],
						];

						this.PackCompositeBoneScaleRegionV18 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
				'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV18),
						];

						this.PackCompositeMorphWeightV18 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.PackCompositeBoneScaleV18 =[
				'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV18),
				'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV18),
						];

						this.PackCompositeBoneScaleFileV18 =[
				'fileName', Utils.getString16Reader(),
						];

						this.PackCompositeFileDataV18 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint8',
				'animRoleOverride', Utils.getQWordReader(),
				'meshBase', Utils.getFileNameReader(),
				'meshOverlap', Utils.getFileNameReader(),
				'maskDye1', Utils.getFileNameReader(),
				'maskDye2', Utils.getFileNameReader(),
				'maskDye3', Utils.getFileNameReader(),
				'maskDye4', Utils.getFileNameReader(),
				'maskCut', Utils.getFileNameReader(),
				'textureBase', Utils.getFileNameReader(),
				'textureNormal', Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint8',
						];

						this.PackCompositeSkinPatternV18 =[
				'chest', Utils.getFileNameReader(),
				'face', Utils.getFileNameReader(),
				'feet', Utils.getFileNameReader(),
				'hands', Utils.getFileNameReader(),
				'legs', Utils.getFileNameReader(),
				'ears', Utils.getFileNameReader(),
						];

						this.PackCompositeSkinStyleV18 =[
				'chest', Utils.getQWordReader(),
				'feet', Utils.getQWordReader(),
				'hands', Utils.getQWordReader(),
				'legs', Utils.getQWordReader(),
						];

						this.PackCompositeColorV18 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV18 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV18,
				'color1', this.PackCompositeColorV18,
				'color2', this.PackCompositeColorV18,
				'color3', this.PackCompositeColorV18,
						];

						this.PackCompositeVariantV18 =[
				'token', Utils.getQWordReader(),
				'boneScaleIndex' , 'uint32',
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV18),
				'eyeColor', this.PackCompositeColorV18,
				'hairColor', this.PackCompositeColorV18,
				'hairColor2', this.PackCompositeColorV18,
				'patternColor', this.PackCompositeColorV18,
				'skinColor', this.PackCompositeColorV18,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeAnimOverrideV18 =[
				'animRole', Utils.getQWordReader(),
				'filepath', Utils.getFileNameReader(),
						];

						this.PackCompositeRaceDataV18 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV18),
				'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV18),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'eyeColorPalette', Utils.getString16Reader(),
				'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV18),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV18),
				'flags' , 'uint32',
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile', Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV18),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'skinStyles', Utils.getArrayReader(this.PackCompositeSkinStyleV18),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV18),
				'animOverrides', Utils.getArrayReader(this.PackCompositeAnimOverrideV18),
						];

						this.__root=this.PackCompositeV18 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV18),
				'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV18),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV18),
				'configVersion', 'uint16',
						];

			},

			// => Version: 17, ReferencedFunction: 0x1228AB0
			17:function(){
						this.PackCompositeBlitRectSetV17 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeBoneScaleParamV17 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint8',
				'max' , 'float32',
				'min' , 'float32',
				'rotate' , ['[]','float32',3],
				'scale' , ['[]','float32',3],
				'translate' , ['[]','float32',3],
						];

						this.PackCompositeBoneScaleRegionV17 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
				'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV17),
						];

						this.PackCompositeMorphWeightV17 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.PackCompositeBoneScaleV17 =[
				'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV17),
				'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV17),
						];

						this.PackCompositeBoneScaleFileV17 =[
				'fileName', Utils.getString16Reader(),
						];

						this.PackCompositeFileDataV17 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint8',
				'meshBase', Utils.getFileNameReader(),
				'meshOverlap', Utils.getFileNameReader(),
				'maskDye1', Utils.getFileNameReader(),
				'maskDye2', Utils.getFileNameReader(),
				'maskDye3', Utils.getFileNameReader(),
				'maskDye4', Utils.getFileNameReader(),
				'maskCut', Utils.getFileNameReader(),
				'textureBase', Utils.getFileNameReader(),
				'textureNormal', Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint8',
						];

						this.PackCompositeSkinPatternV17 =[
				'chest', Utils.getFileNameReader(),
				'face', Utils.getFileNameReader(),
				'feet', Utils.getFileNameReader(),
				'hands', Utils.getFileNameReader(),
				'legs', Utils.getFileNameReader(),
				'ears', Utils.getFileNameReader(),
						];

						this.PackCompositeSkinStyleV17 =[
				'chest', Utils.getQWordReader(),
				'feet', Utils.getQWordReader(),
				'hands', Utils.getQWordReader(),
				'legs', Utils.getQWordReader(),
						];

						this.PackCompositeColorV17 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV17 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV17,
				'color1', this.PackCompositeColorV17,
				'color2', this.PackCompositeColorV17,
				'color3', this.PackCompositeColorV17,
						];

						this.PackCompositeVariantV17 =[
				'token', Utils.getQWordReader(),
				'boneScaleIndex' , 'uint32',
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV17),
				'eyeColor', this.PackCompositeColorV17,
				'hairColor', this.PackCompositeColorV17,
				'hairColor2', this.PackCompositeColorV17,
				'patternColor', this.PackCompositeColorV17,
				'skinColor', this.PackCompositeColorV17,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeAnimOverrideV17 =[
				'animRole', Utils.getQWordReader(),
				'filepath', Utils.getFileNameReader(),
						];

						this.PackCompositeRaceDataV17 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV17),
				'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV17),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'eyeColorPalette', Utils.getString16Reader(),
				'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV17),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV17),
				'flags' , 'uint32',
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile', Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV17),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'skinStyles', Utils.getArrayReader(this.PackCompositeSkinStyleV17),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV17),
				'animOverrides', Utils.getArrayReader(this.PackCompositeAnimOverrideV17),
						];

						this.__root=this.PackCompositeV17 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV17),
				'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV17),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV17),
				'configVersion', 'uint16',
						];

			},

			// => Version: 16, ReferencedFunction: 0x1228710
			16:function(){
						this.PackCompositeBlitRectSetV16 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeBoneScaleParamV16 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint8',
				'max' , 'float32',
				'min' , 'float32',
				'rotate' , ['[]','float32',3],
				'scale' , ['[]','float32',3],
				'translate' , ['[]','float32',3],
						];

						this.PackCompositeBoneScaleRegionV16 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
				'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV16),
						];

						this.PackCompositeMorphWeightV16 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.PackCompositeBoneScaleV16 =[
				'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV16),
				'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV16),
						];

						this.PackCompositeBoneScaleFileV16 =[
				'fileName', Utils.getString16Reader(),
						];

						this.PackCompositeFileDataV16 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint8',
				'meshBase', Utils.getFileNameReader(),
				'meshOverlap', Utils.getFileNameReader(),
				'maskDye1', Utils.getFileNameReader(),
				'maskDye2', Utils.getFileNameReader(),
				'maskDye3', Utils.getFileNameReader(),
				'maskDye4', Utils.getFileNameReader(),
				'maskCut', Utils.getFileNameReader(),
				'textureBase', Utils.getFileNameReader(),
				'textureNormal', Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint8',
						];

						this.PackCompositeSkinPatternV16 =[
				'chest', Utils.getFileNameReader(),
				'face', Utils.getFileNameReader(),
				'feet', Utils.getFileNameReader(),
				'hands', Utils.getFileNameReader(),
				'legs', Utils.getFileNameReader(),
				'ears', Utils.getFileNameReader(),
						];

						this.PackCompositeColorV16 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV16 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV16,
				'color1', this.PackCompositeColorV16,
				'color2', this.PackCompositeColorV16,
				'color3', this.PackCompositeColorV16,
						];

						this.PackCompositeVariantV16 =[
				'token', Utils.getQWordReader(),
				'boneScaleIndex' , 'uint32',
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV16),
				'eyeColor', this.PackCompositeColorV16,
				'hairColor', this.PackCompositeColorV16,
				'hairColor2', this.PackCompositeColorV16,
				'patternColor', this.PackCompositeColorV16,
				'skinColor', this.PackCompositeColorV16,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeAnimOverrideV16 =[
				'animRole', Utils.getQWordReader(),
				'filepath', Utils.getFileNameReader(),
						];

						this.PackCompositeRaceDataV16 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV16),
				'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV16),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'eyeColorPalette', Utils.getString16Reader(),
				'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV16),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV16),
				'flags' , 'uint32',
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile', Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV16),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'skinStyleCount' , 'uint8',
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV16),
				'animOverrides', Utils.getArrayReader(this.PackCompositeAnimOverrideV16),
						];

						this.__root=this.PackCompositeV16 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV16),
				'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV16),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV16),
				'configVersion', 'uint16',
						];

			},

			// => Version: 15
			15:function(){
						this.PackCompositeBlitRectSetV15 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeBoneScaleParamV15 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint8',
				'max' , 'float32',
				'min' , 'float32',
				'rotate' , ['[]','float32',3],
				'scale' , ['[]','float32',3],
				'translate' , ['[]','float32',3],
						];

						this.PackCompositeBoneScaleRegionV15 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
				'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV15),
						];

						this.PackCompositeMorphWeightV15 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.PackCompositeBoneScaleV15 =[
				'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV15),
				'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV15),
						];

						this.PackCompositeBoneScaleFileV15 =[
				'fileName', Utils.getString16Reader(),
						];

						this.PackCompositeFileDataV15 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint8',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint8',
						];

						this.PackCompositeSkinPatternV15 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV15 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV15 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV15,
				'color1', this.PackCompositeColorV15,
				'color2', this.PackCompositeColorV15,
				'color3', this.PackCompositeColorV15,
						];

						this.PackCompositeVariantV15 =[
				'token', Utils.getQWordReader(),
				'boneScaleIndex' , 'uint32',
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV15),
				'eyeColor', this.PackCompositeColorV15,
				'hairColor', this.PackCompositeColorV15,
				'hairColor2', this.PackCompositeColorV15,
				'patternColor', this.PackCompositeColorV15,
				'skinColor', this.PackCompositeColorV15,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeAnimOverrideV15 =[
				'animRole', Utils.getQWordReader(),
				'filepath' , Utils.getFileNameReader(),
						];

						this.PackCompositeRaceDataV15 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV15),
				'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV15),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'eyeColorPalette', Utils.getString16Reader(),
				'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV15),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV15),
				'flags' , 'uint32',
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV15),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'skinStyleCount' , 'uint8',
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV15),
				'animOverrides', Utils.getArrayReader(this.PackCompositeAnimOverrideV15),
						];

						this.__root=this.PackCompositeV15 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV15),
				'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV15),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV15),
				'configVersion', 'uint16',
						];

			},

			// => Version: 14
			14:function(){
						this.PackCompositeBlitRectSetV14 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeBoneScaleParamV14 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint8',
				'max' , 'float32',
				'min' , 'float32',
				'rotate' , ['[]','float32',3],
				'scale' , ['[]','float32',3],
				'translate' , ['[]','float32',3],
						];

						this.PackCompositeBoneScaleRegionV14 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
				'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV14),
						];

						this.PackCompositeMorphWeightV14 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
						];

						this.PackCompositeBoneScaleV14 =[
				'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV14),
				'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV14),
						];

						this.PackCompositeBoneScaleFileV14 =[
				'fileName', Utils.getString16Reader(),
						];

						this.PackCompositeFileDataV14 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint8',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint8',
						];

						this.PackCompositeSkinPatternV14 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV14 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV14 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV14,
				'color1', this.PackCompositeColorV14,
				'color2', this.PackCompositeColorV14,
				'color3', this.PackCompositeColorV14,
						];

						this.PackCompositeVariantV14 =[
				'token', Utils.getQWordReader(),
				'boneScaleIndex' , 'uint32',
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV14),
				'eyeColor', this.PackCompositeColorV14,
				'hairColor', this.PackCompositeColorV14,
				'hairColor2', this.PackCompositeColorV14,
				'patternColor', this.PackCompositeColorV14,
				'skinColor', this.PackCompositeColorV14,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV14 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV14),
				'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV14),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'eyeColorPalette', Utils.getString16Reader(),
				'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV14),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV14),
				'flags' , 'uint32',
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV14),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'skinStyleCount' , 'uint8',
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV14),
						];

						this.__root=this.PackCompositeV14 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV14),
				'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV14),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV14),
				'configVersion', 'uint16',
						];

			},

			// => Version: 13
			13:function(){
						this.PackCompositeBlitRectSetV13 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeBoneScaleParamV13 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint8',
				'max' , 'float32',
				'min' , 'float32',
				'rotate' , ['[]','float32',3],
				'scale' , ['[]','float32',3],
				'translate' , ['[]','float32',3],
						];

						this.PackCompositeBoneScaleRegionV13 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
				'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV13),
						];

						this.PackCompositeMorphWeightV13 =[
				'value' , 'float32',
				'name', Utils.getQWordReader(),
						];

						this.PackCompositeBoneScaleV13 =[
				'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV13),
				'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV13),
						];

						this.PackCompositeBoneScaleFileV13 =[
				'fileName', Utils.getString16Reader(),
						];

						this.PackCompositeFileDataV13 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint8',
				'flags' , 'uint8',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint8',
						];

						this.PackCompositeSkinPatternV13 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV13 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV13 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV13,
				'color1', this.PackCompositeColorV13,
				'color2', this.PackCompositeColorV13,
				'color3', this.PackCompositeColorV13,
						];

						this.PackCompositeVariantV13 =[
				'token', Utils.getQWordReader(),
				'boneScaleIndex' , 'uint32',
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV13),
				'hairColor', this.PackCompositeColorV13,
				'hairColor2', this.PackCompositeColorV13,
				'patternColor', this.PackCompositeColorV13,
				'skinColor', this.PackCompositeColorV13,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV13 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV13),
				'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV13),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV13),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV13),
				'flags' , 'uint32',
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV13),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'skinStyleCount' , 'uint8',
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV13),
						];

						this.__root=this.PackCompositeV13 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV13),
				'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV13),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV13),
				'configVersion', 'uint16',
						];

			},

			// => Version: 12
			12:function(){
						this.PackCompositeBlitRectSetV12 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeBoneScaleParamV12 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint8',
				'max' , 'float32',
				'min' , 'float32',
				'rotate' , ['[]','float32',3],
				'scale' , ['[]','float32',3],
				'translate' , ['[]','float32',3],
						];

						this.PackCompositeBoneScaleRegionV12 =[
				'name', Utils.getQWordReader(),
				'value' , 'float32',
				'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV12),
						];

						this.PackCompositeMorphWeightV12 =[
				'value' , 'float32',
				'name', Utils.getQWordReader(),
						];

						this.PackCompositeBoneScaleV12 =[
				'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV12),
				'MorphWeight', Utils.getArrayReader(this.PackCompositeMorphWeightV12),
						];

						this.PackCompositeBoneScaleFileV12 =[
				'fileName', Utils.getString16Reader(),
						];

						this.PackCompositeFileDataV12 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV12 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV12 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV12 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV12,
				'color1', this.PackCompositeColorV12,
				'color2', this.PackCompositeColorV12,
				'color3', this.PackCompositeColorV12,
						];

						this.PackCompositeVariantV12 =[
				'token', Utils.getQWordReader(),
				'boneScaleIndex' , 'uint32',
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV12),
				'hairColor', this.PackCompositeColorV12,
				'hairColor2', this.PackCompositeColorV12,
				'patternColor', this.PackCompositeColorV12,
				'skinColor', this.PackCompositeColorV12,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV12 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'bodyBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV12),
				'bodyBoneScaleFiles', Utils.getArrayReader(this.PackCompositeBoneScaleFileV12),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faceBoneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV12),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV12),
				'flags' , 'uint32',
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV12),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'skinStyleCount' , 'uint8',
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV12),
						];

						this.__root=this.PackCompositeV12 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV12),
				'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV12),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV12),
				'configVersion', 'uint16',
						];

			},

			// => Version: 11, ReferencedFunction: 0x12286D0
			11:function(){
						this.PackCompositeBlitRectSetV11 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeBoneScaleParamV11 =[
				'name', Utils.getQWordReader(),
				'flags' , 'uint8',
				'max' , 'float32',
				'min' , 'float32',
				'rotate' , ['[]','float32',3],
				'scale' , ['[]','float32',3],
				'translate' , ['[]','float32',3],
						];

						this.PackCompositeBoneScaleRegionV11 =[
				'value' , 'float32',
				'Bone', Utils.getArrayReader(this.PackCompositeBoneScaleParamV11),
						];

						this.PackCompositeBoneScaleV11 =[
				'BodyRegion', Utils.getArrayReader(this.PackCompositeBoneScaleRegionV11),
						];

						this.PackCompositeFileDataV11 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV11 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV11 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV11 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV11,
				'color1', this.PackCompositeColorV11,
				'color2', this.PackCompositeColorV11,
				'color3', this.PackCompositeColorV11,
						];

						this.PackCompositeVariantV11 =[
				'token', Utils.getQWordReader(),
				'boneScaleIndex' , 'uint32',
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV11),
				'hairColor', this.PackCompositeColorV11,
				'hairColor2', this.PackCompositeColorV11,
				'patternColor', this.PackCompositeColorV11,
				'skinColor', this.PackCompositeColorV11,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV11 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV11),
				'flags' , 'uint32',
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV11),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV11),
						];

						this.__root=this.PackCompositeV11 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV11),
				'boneScales', Utils.getArrayReader(this.PackCompositeBoneScaleV11),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV11),
				'configVersion', 'uint16',
						];

			},

			// => Version: 10
			10:function(){
						this.PackCompositeBlitRectSetV10 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV10 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV10 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV10 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV10 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV10,
				'color1', this.PackCompositeColorV10,
				'color2', this.PackCompositeColorV10,
				'color3', this.PackCompositeColorV10,
						];

						this.PackCompositeVariantV10 =[
				'token', Utils.getQWordReader(),
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV10),
				'hairColor', this.PackCompositeColorV10,
				'hairColor2', this.PackCompositeColorV10,
				'patternColor', this.PackCompositeColorV10,
				'skinColor', this.PackCompositeColorV10,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV10 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV10),
				'flags' , 'uint32',
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV10),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV10),
						];

						this.__root=this.PackCompositeV10 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV10),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV10),
				'configVersion', 'uint16',
						];

			},

			// => Version: 9
			9:function(){
						this.PackCompositeBlitRectSetV9 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV9 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV9 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV9 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV9 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV9,
				'color1', this.PackCompositeColorV9,
				'color2', this.PackCompositeColorV9,
				'color3', this.PackCompositeColorV9,
						];

						this.PackCompositeVariantV9 =[
				'token', Utils.getQWordReader(),
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV9),
				'hairColor', this.PackCompositeColorV9,
				'hairColor2', this.PackCompositeColorV9,
				'patternColor', this.PackCompositeColorV9,
				'skinColor', this.PackCompositeColorV9,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV9 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV9),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV9),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV9),
						];

						this.__root=this.PackCompositeV9 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV9),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV9),
				'configVersion', 'uint16',
						];

			},

			// => Version: 8
			8:function(){
						this.PackCompositeBlitRectSetV8 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV8 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV8 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV8 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV8 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV8,
				'color1', this.PackCompositeColorV8,
				'color2', this.PackCompositeColorV8,
				'color3', this.PackCompositeColorV8,
						];

						this.PackCompositeVariantV8 =[
				'token', Utils.getQWordReader(),
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV8),
				'hairColor', this.PackCompositeColorV8,
				'hairColor2', this.PackCompositeColorV8,
				'patternColor', this.PackCompositeColorV8,
				'skinColor', this.PackCompositeColorV8,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV8 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'baseHeadToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV8),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV8),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV8),
						];

						this.__root=this.PackCompositeV8 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV8),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV8),
						];

			},

			// => Version: 7
			7:function(){
						this.PackCompositeBlitRectSetV7 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV7 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV7 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV7 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV7 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV7,
				'color1', this.PackCompositeColorV7,
				'color2', this.PackCompositeColorV7,
				'color3', this.PackCompositeColorV7,
						];

						this.PackCompositeVariantV7 =[
				'token', Utils.getQWordReader(),
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV7),
				'hairColor', this.PackCompositeColorV7,
				'hairColor2', this.PackCompositeColorV7,
				'patternColor', this.PackCompositeColorV7,
				'skinColor', this.PackCompositeColorV7,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV7 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV7),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV7),
				'skinColorPalette', Utils.getString16Reader(),
				'skinPatternPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV7),
						];

						this.__root=this.PackCompositeV7 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV7),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV7),
						];

			},

			// => Version: 6
			6:function(){
						this.PackCompositeBlitRectSetV6 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV6 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV6 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
				'ears' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV6 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV6 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV6,
				'color1', this.PackCompositeColorV6,
				'color2', this.PackCompositeColorV6,
				'color3', this.PackCompositeColorV6,
						];

						this.PackCompositeVariantV6 =[
				'token', Utils.getQWordReader(),
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV6),
				'hairColor', this.PackCompositeColorV6,
				'hairColor2', this.PackCompositeColorV6,
				'patternColor', this.PackCompositeColorV6,
				'skinColor', this.PackCompositeColorV6,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV6 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV6),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV6),
				'skinColorPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV6),
						];

						this.__root=this.PackCompositeV6 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV6),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV6),
						];

			},

			// => Version: 5
			5:function(){
						this.PackCompositeBlitRectSetV5 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV5 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV5 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV5 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV5 =[
				'nameToken', Utils.getQWordReader(),
				'color0', this.PackCompositeColorV5,
				'color1', this.PackCompositeColorV5,
				'color2', this.PackCompositeColorV5,
				'color3', this.PackCompositeColorV5,
						];

						this.PackCompositeVariantV5 =[
				'token', Utils.getQWordReader(),
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV5),
				'hairColor', this.PackCompositeColorV5,
				'hairColor2', this.PackCompositeColorV5,
				'patternColor', this.PackCompositeColorV5,
				'skinColor', this.PackCompositeColorV5,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV5 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV5),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV5),
				'skinColorPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV5),
						];

						this.__root=this.PackCompositeV5 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV5),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV5),
						];

			},

			// => Version: 4
			4:function(){
						this.PackCompositeBlitRectSetV4 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint8'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV4 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV4 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV4 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV4 =[
				'nameToken', Utils.getQWordReader(),
				'clothColor', this.PackCompositeColorV4,
				'leatherColor', this.PackCompositeColorV4,
				'metalColor', this.PackCompositeColorV4,
						];

						this.PackCompositeVariantV4 =[
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV4),
				'hairColor', this.PackCompositeColorV4,
				'patternColor', this.PackCompositeColorV4,
				'skinColor', this.PackCompositeColorV4,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV4 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV4),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV4),
				'skinColorPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV4),
						];

						this.__root=this.PackCompositeV4 =[
				'armorColorIds', Utils.getArrayReader('uint32'),
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV4),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV4),
						];

			},

			// => Version: 3
			3:function(){
						this.PackCompositeBlitRectSetV3 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint32'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV3 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV3 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV3 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV3 =[
				'nameToken', Utils.getQWordReader(),
				'clothColor', this.PackCompositeColorV3,
				'leatherColor', this.PackCompositeColorV3,
				'metalColor', this.PackCompositeColorV3,
						];

						this.PackCompositeVariantV3 =[
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV3),
				'hairColor', this.PackCompositeColorV3,
				'patternColor', this.PackCompositeColorV3,
				'skinColor', this.PackCompositeColorV3,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV3 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'beard', Utils.getArrayReader(Utils.getQWordReader()),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV3),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV3),
				'skinColorPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV3),
						];

						this.__root=this.PackCompositeV3 =[
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV3),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV3),
						];

			},

			// => Version: 2
			2:function(){
						this.PackCompositeBlitRectSetV2 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint32'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV2 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV2 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV2 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV2 =[
				'nameToken', Utils.getQWordReader(),
				'clothColor', this.PackCompositeColorV2,
				'leatherColor', this.PackCompositeColorV2,
				'metalColor', this.PackCompositeColorV2,
						];

						this.PackCompositeVariantV2 =[
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV2),
				'hairColor', this.PackCompositeColorV2,
				'patternColor', this.PackCompositeColorV2,
				'skinColor', this.PackCompositeColorV2,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV2 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV2),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV2),
				'skinColorPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV2),
						];

						this.__root=this.PackCompositeV2 =[
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV2),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV2),
						];

			},

			// => Version: 1
			1:function(){
						this.PackCompositeBlitRectSetV1 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint32'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV1 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskDye1' , Utils.getFileNameReader(),
				'maskDye2' , Utils.getFileNameReader(),
				'maskDye3' , Utils.getFileNameReader(),
				'maskDye4' , Utils.getFileNameReader(),
				'maskCut' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'dyeFlags' , 'uint32',
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV1 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV1 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV1 =[
				'nameToken', Utils.getQWordReader(),
				'clothColor', this.PackCompositeColorV1,
				'leatherColor', this.PackCompositeColorV1,
				'metalColor', this.PackCompositeColorV1,
						];

						this.PackCompositeVariantV1 =[
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV1),
				'hairColor', this.PackCompositeColorV1,
				'patternColor', this.PackCompositeColorV1,
				'skinColor', this.PackCompositeColorV1,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV1 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV1),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'hairColorPalette', Utils.getString16Reader(),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV1),
				'skinColorPalette', Utils.getString16Reader(),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV1),
						];

						this.__root=this.PackCompositeV1 =[
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV1),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PackCompositeBlitRectSetV0 =[
				'name', Utils.getString16Reader(),
				'size', ['[]', 'uint32', 2],
				'rectIndex', Utils.getArrayReader('uint32'),
				'rectArray', Utils.getArrayReader(['[]','uint32',4]),
						];

						this.PackCompositeFileDataV0 =[
				'name', Utils.getQWordReader(),
				'type' , 'uint32',
				'meshBase' , Utils.getFileNameReader(),
				'meshOverlap' , Utils.getFileNameReader(),
				'maskClothSkin' , Utils.getFileNameReader(),
				'maskLeather' , Utils.getFileNameReader(),
				'maskMetal' , Utils.getFileNameReader(),
				'maskGlow' , Utils.getFileNameReader(),
				'textureBase' , Utils.getFileNameReader(),
				'textureNormal' , Utils.getFileNameReader(),
				'hideFlags' , 'uint32',
				'skinFlags' , 'uint32',
				'blitRectIndex' , 'uint32',
						];

						this.PackCompositeSkinPatternV0 =[
				'chest' , Utils.getFileNameReader(),
				'face' , Utils.getFileNameReader(),
				'feet' , Utils.getFileNameReader(),
				'hands' , Utils.getFileNameReader(),
				'legs' , Utils.getFileNameReader(),
						];

						this.PackCompositeColorV0 =[
				'brightness' , 'uint8',
				'contrast' , 'uint8',
				'hue' , 'uint8',
				'saturation' , 'uint8',
				'lightness' , 'uint8',
						];

						this.PackCompositeVariantComponentV0 =[
				'nameToken', Utils.getQWordReader(),
				'clothColor', this.PackCompositeColorV0,
				'leatherColor', this.PackCompositeColorV0,
				'metalColor', this.PackCompositeColorV0,
						];

						this.PackCompositeVariantV0 =[
				'components', Utils.getArrayReader(this.PackCompositeVariantComponentV0),
				'hairColor', this.PackCompositeColorV0,
				'patternColor', this.PackCompositeColorV0,
				'skinColor', this.PackCompositeColorV0,
				'skinIndex' , 'uint32',
						];

						this.PackCompositeRaceDataV0 =[
				'name', Utils.getString16Reader(),
				'nameToken', Utils.getQWordReader(),
				'ears', Utils.getArrayReader(Utils.getQWordReader()),
				'faces', Utils.getArrayReader(Utils.getQWordReader()),
				'fileData', Utils.getArrayReader(this.PackCompositeFileDataV0),
				'hairStyles', Utils.getArrayReader(Utils.getQWordReader()),
				'skeletonFile' , Utils.getFileNameReader(),
				'skinPatterns', Utils.getArrayReader(this.PackCompositeSkinPatternV0),
				'type' , 'uint32',
				'variantRefRace', Utils.getQWordReader(),
				'variants', Utils.getArrayReader(this.PackCompositeVariantV0),
						];

						this.__root=this.PackCompositeV0 =[
				'blitRects', Utils.getArrayReader(this.PackCompositeBlitRectSetV0),
				'raceSexData', Utils.getArrayReader(this.PackCompositeRaceDataV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: Main, versions: 1, strucTab: 0x16E8FE8 
	///==================================================
	{
		name:'Main',
		versions:{


			// => Version: 0
			0:function(){
						this.PackContentTypeInfo =[
				'guidOffset' , 'uint32',
				'uidOffset' , 'uint32',
				'dataIdOffset' , 'uint32',
				'nameOffset' , 'uint32',
				'trackReferences' , 'uint8',
						];

						this.PackContentNamespace =[
				'name', Utils.getString16Reader(),
				'domain' , 'uint32',
				'parentIndex' , 'uint32',
						];

						this.PackContentIndexEntry =[
				'type' , 'uint32',
				'offset' , 'uint32',
				'namespaceIndex' , 'uint32',
				'rootIndex' , 'uint32',
						];

						this.PackContentLocalOffsetFixup =[
				'relocOffset' , 'uint32',
						];

						this.PackContentExternalOffsetFixup =[
				'relocOffset' , 'uint32',
				'targetFileIndex' , 'uint32',
						];

						this.PackContentFileIndexFixup =[
				'relocOffset' , 'uint32',
						];

						this.PackContentStringIndexFixup =[
				'relocOffset' , 'uint32',
						];

						this.PackContentTrackedReference =[
				'sourceOffset' , 'uint32',
				'targetFileIndex' , 'uint32',
				'targetOffset' , 'uint32',
						];

						this.__root=this.PackContent =[
				'flags' , 'uint32',
				'typeInfos', Utils.getArrayReader(this.PackContentTypeInfo),
				'namespaces', Utils.getArrayReader(this.PackContentNamespace),
				'fileRefs', Utils.getArrayReader(Utils.getFileNameReader()),
				'indexEntries', Utils.getArrayReader(this.PackContentIndexEntry),
				'localOffsets', Utils.getArrayReader(this.PackContentLocalOffsetFixup),
				'externalOffsets', Utils.getArrayReader(this.PackContentExternalOffsetFixup),
				'fileIndices', Utils.getArrayReader(this.PackContentFileIndexFixup),
				'stringIndices', Utils.getArrayReader(this.PackContentStringIndexFixup),
				'trackedReferences', Utils.getArrayReader(this.PackContentTrackedReference),
				'strings', Utils.getArrayReader(Utils.getString16Reader()),
				'content', Utils.getArrayReader('uint8'),
						];

			},
		}
	},

	///==================================================
	/// Chunk: Main, versions: 1, strucTab: 0x16E900C 
	///==================================================
	{
		name:'Main',
		versions:{


			// => Version: 0
			0:function(){
						this.PackMapMetadataMap =[
				'mapId', 'uint16',
				'mapType' , 'uint8',
						];

						this.__root=this.PackMapMetadata =[
				'maps', Utils.getArrayReader(this.PackMapMetadataMap),
						];

			},
		}
	},

	///==================================================
	/// Chunk: anim, versions: 3, strucTab: 0x16E9280 
	///==================================================
	{
		name:'anim',
		versions:{


			// => Version: 2, ReferencedFunction: 0x1228B70
			2:function(){
						this.PackEmoteTimingV2 =[
				'ModelFile', Utils.getFileNameReader(),
				'BlendIn' , 'float32',
				'BlendOut' , 'float32',
				'IntroDuration' , 'uint32',
				'LoopDuration' , 'uint32',
				'OutroDuration' , 'uint32',
						];

						this.PackEmoteAnimationV2 =[
				'Token', Utils.getQWordReader(),
				'Timing', Utils.getArrayReader(this.PackEmoteTimingV2),
						];

						this.__root=this.PackEmoteAnimationsV2 =[
				'Animation', Utils.getArrayReader(this.PackEmoteAnimationV2),
						];

			},

			// => Version: 1
			1:function(){
						this.PackEmoteTimingV1 =[
				'modelFileId', Utils.getFileNameReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'duration' , 'uint32',
				'loopDuration' , 'uint32',
						];

						this.PackEmoteAnimationV1 =[
				'token', Utils.getQWordReader(),
				'timings', Utils.getArrayReader(this.PackEmoteTimingV1),
						];

						this.__root=this.PackEmoteAnimationsV1 =[
				'animations', Utils.getArrayReader(this.PackEmoteAnimationV1),
						];

			},

			// => Version: 0
			0:function(){
						this.PackEmoteTimingV0 =[
				'modelFileId', Utils.getFileNameReader(),
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'duration' , 'uint32',
						];

						this.PackEmoteAnimationV0 =[
				'token', Utils.getQWordReader(),
				'timings', Utils.getArrayReader(this.PackEmoteTimingV0),
						];

						this.__root=this.PackEmoteAnimationsV0 =[
				'animations', Utils.getArrayReader(this.PackEmoteAnimationV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: mach, versions: 1, strucTab: 0x16E9174 
	///==================================================
	{
		name:'mach',
		versions:{


			// => Version: 0
			0:function(){
						this.PackAnimMachineActionV0 =[
				'actionData', Unknown0x1C,
						];

						this.PackAnimMachineActionBlockV0 =[
				'actions', Utils.getArrayReader(this.PackAnimMachineActionV0),
						];

						this.PackAnimMachineActionVariantV0 =[
				'token', Utils.getQWordReader(),
				'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),
						];

						this.PackAnimMachineActionVariantBlockV0 =[
				'actionVariants', Utils.getArrayReader(this.PackAnimMachineActionVariantV0),
						];

						this.PackAnimMachineTransitionVariantV0 =[
				'token', Utils.getQWordReader(),
				'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),
						];

						this.PackAnimMachineTransitionV0 =[
				'name', Utils.getString16Reader(),
				'targetStateName', Utils.getString16Reader(),
				'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),
				'variants', Utils.getArrayReader(this.PackAnimMachineTransitionVariantV0),
						];

						this.PackAnimMachineStateVariantV0 =[
				'token', Utils.getQWordReader(),
				'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),
				'actionVariantBlock', Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV0),
				'transitions', Utils.getArrayReader(this.PackAnimMachineTransitionV0),
						];

						this.PackAnimMachineStateV0 =[
				'name', Utils.getString16Reader(),
				'actionBlock', Utils.getPointerReader(this.PackAnimMachineActionBlockV0),
				'actionVariantBlock', Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV0),
				'transitions', Utils.getArrayReader(this.PackAnimMachineTransitionV0),
				'variants', Utils.getArrayReader(this.PackAnimMachineStateVariantV0),
						];

						this.PackAnimMachineV0 =[
				'states', Utils.getArrayReader(this.PackAnimMachineStateV0),
						];

						this.PackAnimModelV0 =[
				'modelFileId', Utils.getFileNameReader(),
				'modelFileRaw', Utils.getString16Reader(),
				'machineIndex' , 'uint32',
						];

						this.__root=this.PackAnimMachinesV0 =[
				'machines', Utils.getArrayReader(this.PackAnimMachineV0),
				'models', Utils.getArrayReader(this.PackAnimModelV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: fall, versions: 1, strucTab: 0x16E9000 
	///==================================================
	{
		name:'fall',
		versions:{


			// => Version: 0
			0:function(){
						this.PackAnimFallbackV0 =[
				'sourceAnim', Utils.getQWordReader(),
				'targetAnims', Utils.getArrayReader(Utils.getQWordReader()),
						];

						this.__root=this.PackAnimFallbacksV0 =[
				'fallbacks', Utils.getArrayReader(this.PackAnimFallbackV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: seqn, versions: 1, strucTab: 0x16E8E1C 
	///==================================================
	{
		name:'seqn',
		versions:{


			// => Version: 0
			0:function(){
						this.PackAnimSequenceChargeStageV0 =[
				'duration', 'uint16',
				'endingChargeLevel' , 'uint8',
						];

						this.PackAnimSequenceStepActionV0 =[
				'duration' , 'uint32',
						];

						this.PackAnimSequenceStepMoveV0 =[
				'duration' , 'uint32',
				'moveRotation' , ['[]','float32',4],
				'facingRotation' , ['[]','float32',4],
				'velocity' , ['[]','float32',2],
						];

						this.PackAnimSequenceStepV0 =[
				'type' , 'uint8',
				'animationSpeed' , 'float32',
				'flags' , 'uint32',
				'action', Utils.getPointerReader(this.PackAnimSequenceStepActionV0),
				'move', Utils.getPointerReader(this.PackAnimSequenceStepMoveV0),
						];

						this.PackAnimSequenceTriggerV0 =[
				'trigger' , 'uint8',
				'time' , 'uint32',
				'flags' , 'uint32',
						];

						this.PackAnimSequenceDataV0 =[
				'token', Utils.getQWordReader(),
				'flags' , 'uint32',
				'blendInTime' , 'float32',
				'blendOutTime' , 'float32',
				'chargeStages', Utils.getArrayReader(this.PackAnimSequenceChargeStageV0),
				'steps', Utils.getArrayReader(this.PackAnimSequenceStepV0),
				'triggers', Utils.getArrayReader(this.PackAnimSequenceTriggerV0),
						];

						this.PackAnimSequenceV0 =[
				'sequence', Utils.getQWordReader(),
				'animationData', Utils.getArrayReader(this.PackAnimSequenceDataV0),
						];

						this.__root=this.PackAnimSequencesV0 =[
				'sequences', Utils.getArrayReader(this.PackAnimSequenceV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: cnfg, versions: 1, strucTab: 0x16E9370 
	///==================================================
	{
		name:'cnfg',
		versions:{


			// => Version: 0
			0:function(){
						this.PackAnimAimIKBoneV0 =[
				'boneToken', Utils.getQWordReader(),
				'clampAngle' , 'float32',
				'weight' , 'float32',
				'smoothingWeight' , 'float32',
						];

						this.PackAnimAimIKConfigV0 =[
				'name', Utils.getQWordReader(),
				'boneEye', Utils.getQWordReader(),
				'boneSight', Utils.getQWordReader(),
				'endEffector', Utils.getQWordReader(),
				'frustumHAngle' , 'float32',
				'frustumVAngle' , 'float32',
				'frustumLength' , 'float32',
				'targetVelocityConstraint' , 'float32',
				'bones', Utils.getArrayReader(this.PackAnimAimIKBoneV0),
				'targets', Utils.getArrayReader(Utils.getQWordReader()),
				'flags' , 'uint8',
						];

						this.PackAnimIKRaycastTargetV0 =[
				'flags' , 'uint32',
				'direction' , ['[]','float32',3],
						];

						this.PackAnimIKChainV0 =[
				'name', Utils.getQWordReader(),
				'smoothWeight' , ['[]','float32',3],
				'hyperExtensionStart' , 'float32',
				'hyperExtensionScale' , 'float32',
				'bones', Utils.getArrayReader(Utils.getQWordReader()),
				'targetRaycastInfo', Utils.getPointerReader(this.PackAnimIKRaycastTargetV0),
				'targetMode' , 'uint8',
				'chainType' , 'uint8',
						];

						this.PackAnimIKChainGroupV0 =[
				'name', Utils.getQWordReader(),
				'chains', Utils.getArrayReader(this.PackAnimIKChainV0),
						];

						this.__root=this.PackAnimConfigV0 =[
				'aimIKConfigs', Utils.getArrayReader(this.PackAnimAimIKConfigV0),
				'chainGroups', Utils.getArrayReader(this.PackAnimIKChainGroupV0),
						];

			},
		}
	},

	///==================================================
	/// Chunk: eula, versions: 1, strucTab: 0x16E93AC 
	///==================================================
	{
		name:'eula',
		versions:{


			// => Version: 0
			0:function(){
						this.PackEulaLanguageV0 =[
				'Language' , 'uint8',
				'Text', Utils.getString16Reader(),
						];

						this.__root=this.PackEulaV0 =[
				'Language', Utils.getArrayReader(this.PackEulaLanguageV0),
				'Version' , 'uint8',
						];

			},
		}
	},

	///==================================================
	/// Chunk: mfst, versions: 3, strucTab: 0x1743B8C 
	///==================================================
	{
		name:'mfst',
		versions:{


			// => Version: 2, ReferencedFunction: 0x13458C0
			2:function(){
						this.ContentMapRedirector =[
				'mapGUID', ['[]', 'uint8', 16],
				'token' , 'uint32',
				'position' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ContentMapModel =[
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'type' , 'uint32',
				'permutation', Utils.getQWordReader(),
						];

						this.ContentMapStart =[
				'token' , 'uint32',
				'modelArray', Utils.getArrayReader(this.ContentMapModel),
				'position' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ContentMap =[
				'mapGUID', ['[]', 'uint8', 16],
				'mapRedirectorArray', Utils.getArrayReader(this.ContentMapRedirector),
				'mapStartArray', Utils.getArrayReader(this.ContentMapStart),
						];

						this.__root=this.ContentPortalManifest =[
				'mapArray', Utils.getArrayReader(this.ContentMap),
						];

			},

			// => Version: 1
			1:function(){
						this.ContentMapRedirectorV1 =[
				'mapId' , 'uint32',
				'token' , 'uint32',
				'position' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ContentMapModelV1 =[
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'type' , 'uint32',
				'permutation', Utils.getQWordReader(),
						];

						this.ContentMapStartV1 =[
				'token' , 'uint32',
				'modelArray', Utils.getArrayReader(this.ContentMapModelV1),
				'position' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ContentMapV1 =[
				'mapId' , 'uint32',
				'mapRedirectorArray', Utils.getArrayReader(this.ContentMapRedirectorV1),
				'mapStartArray', Utils.getArrayReader(this.ContentMapStartV1),
						];

						this.__root=this.ContentPortalManifestV1 =[
				'mapArray', Utils.getArrayReader(this.ContentMapV1),
						];

			},

			// => Version: 0
			0:function(){
						this.ContentMapRedirectorV0 =[
				'mapId' , 'uint32',
				'token' , 'uint32',
				'position' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ContentMapModelV0 =[
				'filename' , Utils.getFileNameReader(),
				'flags' , 'uint32',
				'type' , 'uint32',
						];

						this.ContentMapStartV0 =[
				'token' , 'uint32',
				'modelArray', Utils.getArrayReader(this.ContentMapModelV0),
				'position' , ['[]','float32',3],
				'radius' , 'float32',
						];

						this.ContentMapV0 =[
				'mapId' , 'uint32',
				'mapRedirectorArray', Utils.getArrayReader(this.ContentMapRedirectorV0),
				'mapStartArray', Utils.getArrayReader(this.ContentMapStartV0),
						];

						this.__root=this.ContentPortalManifestV0 =[
				'mapArray', Utils.getArrayReader(this.ContentMapV0),
						];

			},
		}
	},

]
},{}]},{},[1])